{
  "stats": {
    "suites": 213,
    "tests": 1193,
    "passes": 638,
    "pending": 0,
    "failures": 555,
    "start": "2020-08-31T04:32:22.956Z",
    "end": "2020-08-31T04:44:38.914Z",
    "duration": 735958,
    "testsRegistered": 1223,
    "passPercent": 52.16680294358136,
    "pendingPercent": 0,
    "other": 3,
    "hasOther": true,
    "skipped": 30,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "0243c6fb-b7c8-4c96-af01-fa450b6fd14f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ed46cf89-d3e5-4ffc-871e-b2dfa14f5e6d",
          "title": "Jingtum测试",
          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
          "file": "\\test\\start.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "af013dfb-9c8c-49c1-985f-f03ffc443c85",
              "title": "测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc",
              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
              "file": "\\test\\start.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc \"before all\" hook",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// logger.debug('before connnect')\n// await server.connect()\n// logger.debug('after connnect')",
                  "err": {},
                  "uuid": "8fb68347-6cfc-406a-a890-326e576e9b95",
                  "parentUUID": "af013dfb-9c8c-49c1-985f-f03ffc443c85",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "1b00b1a9-8dbb-4b81-bc34-7fc16941f872",
                  "title": "用例测试",
                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                  "file": "\\test\\start.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "4e8028cc-f248-4486-94f1-30bbc1b978b9",
                      "title": "测试jt_blockNumber",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_blockNumber \"before all\" hook",
                          "timedOut": false,
                          "duration": 5235,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "e5dce3b2-f7c4-4803-b2b5-3e2ddfaadd5a",
                          "parentUUID": "4e8028cc-f248-4486-94f1-30bbc1b978b9",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t查询最新区块号：发起查询请求，等待5秒或10秒（同步时间），再次发起查询请求",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_blockNumber 0010\t查询最新区块号：发起查询请求，等待5秒或10秒（同步时间），再次发起查询请求",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "d038838a-3fcd-4acd-8271-d27a7cc6319b",
                          "parentUUID": "4e8028cc-f248-4486-94f1-30bbc1b978b9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t查询最新区块号",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_blockNumber 0010\t查询最新区块号",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "bf5439cb-9c64-44cb-8ef1-ef9ef1fd150c",
                          "parentUUID": "4e8028cc-f248-4486-94f1-30bbc1b978b9",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "d038838a-3fcd-4acd-8271-d27a7cc6319b",
                        "bf5439cb-9c64-44cb-8ef1-ef9ef1fd150c"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                      "title": "测试jt_getBlockByNumber",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber \"before all\" hook",
                          "timedOut": false,
                          "duration": 1973,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "60743e44-104a-4f9e-af77-6690dfc142a9",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t有效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0010\t有效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "486d8b12-c51f-4165-8693-d878cfd1107c",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块编号，需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0020\t有效区块编号，需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "9fcd3ef0-f977-4d77-aa91-0f311b30fd9e",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t有效区块编号，需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0030\t有效区块编号，需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 3,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected false to equal true",
                            "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": "- false\n+ true\n"
                          },
                          "uuid": "817818e5-a9d1-461d-b11c-3a21298989b3",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t有效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0040\t有效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected false to equal true",
                            "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": "- false\n+ true\n"
                          },
                          "uuid": "96665849-fb73-47ca-825c-09f4227f2063",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0050\t有效区块编号，需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0050\t有效区块编号，需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 0,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected false to equal true",
                            "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": "- false\n+ true\n"
                          },
                          "uuid": "089b30ee-b346-4233-86c8-8b0342111c64",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0060\t有效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0060\t有效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected false to equal true",
                            "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": "- false\n+ true\n"
                          },
                          "uuid": "4919d73f-92c0-4466-8fbc-92ea796d9360",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0090\t有效区块编号，需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0090\t有效区块编号，需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 0,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected false to equal true",
                            "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": "- false\n+ true\n"
                          },
                          "uuid": "23585b59-a04f-4fa4-b3b4-f5e7ffcd5917",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0100\t有效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0100\t有效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 0,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected false to equal true",
                            "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": "- false\n+ true\n"
                          },
                          "uuid": "4c059cb0-d7e2-41e6-802d-fc495d0528f4",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是字符串",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0110\t有效区块编号，无效Boolean参数：showFullTx是字符串",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "1b05b632-5da5-4947-b0f8-8636c5c2411f",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是数字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0110\t有效区块编号，无效Boolean参数：showFullTx是数字",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "9f885244-3f7d-4497-9f12-2d90dda6c365",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是空值",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0110\t有效区块编号，无效Boolean参数：showFullTx是空值",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "e53fe848-18b3-4a01-ba68-636889fc368a",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "63140817-e59a-49d7-8af9-ef0a25fc786a",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'can\\'t find block 99900000' to include 'ledgerNotFound'",
                            "estack": "AssertionError: expected 'can\\'t find block 99900000' to include 'ledgerNotFound'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "4e016afa-6adf-4102-9bfa-ed19942bcc59",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 0,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-1000\": invalid syntax' to include 'invalid ledger_index'",
                            "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-1000\": invalid syntax' to include 'invalid ledger_index'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "8584eec0-66e2-4726-94a7-324e9a718670",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 0,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'strconv.ParseUint: parsing \"abcdefg\": invalid syntax' to include 'invalid ledger_index'",
                            "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"abcdefg\": invalid syntax' to include 'invalid ledger_index'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "d1368d8b-706e-4605-8a1b-694318cf33e8",
                          "parentUUID": "3b4863f6-b5cd-4f1d-9359-a64851936eca",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "486d8b12-c51f-4165-8693-d878cfd1107c",
                        "9fcd3ef0-f977-4d77-aa91-0f311b30fd9e",
                        "1b05b632-5da5-4947-b0f8-8636c5c2411f",
                        "9f885244-3f7d-4497-9f12-2d90dda6c365",
                        "e53fe848-18b3-4a01-ba68-636889fc368a",
                        "63140817-e59a-49d7-8af9-ef0a25fc786a"
                      ],
                      "failures": [
                        "817818e5-a9d1-461d-b11c-3a21298989b3",
                        "96665849-fb73-47ca-825c-09f4227f2063",
                        "089b30ee-b346-4233-86c8-8b0342111c64",
                        "4919d73f-92c0-4466-8fbc-92ea796d9360",
                        "23585b59-a04f-4fa4-b3b4-f5e7ffcd5917",
                        "4c059cb0-d7e2-41e6-802d-fc495d0528f4",
                        "4e016afa-6adf-4102-9bfa-ed19942bcc59",
                        "8584eec0-66e2-4726-94a7-324e9a718670",
                        "d1368d8b-706e-4605-8a1b-694318cf33e8"
                      ],
                      "pending": [],
                      "skipped": [],
                      "duration": 14,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "7fd09f08-fc0a-479d-98d3-a15dc4bcc7dd",
                      "title": "测试jt_getBlockByHash",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByHash \"before all\" hook",
                          "timedOut": false,
                          "duration": 747,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "0574bf53-f9aa-459c-b400-6103c8113101",
                          "parentUUID": "7fd09f08-fc0a-479d-98d3-a15dc4bcc7dd",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t有效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0010\t有效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "04ecf77a-66c2-4ccf-ab43-0b20335c0764",
                          "parentUUID": "7fd09f08-fc0a-479d-98d3-a15dc4bcc7dd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块编号，需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0020\t有效区块编号，需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "50a17a42-cae2-4a8e-81ea-a5ee12fdcf44",
                          "parentUUID": "7fd09f08-fc0a-479d-98d3-a15dc4bcc7dd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是字符串",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0110\t有效区块编号，无效Boolean参数：showFullTx是字符串",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "214b1996-1f0a-41c1-a405-b98ecfcbad62",
                          "parentUUID": "7fd09f08-fc0a-479d-98d3-a15dc4bcc7dd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是数字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0110\t有效区块编号，无效Boolean参数：showFullTx是数字",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "3f0b62cd-e33d-40cd-9c37-bf0f5e713fef",
                          "parentUUID": "7fd09f08-fc0a-479d-98d3-a15dc4bcc7dd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是空值",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0110\t有效区块编号，无效Boolean参数：showFullTx是空值",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "0693346c-cca8-4697-b762-3c8bef65bcb1",
                          "parentUUID": "7fd09f08-fc0a-479d-98d3-a15dc4bcc7dd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 0,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'NewHash256: Wrong length 9990000000' to include 'value out of range'",
                            "estack": "AssertionError: expected 'NewHash256: Wrong length 9990000000' to include 'value out of range'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "fa3ae029-bea3-4e91-9c91-c20239408755",
                          "parentUUID": "7fd09f08-fc0a-479d-98d3-a15dc4bcc7dd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'NewHash256: Wrong length 99900000' to include 'ledgerNotFound'",
                            "estack": "AssertionError: expected 'NewHash256: Wrong length 99900000' to include 'ledgerNotFound'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "156c838b-3b47-4e89-bd26-d66dd51eebcd",
                          "parentUUID": "7fd09f08-fc0a-479d-98d3-a15dc4bcc7dd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'encoding/hex: invalid byte: U+002D \\'-\\'' to include 'invalid ledger_index'",
                            "estack": "AssertionError: expected 'encoding/hex: invalid byte: U+002D \\'-\\'' to include 'invalid ledger_index'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "b990171b-6bbc-4340-be71-28027e996fe3",
                          "parentUUID": "7fd09f08-fc0a-479d-98d3-a15dc4bcc7dd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 0,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'encoding/hex: invalid byte: U+0067 \\'g\\'' to include 'invalid ledger_index'",
                            "estack": "AssertionError: expected 'encoding/hex: invalid byte: U+0067 \\'g\\'' to include 'invalid ledger_index'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "69a246a8-f46d-464f-844b-22f502488330",
                          "parentUUID": "7fd09f08-fc0a-479d-98d3-a15dc4bcc7dd",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "04ecf77a-66c2-4ccf-ab43-0b20335c0764",
                        "50a17a42-cae2-4a8e-81ea-a5ee12fdcf44",
                        "214b1996-1f0a-41c1-a405-b98ecfcbad62",
                        "3f0b62cd-e33d-40cd-9c37-bf0f5e713fef",
                        "0693346c-cca8-4697-b762-3c8bef65bcb1"
                      ],
                      "failures": [
                        "fa3ae029-bea3-4e91-9c91-c20239408755",
                        "156c838b-3b47-4e89-bd26-d66dd51eebcd",
                        "b990171b-6bbc-4340-be71-28027e996fe3",
                        "69a246a8-f46d-464f-844b-22f502488330"
                      ],
                      "pending": [],
                      "skipped": [],
                      "duration": 8,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "ae402bda-8dc6-44f0-b580-dcb19c19de2c",
                      "title": "测试jt_createAccount",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_createAccount \"before all\" hook",
                          "timedOut": false,
                          "duration": 222,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "10520473-c38a-4766-9b33-52b616b5a981",
                          "parentUUID": "ae402bda-8dc6-44f0-b580-dcb19c19de2c",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t创建有效的账户",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_createAccount 0010\t创建有效的账户",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "6b166a5f-4fc5-4bba-bd18-d7031b2bc2d3",
                          "parentUUID": "ae402bda-8dc6-44f0-b580-dcb19c19de2c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t创建无效的账户:重复的名字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_createAccount 0020\t创建无效的账户:重复的名字",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "9fd7ae9f-1416-42c6-b817-d9aed573f261",
                          "parentUUID": "ae402bda-8dc6-44f0-b580-dcb19c19de2c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t创建无效的账户:超过长度的字符串数字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_createAccount 0020\t创建无效的账户:超过长度的字符串数字",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "61bc525f-1d4a-4b5b-a7e2-bfcea6e7baf5",
                          "parentUUID": "ae402bda-8dc6-44f0-b580-dcb19c19de2c",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "6b166a5f-4fc5-4bba-bd18-d7031b2bc2d3",
                        "9fd7ae9f-1416-42c6-b817-d9aed573f261",
                        "61bc525f-1d4a-4b5b-a7e2-bfcea6e7baf5"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "5dd1a159-103b-4a37-a3de-4a718fa9b524",
                      "title": "测试jt_getAccount",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "6aa85947-6171-4331-a69b-4db59c68f112",
                          "title": "测试jt_getAccount， tag为null",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null \"before all\" hook",
                              "timedOut": false,
                              "duration": 436,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "ca7d15d7-6b60-4fb2-b392-23c0f65a6d0b",
                              "parentUUID": "6aa85947-6171-4331-a69b-4db59c68f112",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "c3d3f69a-144f-4eb4-854f-c7a755e4e915",
                              "parentUUID": "6aa85947-6171-4331-a69b-4db59c68f112",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "137eea9d-d370-4f4b-b334-802e8d6c5dfb",
                              "parentUUID": "6aa85947-6171-4331-a69b-4db59c68f112",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "25f04af7-9c38-479f-bfc2-be2717f09777",
                              "parentUUID": "6aa85947-6171-4331-a69b-4db59c68f112",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "ebf80f20-88a3-4d52-ba02-ae4c34bbb892",
                              "parentUUID": "6aa85947-6171-4331-a69b-4db59c68f112",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "4bcd960b-0bcf-4b2b-97e0-2a19c972606f",
                              "parentUUID": "6aa85947-6171-4331-a69b-4db59c68f112",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "174dc6a7-2975-4f30-a773-6dd911a8e7c2",
                              "parentUUID": "6aa85947-6171-4331-a69b-4db59c68f112",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "c3d3f69a-144f-4eb4-854f-c7a755e4e915"
                          ],
                          "failures": [
                            "137eea9d-d370-4f4b-b334-802e8d6c5dfb",
                            "25f04af7-9c38-479f-bfc2-be2717f09777",
                            "ebf80f20-88a3-4d52-ba02-ae4c34bbb892",
                            "4bcd960b-0bcf-4b2b-97e0-2a19c972606f",
                            "174dc6a7-2975-4f30-a773-6dd911a8e7c2"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 9,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "90dc04cb-4f05-47cd-80f1-8ee2b9d39c1d",
                          "title": "测试jt_getAccount， tag为validated",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated \"before all\" hook",
                              "timedOut": false,
                              "duration": 412,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "11ec6a18-d782-48a3-b0a1-f794bb2039bc",
                              "parentUUID": "90dc04cb-4f05-47cd-80f1-8ee2b9d39c1d",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "b15add8e-029c-4d3d-adca-03ef578f2438",
                              "parentUUID": "90dc04cb-4f05-47cd-80f1-8ee2b9d39c1d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "ffc04527-f91d-4b32-ba0b-7167979de503",
                              "parentUUID": "90dc04cb-4f05-47cd-80f1-8ee2b9d39c1d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,validated' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,validated' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "f71b7ba0-c1d7-4a6e-b3ba-f96b6ff992a2",
                              "parentUUID": "90dc04cb-4f05-47cd-80f1-8ee2b9d39c1d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "022d2011-3d89-4576-9554-553f6e077104",
                              "parentUUID": "90dc04cb-4f05-47cd-80f1-8ee2b9d39c1d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "a859e6ff-d5cb-45f1-a1e4-4e9f2ba239e6",
                              "parentUUID": "90dc04cb-4f05-47cd-80f1-8ee2b9d39c1d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "419f9170-9da9-4068-bcab-3794807714f5",
                              "parentUUID": "90dc04cb-4f05-47cd-80f1-8ee2b9d39c1d",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "b15add8e-029c-4d3d-adca-03ef578f2438",
                            "ffc04527-f91d-4b32-ba0b-7167979de503",
                            "f71b7ba0-c1d7-4a6e-b3ba-f96b6ff992a2",
                            "022d2011-3d89-4576-9554-553f6e077104",
                            "a859e6ff-d5cb-45f1-a1e4-4e9f2ba239e6",
                            "419f9170-9da9-4068-bcab-3794807714f5"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 2,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "d7b7a8b8-98d9-4707-9180-81965edd709f",
                          "title": "测试jt_getAccount， tag为current",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current \"before all\" hook",
                              "timedOut": false,
                              "duration": 422,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "77063d61-3ff4-42c6-9ec5-4bfdbc9f0f14",
                              "parentUUID": "d7b7a8b8-98d9-4707-9180-81965edd709f",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "045816a6-ed61-4ee2-9a5b-e28ed7cd00a8",
                              "parentUUID": "d7b7a8b8-98d9-4707-9180-81965edd709f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "a1cd2b79-fe20-4d26-b4a6-82969099de3e",
                              "parentUUID": "d7b7a8b8-98d9-4707-9180-81965edd709f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,current' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,current' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "65d2593c-ff12-476f-add9-c38648c8a73a",
                              "parentUUID": "d7b7a8b8-98d9-4707-9180-81965edd709f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "4dccdc08-e887-4906-97e6-9bd3f335200f",
                              "parentUUID": "d7b7a8b8-98d9-4707-9180-81965edd709f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "b705d061-3ba1-4041-bef5-7bf2bfd4ffdf",
                              "parentUUID": "d7b7a8b8-98d9-4707-9180-81965edd709f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "d586b3f2-d5ee-4090-993c-2e3e61e735f5",
                              "parentUUID": "d7b7a8b8-98d9-4707-9180-81965edd709f",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "045816a6-ed61-4ee2-9a5b-e28ed7cd00a8",
                            "a1cd2b79-fe20-4d26-b4a6-82969099de3e",
                            "65d2593c-ff12-476f-add9-c38648c8a73a",
                            "4dccdc08-e887-4906-97e6-9bd3f335200f",
                            "b705d061-3ba1-4041-bef5-7bf2bfd4ffdf",
                            "d586b3f2-d5ee-4090-993c-2e3e61e735f5"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 8,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "80ddf15a-28cf-4bd6-814c-425a65dba361",
                          "title": "测试jt_getAccount， tag为closed",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed \"before all\" hook",
                              "timedOut": false,
                              "duration": 434,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "6ef01dda-b3b9-4431-bbe2-b6ac4ce41e2e",
                              "parentUUID": "80ddf15a-28cf-4bd6-814c-425a65dba361",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "8da8d5cc-1d6f-42fa-bf15-f56b054c9198",
                              "parentUUID": "80ddf15a-28cf-4bd6-814c-425a65dba361",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "892327f5-d3b2-43ec-8fde-0077b0725b55",
                              "parentUUID": "80ddf15a-28cf-4bd6-814c-425a65dba361",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,closed' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,closed' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "5a35c88c-7554-459c-803f-714ae77daf14",
                              "parentUUID": "80ddf15a-28cf-4bd6-814c-425a65dba361",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "d8ef1567-121b-44c1-98e2-ad56518bb20c",
                              "parentUUID": "80ddf15a-28cf-4bd6-814c-425a65dba361",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "3bd1fade-7e13-4291-8e69-1cc19d75ce7b",
                              "parentUUID": "80ddf15a-28cf-4bd6-814c-425a65dba361",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "83b8201b-f1fc-4963-bfd6-a21973d55c44",
                              "parentUUID": "80ddf15a-28cf-4bd6-814c-425a65dba361",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "8da8d5cc-1d6f-42fa-bf15-f56b054c9198",
                            "892327f5-d3b2-43ec-8fde-0077b0725b55",
                            "5a35c88c-7554-459c-803f-714ae77daf14",
                            "d8ef1567-121b-44c1-98e2-ad56518bb20c",
                            "3bd1fade-7e13-4291-8e69-1cc19d75ce7b",
                            "83b8201b-f1fc-4963-bfd6-a21973d55c44"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 5,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "e9b86faf-daae-4107-b747-2dbef7c127c6",
                      "title": "测试jt_accounts",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_accounts \"before all\" hook",
                          "timedOut": false,
                          "duration": 74,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "b4de6f4f-851e-4e24-ab43-713ab6496e64",
                          "parentUUID": "e9b86faf-daae-4107-b747-2dbef7c127c6",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\tjt_accounts",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_accounts 0010\tjt_accounts",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "b0afa1e1-906a-41aa-9ce2-4ef8b4f8c5fc",
                          "parentUUID": "e9b86faf-daae-4107-b747-2dbef7c127c6",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b0afa1e1-906a-41aa-9ce2-4ef8b4f8c5fc"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "95a56361-761f-44ea-95ee-1315fc3c3aca",
                      "title": "测试jt_getBalance",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "41229422-2d11-4916-9752-b124103ee33e",
                          "title": "测试jt_getBalance， Token为swtc，tag为null",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null \"before all\" hook",
                              "timedOut": false,
                              "duration": 506,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "9733b91e-8e74-41a6-83a4-7648f7da645a",
                              "parentUUID": "41229422-2d11-4916-9752-b124103ee33e",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "1d3f99bf-2cd6-412c-9c90-8a0dc952f8a6",
                              "parentUUID": "41229422-2d11-4916-9752-b124103ee33e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "f18e72c2-643a-40ac-92ee-9721d20ed62f",
                              "parentUUID": "41229422-2d11-4916-9752-b124103ee33e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "326752ad-ecc2-4459-95df-31a560726c47",
                              "parentUUID": "41229422-2d11-4916-9752-b124103ee33e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "8e6735c9-6fcd-478c-ba03-ca7902f92173",
                              "parentUUID": "41229422-2d11-4916-9752-b124103ee33e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "5d1effb8-f733-48d1-9535-66c16508f454",
                              "parentUUID": "41229422-2d11-4916-9752-b124103ee33e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "dc07eeb2-f3b3-4673-8600-1c8bb5a67d94",
                              "parentUUID": "41229422-2d11-4916-9752-b124103ee33e",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "1d3f99bf-2cd6-412c-9c90-8a0dc952f8a6"
                          ],
                          "failures": [
                            "f18e72c2-643a-40ac-92ee-9721d20ed62f",
                            "326752ad-ecc2-4459-95df-31a560726c47",
                            "8e6735c9-6fcd-478c-ba03-ca7902f92173",
                            "5d1effb8-f733-48d1-9535-66c16508f454",
                            "dc07eeb2-f3b3-4673-8600-1c8bb5a67d94"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 5,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "1fe3704a-d5cd-465f-87e0-e84374d27f40",
                          "title": "测试jt_getBalance， Token为swtc，tag为current",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current \"before all\" hook",
                              "timedOut": false,
                              "duration": 428,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "890308ec-f69a-4dfc-8af7-c1d683d2e2b4",
                              "parentUUID": "1fe3704a-d5cd-465f-87e0-e84374d27f40",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "b181c9b1-34ca-46bb-9aeb-92606a12a0b1",
                              "parentUUID": "1fe3704a-d5cd-465f-87e0-e84374d27f40",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "80514fa6-dec5-4ea0-b264-fa1c5e1e0840",
                              "parentUUID": "1fe3704a-d5cd-465f-87e0-e84374d27f40",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "7ff82caf-2d79-4d4f-b6e8-8b986b288770",
                              "parentUUID": "1fe3704a-d5cd-465f-87e0-e84374d27f40",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "02b6efbe-a8d6-4110-a64e-00788d85c57e",
                              "parentUUID": "1fe3704a-d5cd-465f-87e0-e84374d27f40",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "812dcab4-5bf4-418c-91b3-1f80242373e9",
                              "parentUUID": "1fe3704a-d5cd-465f-87e0-e84374d27f40",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "c7204698-97b8-44d6-8f2f-63e2375686ee",
                              "parentUUID": "1fe3704a-d5cd-465f-87e0-e84374d27f40",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "b181c9b1-34ca-46bb-9aeb-92606a12a0b1"
                          ],
                          "failures": [
                            "80514fa6-dec5-4ea0-b264-fa1c5e1e0840",
                            "7ff82caf-2d79-4d4f-b6e8-8b986b288770",
                            "02b6efbe-a8d6-4110-a64e-00788d85c57e",
                            "812dcab4-5bf4-418c-91b3-1f80242373e9",
                            "c7204698-97b8-44d6-8f2f-63e2375686ee"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 3,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "902a3257-e9af-45e7-9e57-f145783d9779",
                          "title": "测试jt_getBalance， Token为swtc，tag为validated",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated \"before all\" hook",
                              "timedOut": false,
                              "duration": 428,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "f9f37ab1-5f88-490d-a48e-cfc2bb9bb15c",
                              "parentUUID": "902a3257-e9af-45e7-9e57-f145783d9779",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "bb30995d-43af-4987-a079-5838aa47d850",
                              "parentUUID": "902a3257-e9af-45e7-9e57-f145783d9779",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "c33fc696-065c-4d90-b85a-a940bbd177ee",
                              "parentUUID": "902a3257-e9af-45e7-9e57-f145783d9779",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "eb57dc71-af61-4197-94fe-9a5d7cbe3fbd",
                              "parentUUID": "902a3257-e9af-45e7-9e57-f145783d9779",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "d0979902-a131-4bdd-af78-0f7d69d30268",
                              "parentUUID": "902a3257-e9af-45e7-9e57-f145783d9779",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "bee5215a-a5b6-42a8-8af0-67b034449f0a",
                              "parentUUID": "902a3257-e9af-45e7-9e57-f145783d9779",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "2dd95876-21fd-4db5-b5e6-dd8a000f644d",
                              "parentUUID": "902a3257-e9af-45e7-9e57-f145783d9779",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "bb30995d-43af-4987-a079-5838aa47d850"
                          ],
                          "failures": [
                            "c33fc696-065c-4d90-b85a-a940bbd177ee",
                            "eb57dc71-af61-4197-94fe-9a5d7cbe3fbd",
                            "d0979902-a131-4bdd-af78-0f7d69d30268",
                            "bee5215a-a5b6-42a8-8af0-67b034449f0a",
                            "2dd95876-21fd-4db5-b5e6-dd8a000f644d"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 4,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "6c639fea-1b9b-462c-bdd8-9b86d03f2802",
                          "title": "测试jt_getBalance， Token为swtc，tag为closed",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed \"before all\" hook",
                              "timedOut": false,
                              "duration": 445,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "ce0c9b0a-b864-4cc0-b33d-f9bfc02c646a",
                              "parentUUID": "6c639fea-1b9b-462c-bdd8-9b86d03f2802",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "73aa6c7d-0ed5-444a-b70f-76c0d4c99ba5",
                              "parentUUID": "6c639fea-1b9b-462c-bdd8-9b86d03f2802",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "05ffadb1-0c53-402d-9179-d4bfba0f5695",
                              "parentUUID": "6c639fea-1b9b-462c-bdd8-9b86d03f2802",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "1f00f12b-b25c-452c-8b11-8e62e3ea6483",
                              "parentUUID": "6c639fea-1b9b-462c-bdd8-9b86d03f2802",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "67570ff7-70f9-4495-8fa6-0af099a029c1",
                              "parentUUID": "6c639fea-1b9b-462c-bdd8-9b86d03f2802",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "3af8cb67-2891-4afc-8f62-34a3752286dc",
                              "parentUUID": "6c639fea-1b9b-462c-bdd8-9b86d03f2802",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "40f763e9-687f-4af8-929c-e47ca623192c",
                              "parentUUID": "6c639fea-1b9b-462c-bdd8-9b86d03f2802",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "73aa6c7d-0ed5-444a-b70f-76c0d4c99ba5"
                          ],
                          "failures": [
                            "05ffadb1-0c53-402d-9179-d4bfba0f5695",
                            "1f00f12b-b25c-452c-8b11-8e62e3ea6483",
                            "67570ff7-70f9-4495-8fa6-0af099a029c1",
                            "3af8cb67-2891-4afc-8f62-34a3752286dc",
                            "40f763e9-687f-4af8-929c-e47ca623192c"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 3,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "18d8838a-fdfa-491b-832e-6b84f08b98a5",
                          "title": "测试jt_getBalance， Token为swtc，tag为16417699",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为16417699 \"before all\" hook",
                              "timedOut": false,
                              "duration": 421,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "758b3400-5efe-469c-ac3e-937e048b2795",
                              "parentUUID": "18d8838a-fdfa-491b-832e-6b84f08b98a5",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为16417699 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "f934aba3-80fb-4d92-8b16-8c74bc44e2f0",
                              "parentUUID": "18d8838a-fdfa-491b-832e-6b84f08b98a5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为16417699 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "eaa01fe7-f8c8-40a4-9b71-f596562f545d",
                              "parentUUID": "18d8838a-fdfa-491b-832e-6b84f08b98a5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为16417699 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "4b493871-1b13-4f63-9627-1332e91a139f",
                              "parentUUID": "18d8838a-fdfa-491b-832e-6b84f08b98a5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为16417699 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "29bf674d-cf62-4501-9fe1-64d9ac002cf7",
                              "parentUUID": "18d8838a-fdfa-491b-832e-6b84f08b98a5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为16417699 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "1ef52b7d-0e8d-4f60-b764-d24c1300f545",
                              "parentUUID": "18d8838a-fdfa-491b-832e-6b84f08b98a5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为16417699 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "afef2e9a-f5f2-4134-9f33-24e644ccc679",
                              "parentUUID": "18d8838a-fdfa-491b-832e-6b84f08b98a5",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "f934aba3-80fb-4d92-8b16-8c74bc44e2f0"
                          ],
                          "failures": [
                            "eaa01fe7-f8c8-40a4-9b71-f596562f545d",
                            "4b493871-1b13-4f63-9627-1332e91a139f",
                            "29bf674d-cf62-4501-9fe1-64d9ac002cf7",
                            "1ef52b7d-0e8d-4f60-b764-d24c1300f545",
                            "afef2e9a-f5f2-4134-9f33-24e644ccc679"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 5,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "230b0a6f-cfaf-4889-9741-8559d90b9f0f",
                          "title": "测试jt_getBalance， Token为swtc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A \"before all\" hook",
                              "timedOut": false,
                              "duration": 427,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "5850e4c7-8867-49fd-91e9-d4864b0714a8",
                              "parentUUID": "230b0a6f-cfaf-4889-9741-8559d90b9f0f",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "16a0db35-c911-486d-838f-18dc11d1bf13",
                              "parentUUID": "230b0a6f-cfaf-4889-9741-8559d90b9f0f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "1d356e58-a809-44de-9484-bc3b5fa19c8e",
                              "parentUUID": "230b0a6f-cfaf-4889-9741-8559d90b9f0f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "ad31f0fb-f746-49d0-92f1-f3eef699796e",
                              "parentUUID": "230b0a6f-cfaf-4889-9741-8559d90b9f0f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "767e4833-b45d-4c69-958c-3aee235b0175",
                              "parentUUID": "230b0a6f-cfaf-4889-9741-8559d90b9f0f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "604a0389-dc2c-4d30-af09-48ea87936be9",
                              "parentUUID": "230b0a6f-cfaf-4889-9741-8559d90b9f0f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "9014a7b6-3c07-4e44-8b06-54a541a0c793",
                              "parentUUID": "230b0a6f-cfaf-4889-9741-8559d90b9f0f",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "16a0db35-c911-486d-838f-18dc11d1bf13"
                          ],
                          "failures": [
                            "1d356e58-a809-44de-9484-bc3b5fa19c8e",
                            "ad31f0fb-f746-49d0-92f1-f3eef699796e",
                            "767e4833-b45d-4c69-958c-3aee235b0175",
                            "604a0389-dc2c-4d30-af09-48ea87936be9",
                            "9014a7b6-3c07-4e44-8b06-54a541a0c793"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 5,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "ad5f4acd-7021-4122-9b10-a222aad2ebde",
                          "title": "测试jt_getBalance， Token为CNYT，tag为null",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为null \"before all\" hook",
                              "timedOut": false,
                              "duration": 423,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "15dab542-d524-4b3a-98f2-a9b8eaf4a538",
                              "parentUUID": "ad5f4acd-7021-4122-9b10-a222aad2ebde",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为null 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "68b82529-9363-4874-91a8-33512daf766d",
                              "parentUUID": "ad5f4acd-7021-4122-9b10-a222aad2ebde",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为null 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "cf0d6f6f-9f86-43b0-a129-cd9e226eca2a",
                              "parentUUID": "ad5f4acd-7021-4122-9b10-a222aad2ebde",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为null 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "0384109d-344a-483b-9c39-dc11396f6eea",
                              "parentUUID": "ad5f4acd-7021-4122-9b10-a222aad2ebde",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为null 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "a863c59c-a4af-4c48-8f34-2f6591eae058",
                              "parentUUID": "ad5f4acd-7021-4122-9b10-a222aad2ebde",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为null 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "5cfa9f3f-b13e-466d-9e98-aeacd9686714",
                              "parentUUID": "ad5f4acd-7021-4122-9b10-a222aad2ebde",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为null 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "b0592220-4068-4af8-a2fa-f5fff865d163",
                              "parentUUID": "ad5f4acd-7021-4122-9b10-a222aad2ebde",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "68b82529-9363-4874-91a8-33512daf766d"
                          ],
                          "failures": [
                            "cf0d6f6f-9f86-43b0-a129-cd9e226eca2a",
                            "0384109d-344a-483b-9c39-dc11396f6eea",
                            "a863c59c-a4af-4c48-8f34-2f6591eae058",
                            "5cfa9f3f-b13e-466d-9e98-aeacd9686714",
                            "b0592220-4068-4af8-a2fa-f5fff865d163"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 3,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "4665dbe8-77a7-408d-9451-a065a60c0244",
                          "title": "测试jt_getBalance， Token为CNYT，tag为current",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为current \"before all\" hook",
                              "timedOut": false,
                              "duration": 422,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "42730a43-d970-4ae0-985f-276fd04a419f",
                              "parentUUID": "4665dbe8-77a7-408d-9451-a065a60c0244",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为current 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "48b428e3-953e-4075-90ec-e18152f4c6cb",
                              "parentUUID": "4665dbe8-77a7-408d-9451-a065a60c0244",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为current 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "c9069988-8ef5-4047-95ec-50f4dfcc37e8",
                              "parentUUID": "4665dbe8-77a7-408d-9451-a065a60c0244",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为current 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "90c0cf43-117e-4138-a4a6-cf8afe725419",
                              "parentUUID": "4665dbe8-77a7-408d-9451-a065a60c0244",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为current 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "90e6d15a-88f4-489e-8e20-cb7bee346b6c",
                              "parentUUID": "4665dbe8-77a7-408d-9451-a065a60c0244",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为current 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "42d24f92-cbe6-4063-b048-ffd09c49ee29",
                              "parentUUID": "4665dbe8-77a7-408d-9451-a065a60c0244",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为current 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "c12af17a-8ecc-4b69-8efd-62e7fc748e25",
                              "parentUUID": "4665dbe8-77a7-408d-9451-a065a60c0244",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "48b428e3-953e-4075-90ec-e18152f4c6cb"
                          ],
                          "failures": [
                            "c9069988-8ef5-4047-95ec-50f4dfcc37e8",
                            "90c0cf43-117e-4138-a4a6-cf8afe725419",
                            "90e6d15a-88f4-489e-8e20-cb7bee346b6c",
                            "42d24f92-cbe6-4063-b048-ffd09c49ee29",
                            "c12af17a-8ecc-4b69-8efd-62e7fc748e25"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 4,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "3875e45d-69bc-4a1e-a21b-d332137340c9",
                          "title": "测试jt_getBalance， Token为CNYT，tag为validated",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为validated \"before all\" hook",
                              "timedOut": false,
                              "duration": 422,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "9caba020-0c9e-40d9-bfb1-fcbdc653a0c4",
                              "parentUUID": "3875e45d-69bc-4a1e-a21b-d332137340c9",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为validated 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "4e7b057d-3d00-4103-a0e5-e0211a8a55b0",
                              "parentUUID": "3875e45d-69bc-4a1e-a21b-d332137340c9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为validated 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "3cb61d81-9ba9-40a0-956a-e75bbf0b8f41",
                              "parentUUID": "3875e45d-69bc-4a1e-a21b-d332137340c9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为validated 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "344385a5-b6d5-4389-aca3-cc8f72523be3",
                              "parentUUID": "3875e45d-69bc-4a1e-a21b-d332137340c9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为validated 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "899dc7e3-0191-4489-be11-3b6f7d10a79c",
                              "parentUUID": "3875e45d-69bc-4a1e-a21b-d332137340c9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为validated 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "b70b9272-1ea4-416e-861e-e38817d805b4",
                              "parentUUID": "3875e45d-69bc-4a1e-a21b-d332137340c9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为validated 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "3b5fb028-7881-4190-9e71-92f1529c6235",
                              "parentUUID": "3875e45d-69bc-4a1e-a21b-d332137340c9",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "4e7b057d-3d00-4103-a0e5-e0211a8a55b0"
                          ],
                          "failures": [
                            "3cb61d81-9ba9-40a0-956a-e75bbf0b8f41",
                            "344385a5-b6d5-4389-aca3-cc8f72523be3",
                            "899dc7e3-0191-4489-be11-3b6f7d10a79c",
                            "b70b9272-1ea4-416e-861e-e38817d805b4",
                            "3b5fb028-7881-4190-9e71-92f1529c6235"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 2,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "3d31f172-0424-43f6-8e15-37d2881b966b",
                          "title": "测试jt_getBalance， Token为CNYT，tag为closed",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为closed \"before all\" hook",
                              "timedOut": false,
                              "duration": 418,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "f9bc5c9d-f081-4f13-bdf3-0f389686d555",
                              "parentUUID": "3d31f172-0424-43f6-8e15-37d2881b966b",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为closed 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "eb4930cc-0bfd-426a-8b17-17db4b297d31",
                              "parentUUID": "3d31f172-0424-43f6-8e15-37d2881b966b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为closed 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "9010ac5b-6704-4e0c-bb3a-9fd9647f7273",
                              "parentUUID": "3d31f172-0424-43f6-8e15-37d2881b966b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为closed 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "5bfeed98-5c03-4bb9-9949-a6b3eb8d6b52",
                              "parentUUID": "3d31f172-0424-43f6-8e15-37d2881b966b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为closed 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "d0d1e455-cfde-4f03-b6f0-856f59260dcc",
                              "parentUUID": "3d31f172-0424-43f6-8e15-37d2881b966b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为closed 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "1c155d45-6b30-441a-a102-d9080c553aae",
                              "parentUUID": "3d31f172-0424-43f6-8e15-37d2881b966b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为closed 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "4dfc4219-b313-4fbe-93e7-7791a6f97209",
                              "parentUUID": "3d31f172-0424-43f6-8e15-37d2881b966b",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "eb4930cc-0bfd-426a-8b17-17db4b297d31"
                          ],
                          "failures": [
                            "9010ac5b-6704-4e0c-bb3a-9fd9647f7273",
                            "5bfeed98-5c03-4bb9-9949-a6b3eb8d6b52",
                            "d0d1e455-cfde-4f03-b6f0-856f59260dcc",
                            "1c155d45-6b30-441a-a102-d9080c553aae",
                            "4dfc4219-b313-4fbe-93e7-7791a6f97209"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 2,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "db062ead-37e8-48d9-90ae-1eea98d2f78b",
                          "title": "测试jt_getBalance， Token为CNYT，tag为16417699",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为16417699 \"before all\" hook",
                              "timedOut": false,
                              "duration": 419,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "3f695771-e42e-48f5-8dbc-c1fcc585629e",
                              "parentUUID": "db062ead-37e8-48d9-90ae-1eea98d2f78b",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为16417699 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "654c2165-ea1e-4fa2-8899-766ee52a9c03",
                              "parentUUID": "db062ead-37e8-48d9-90ae-1eea98d2f78b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为16417699 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "e3a7fa28-a80d-45d0-aed0-b3ffe2727c50",
                              "parentUUID": "db062ead-37e8-48d9-90ae-1eea98d2f78b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为16417699 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "83a2eba0-b0f5-479b-96aa-273adac528b6",
                              "parentUUID": "db062ead-37e8-48d9-90ae-1eea98d2f78b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为16417699 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "58acf2a9-c2ee-43d9-bcbc-107893742c84",
                              "parentUUID": "db062ead-37e8-48d9-90ae-1eea98d2f78b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为16417699 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "c93fedee-420c-4a99-9398-f431a5b9c865",
                              "parentUUID": "db062ead-37e8-48d9-90ae-1eea98d2f78b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为16417699 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "2b214c2a-31f7-4208-a2fc-541abecd2eb9",
                              "parentUUID": "db062ead-37e8-48d9-90ae-1eea98d2f78b",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "654c2165-ea1e-4fa2-8899-766ee52a9c03"
                          ],
                          "failures": [
                            "e3a7fa28-a80d-45d0-aed0-b3ffe2727c50",
                            "83a2eba0-b0f5-479b-96aa-273adac528b6",
                            "58acf2a9-c2ee-43d9-bcbc-107893742c84",
                            "c93fedee-420c-4a99-9398-f431a5b9c865",
                            "2b214c2a-31f7-4208-a2fc-541abecd2eb9"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 3,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "33909b75-2127-4747-bd03-cfe492032154",
                          "title": "测试jt_getBalance， Token为CNYT，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A \"before all\" hook",
                              "timedOut": false,
                              "duration": 1399,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "e019c6ac-278f-4af9-ba16-c9d7676f2bc0",
                              "parentUUID": "33909b75-2127-4747-bd03-cfe492032154",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "dc1054e3-cae2-4799-9cd7-16707f5aa997",
                              "parentUUID": "33909b75-2127-4747-bd03-cfe492032154",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "ffe7fabc-0a88-4d8a-a160-0f37186072b5",
                              "parentUUID": "33909b75-2127-4747-bd03-cfe492032154",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-CNYT' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "2faf4d32-000e-497f-b898-c49bf1a66778",
                              "parentUUID": "33909b75-2127-4747-bd03-cfe492032154",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "f24425aa-4223-4a41-a004-03f107bae128",
                              "parentUUID": "33909b75-2127-4747-bd03-cfe492032154",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "57f41dc0-aa2c-4806-a656-37575156c373",
                              "parentUUID": "33909b75-2127-4747-bd03-cfe492032154",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为CNYT，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "de56912f-3d4c-4271-b914-d3630042a91d",
                              "parentUUID": "33909b75-2127-4747-bd03-cfe492032154",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "dc1054e3-cae2-4799-9cd7-16707f5aa997"
                          ],
                          "failures": [
                            "ffe7fabc-0a88-4d8a-a160-0f37186072b5",
                            "2faf4d32-000e-497f-b898-c49bf1a66778",
                            "f24425aa-4223-4a41-a004-03f107bae128",
                            "57f41dc0-aa2c-4806-a656-37575156c373",
                            "de56912f-3d4c-4271-b914-d3630042a91d"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 7,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "c2f0cf9b-fd6b-4684-8a6d-6cf29cf92161",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为null",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null \"before all\" hook",
                              "timedOut": false,
                              "duration": 421,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "8a8a8e66-3a6a-4360-a326-e28e2b9cfd21",
                              "parentUUID": "c2f0cf9b-fd6b-4684-8a6d-6cf29cf92161",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "c0126ba9-4366-4456-918a-8751bb3712ac",
                              "parentUUID": "c2f0cf9b-fd6b-4684-8a6d-6cf29cf92161",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "8dbb4fa3-5d56-41bc-91f1-714d79f185c5",
                              "parentUUID": "c2f0cf9b-fd6b-4684-8a6d-6cf29cf92161",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "02937539-7fcd-40be-a175-1d4fa1e674ec",
                              "parentUUID": "c2f0cf9b-fd6b-4684-8a6d-6cf29cf92161",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "c558c1d9-cf3d-4b2d-93eb-4b34957232d0",
                              "parentUUID": "c2f0cf9b-fd6b-4684-8a6d-6cf29cf92161",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "99803351-5cdd-455a-8632-3c265b4c5a7a",
                              "parentUUID": "c2f0cf9b-fd6b-4684-8a6d-6cf29cf92161",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "464d4cd3-6d5f-410e-a0c0-b1eb693ef6e2",
                              "parentUUID": "c2f0cf9b-fd6b-4684-8a6d-6cf29cf92161",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "c0126ba9-4366-4456-918a-8751bb3712ac",
                            "8dbb4fa3-5d56-41bc-91f1-714d79f185c5",
                            "02937539-7fcd-40be-a175-1d4fa1e674ec",
                            "c558c1d9-cf3d-4b2d-93eb-4b34957232d0",
                            "99803351-5cdd-455a-8632-3c265b4c5a7a",
                            "464d4cd3-6d5f-410e-a0c0-b1eb693ef6e2"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 3,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "bb826a39-11d9-4952-89dc-b51d2161e796",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为current",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current \"before all\" hook",
                              "timedOut": false,
                              "duration": 424,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "f647eff2-bf64-4e5c-b95a-e39b0f5cf322",
                              "parentUUID": "bb826a39-11d9-4952-89dc-b51d2161e796",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "4b4b33b2-6889-4097-85a9-d9914e2e23a4",
                              "parentUUID": "bb826a39-11d9-4952-89dc-b51d2161e796",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "134ebb1f-60db-44f9-a616-151f6af162ab",
                              "parentUUID": "bb826a39-11d9-4952-89dc-b51d2161e796",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "74975b1f-15cb-4334-a253-283b3c3b8a54",
                              "parentUUID": "bb826a39-11d9-4952-89dc-b51d2161e796",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "baf92c59-0e52-40d8-ac08-b57dd92a2cab",
                              "parentUUID": "bb826a39-11d9-4952-89dc-b51d2161e796",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "16759e4d-71a7-4ab3-9647-4f896a3dfa5d",
                              "parentUUID": "bb826a39-11d9-4952-89dc-b51d2161e796",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "d56f1edf-8e2e-42a7-b0dc-24aa686355f0",
                              "parentUUID": "bb826a39-11d9-4952-89dc-b51d2161e796",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "4b4b33b2-6889-4097-85a9-d9914e2e23a4",
                            "134ebb1f-60db-44f9-a616-151f6af162ab",
                            "74975b1f-15cb-4334-a253-283b3c3b8a54",
                            "baf92c59-0e52-40d8-ac08-b57dd92a2cab",
                            "16759e4d-71a7-4ab3-9647-4f896a3dfa5d",
                            "d56f1edf-8e2e-42a7-b0dc-24aa686355f0"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 8,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "c6f6d310-9916-4089-af0b-d2e1f584a3f5",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为validated",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated \"before all\" hook",
                              "timedOut": false,
                              "duration": 439,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "8daf8d7d-aef9-4753-80e4-4b55eded458a",
                              "parentUUID": "c6f6d310-9916-4089-af0b-d2e1f584a3f5",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "8f26b119-4b10-4818-a01d-e7e478440af0",
                              "parentUUID": "c6f6d310-9916-4089-af0b-d2e1f584a3f5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "adbd7186-7b2a-4100-aeae-640cdf3856db",
                              "parentUUID": "c6f6d310-9916-4089-af0b-d2e1f584a3f5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "65a66627-67d1-4dc4-965a-224128afe2fa",
                              "parentUUID": "c6f6d310-9916-4089-af0b-d2e1f584a3f5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "a160d267-36b9-4998-b49b-f118e26d4f23",
                              "parentUUID": "c6f6d310-9916-4089-af0b-d2e1f584a3f5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "f4b34dc8-ae95-45a0-8431-58d4ff6e4046",
                              "parentUUID": "c6f6d310-9916-4089-af0b-d2e1f584a3f5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "f8586a37-33c7-4834-83c8-605ba044793b",
                              "parentUUID": "c6f6d310-9916-4089-af0b-d2e1f584a3f5",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "8f26b119-4b10-4818-a01d-e7e478440af0",
                            "adbd7186-7b2a-4100-aeae-640cdf3856db",
                            "65a66627-67d1-4dc4-965a-224128afe2fa",
                            "a160d267-36b9-4998-b49b-f118e26d4f23",
                            "f4b34dc8-ae95-45a0-8431-58d4ff6e4046",
                            "f8586a37-33c7-4834-83c8-605ba044793b"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 6,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "49a1899d-cc39-4d83-9ed1-36cdb9182bca",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为closed",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed \"before all\" hook",
                              "timedOut": false,
                              "duration": 420,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "c115661c-aacb-4a75-9a49-e49e42bc5a37",
                              "parentUUID": "49a1899d-cc39-4d83-9ed1-36cdb9182bca",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "533307bd-d2ec-4cdd-ad0c-51dacf12a8f9",
                              "parentUUID": "49a1899d-cc39-4d83-9ed1-36cdb9182bca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "904f88db-07a4-45a4-b58d-d79f2d88fa0f",
                              "parentUUID": "49a1899d-cc39-4d83-9ed1-36cdb9182bca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "0279f1b1-62e9-4edd-8f94-61c3fb147496",
                              "parentUUID": "49a1899d-cc39-4d83-9ed1-36cdb9182bca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "1a255ad3-194a-4696-8fcc-61ca0528b2f5",
                              "parentUUID": "49a1899d-cc39-4d83-9ed1-36cdb9182bca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "9df2e45c-f349-4415-bea1-51cf8c14f3a2",
                              "parentUUID": "49a1899d-cc39-4d83-9ed1-36cdb9182bca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "7c46f919-56a6-4b68-95c8-7cdec8e852b2",
                              "parentUUID": "49a1899d-cc39-4d83-9ed1-36cdb9182bca",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "533307bd-d2ec-4cdd-ad0c-51dacf12a8f9",
                            "904f88db-07a4-45a4-b58d-d79f2d88fa0f",
                            "0279f1b1-62e9-4edd-8f94-61c3fb147496",
                            "1a255ad3-194a-4696-8fcc-61ca0528b2f5",
                            "9df2e45c-f349-4415-bea1-51cf8c14f3a2",
                            "7c46f919-56a6-4b68-95c8-7cdec8e852b2"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 3,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "3bbe07c0-8725-4c82-9c51-1319bd289ab5",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为16417699",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为16417699 \"before all\" hook",
                              "timedOut": false,
                              "duration": 423,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "ba6ddfca-b807-4c51-806f-ea1de22ba3c0",
                              "parentUUID": "3bbe07c0-8725-4c82-9c51-1319bd289ab5",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为16417699 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "725e0530-4e4f-49e3-a548-84a5b85fbd00",
                              "parentUUID": "3bbe07c0-8725-4c82-9c51-1319bd289ab5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为16417699 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "465abf5f-f78b-466f-8742-750881526465",
                              "parentUUID": "3bbe07c0-8725-4c82-9c51-1319bd289ab5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为16417699 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "59c24ff4-edb9-4964-a0f2-8b75dee95ba4",
                              "parentUUID": "3bbe07c0-8725-4c82-9c51-1319bd289ab5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为16417699 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "2e8f1066-9d97-4c07-ae6d-4f38e895b934",
                              "parentUUID": "3bbe07c0-8725-4c82-9c51-1319bd289ab5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为16417699 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "27d9a27e-43ff-4c3a-b52c-3b013559eb3d",
                              "parentUUID": "3bbe07c0-8725-4c82-9c51-1319bd289ab5",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为16417699 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "15fc05c1-c9c7-4e94-9c67-c6e7c3e77ab0",
                              "parentUUID": "3bbe07c0-8725-4c82-9c51-1319bd289ab5",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "725e0530-4e4f-49e3-a548-84a5b85fbd00",
                            "465abf5f-f78b-466f-8742-750881526465",
                            "59c24ff4-edb9-4964-a0f2-8b75dee95ba4",
                            "2e8f1066-9d97-4c07-ae6d-4f38e895b934",
                            "27d9a27e-43ff-4c3a-b52c-3b013559eb3d",
                            "15fc05c1-c9c7-4e94-9c67-c6e7c3e77ab0"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 1,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "e6e6e342-f211-435d-abda-7a4a24a86d81",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A \"before all\" hook",
                              "timedOut": false,
                              "duration": 421,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "3d042fdd-1894-4c3f-91d7-b2e18af54bd3",
                              "parentUUID": "e6e6e342-f211-435d-abda-7a4a24a86d81",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "b04ea281-fd00-4f62-9593-42d725e8bf35",
                              "parentUUID": "e6e6e342-f211-435d-abda-7a4a24a86d81",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "cbe4031e-1549-4913-8f13-e0c739d607ea",
                              "parentUUID": "e6e6e342-f211-435d-abda-7a4a24a86d81",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0cc' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "3133788f-e1e6-4617-9581-5566b4725668",
                              "parentUUID": "e6e6e342-f211-435d-abda-7a4a24a86d81",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "3c0ae56d-4cb1-42fb-b166-45d51a79b238",
                              "parentUUID": "e6e6e342-f211-435d-abda-7a4a24a86d81",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "0bf6b145-eb84-49b6-b96e-7205222a2ec7",
                              "parentUUID": "e6e6e342-f211-435d-abda-7a4a24a86d81",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "bef20604-dff0-40d0-8efd-d6bf5acaaf9e",
                              "parentUUID": "e6e6e342-f211-435d-abda-7a4a24a86d81",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "b04ea281-fd00-4f62-9593-42d725e8bf35",
                            "cbe4031e-1549-4913-8f13-e0c739d607ea",
                            "3133788f-e1e6-4617-9581-5566b4725668",
                            "3c0ae56d-4cb1-42fb-b166-45d51a79b238",
                            "0bf6b145-eb84-49b6-b96e-7205222a2ec7",
                            "bef20604-dff0-40d0-8efd-d6bf5acaaf9e"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 7,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "35ccb066-f1a7-4204-a16a-7954a481b899",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为null",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null \"before all\" hook",
                              "timedOut": false,
                              "duration": 419,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "a9f4561e-4174-4573-a642-0ede10748fc7",
                              "parentUUID": "35ccb066-f1a7-4204-a16a-7954a481b899",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "b56db9a7-50d3-4b38-9e3e-5d9f83188b17",
                              "parentUUID": "35ccb066-f1a7-4204-a16a-7954a481b899",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "f6f68bbc-7a1e-4c70-9084-14cb77bde484",
                              "parentUUID": "35ccb066-f1a7-4204-a16a-7954a481b899",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "564441f6-4247-4ecd-8a91-247a714ca21f",
                              "parentUUID": "35ccb066-f1a7-4204-a16a-7954a481b899",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "44ac85de-b915-4e63-b378-412b4e5803cd",
                              "parentUUID": "35ccb066-f1a7-4204-a16a-7954a481b899",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "8d81450c-7d21-44b4-93d9-b94fbf059d78",
                              "parentUUID": "35ccb066-f1a7-4204-a16a-7954a481b899",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "c0f48a5e-f806-425d-ae2d-2140600e72a8",
                              "parentUUID": "35ccb066-f1a7-4204-a16a-7954a481b899",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "b56db9a7-50d3-4b38-9e3e-5d9f83188b17",
                            "f6f68bbc-7a1e-4c70-9084-14cb77bde484",
                            "564441f6-4247-4ecd-8a91-247a714ca21f",
                            "44ac85de-b915-4e63-b378-412b4e5803cd",
                            "8d81450c-7d21-44b4-93d9-b94fbf059d78",
                            "c0f48a5e-f806-425d-ae2d-2140600e72a8"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 4,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "4a20d912-b3e3-466a-957c-973adba8b3ca",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为current",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current \"before all\" hook",
                              "timedOut": false,
                              "duration": 427,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "0d3cd8e0-4e01-4715-afe1-52f59c5ac50d",
                              "parentUUID": "4a20d912-b3e3-466a-957c-973adba8b3ca",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "d10f6cd0-2382-4f40-ba91-7275ab3ec378",
                              "parentUUID": "4a20d912-b3e3-466a-957c-973adba8b3ca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "d3cd1e36-a3b6-441c-a913-ceb6c6496a93",
                              "parentUUID": "4a20d912-b3e3-466a-957c-973adba8b3ca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "59a32aa6-06f3-489a-a225-bf105e64ede0",
                              "parentUUID": "4a20d912-b3e3-466a-957c-973adba8b3ca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "d987b162-2ae2-4f1d-aeeb-68e0c62c44fe",
                              "parentUUID": "4a20d912-b3e3-466a-957c-973adba8b3ca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "ea65a89a-9dda-42da-98aa-0ded7d8580e6",
                              "parentUUID": "4a20d912-b3e3-466a-957c-973adba8b3ca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "b5a3683f-5e84-452c-9e5e-2d8f27305109",
                              "parentUUID": "4a20d912-b3e3-466a-957c-973adba8b3ca",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "d10f6cd0-2382-4f40-ba91-7275ab3ec378",
                            "d3cd1e36-a3b6-441c-a913-ceb6c6496a93",
                            "59a32aa6-06f3-489a-a225-bf105e64ede0",
                            "d987b162-2ae2-4f1d-aeeb-68e0c62c44fe",
                            "ea65a89a-9dda-42da-98aa-0ded7d8580e6",
                            "b5a3683f-5e84-452c-9e5e-2d8f27305109"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 7,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "b892ee9f-ac6a-4e57-b5cb-aa4abcf6f01d",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为validated",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated \"before all\" hook",
                              "timedOut": false,
                              "duration": 550,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "38ffcf71-c122-423a-8fbd-a7d5b5db61bd",
                              "parentUUID": "b892ee9f-ac6a-4e57-b5cb-aa4abcf6f01d",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "61c430db-f8e7-446d-bfe4-92ba043ea07c",
                              "parentUUID": "b892ee9f-ac6a-4e57-b5cb-aa4abcf6f01d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "4e824e6b-cccf-42f1-a88e-869a637f611a",
                              "parentUUID": "b892ee9f-ac6a-4e57-b5cb-aa4abcf6f01d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "785f754f-adb3-477f-a753-630da61edca6",
                              "parentUUID": "b892ee9f-ac6a-4e57-b5cb-aa4abcf6f01d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "129c5073-18f6-404a-bc76-f4ad48d7ffe1",
                              "parentUUID": "b892ee9f-ac6a-4e57-b5cb-aa4abcf6f01d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "f6bca330-e9af-48dc-84ab-99d49c6a0abd",
                              "parentUUID": "b892ee9f-ac6a-4e57-b5cb-aa4abcf6f01d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "5361eff4-3783-4532-9698-89c77c255a14",
                              "parentUUID": "b892ee9f-ac6a-4e57-b5cb-aa4abcf6f01d",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "61c430db-f8e7-446d-bfe4-92ba043ea07c",
                            "4e824e6b-cccf-42f1-a88e-869a637f611a",
                            "785f754f-adb3-477f-a753-630da61edca6",
                            "129c5073-18f6-404a-bc76-f4ad48d7ffe1",
                            "f6bca330-e9af-48dc-84ab-99d49c6a0abd",
                            "5361eff4-3783-4532-9698-89c77c255a14"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 3,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "52ff7e5e-436d-42e7-be0a-5855a36e9e3f",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为closed",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed \"before all\" hook",
                              "timedOut": false,
                              "duration": 420,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "00ed4a95-ea5f-4a3e-a50a-4886b0cd89cf",
                              "parentUUID": "52ff7e5e-436d-42e7-be0a-5855a36e9e3f",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "e53bafb0-62e8-4b54-9ff3-28a5c28beffe",
                              "parentUUID": "52ff7e5e-436d-42e7-be0a-5855a36e9e3f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "9382a48c-32d6-42db-a56b-a709826ae692",
                              "parentUUID": "52ff7e5e-436d-42e7-be0a-5855a36e9e3f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "dc28a913-83d3-4ca3-95ba-644810d5c915",
                              "parentUUID": "52ff7e5e-436d-42e7-be0a-5855a36e9e3f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "5cad8a3e-b107-42e2-b568-4e1e2158dc48",
                              "parentUUID": "52ff7e5e-436d-42e7-be0a-5855a36e9e3f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "54e446fb-65f8-492d-99ab-47154402c371",
                              "parentUUID": "52ff7e5e-436d-42e7-be0a-5855a36e9e3f",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "dbcc85ea-9dd3-447e-84c6-920041dc64a1",
                              "parentUUID": "52ff7e5e-436d-42e7-be0a-5855a36e9e3f",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "e53bafb0-62e8-4b54-9ff3-28a5c28beffe",
                            "9382a48c-32d6-42db-a56b-a709826ae692",
                            "dc28a913-83d3-4ca3-95ba-644810d5c915",
                            "5cad8a3e-b107-42e2-b568-4e1e2158dc48",
                            "54e446fb-65f8-492d-99ab-47154402c371",
                            "dbcc85ea-9dd3-447e-84c6-920041dc64a1"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 3,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "4047fd41-0841-4d84-bddb-02d3a3b7d3c2",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为16417699",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为16417699 \"before all\" hook",
                              "timedOut": false,
                              "duration": 428,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "d54f6e59-bc17-42a9-ac5a-a06eb0f91f7c",
                              "parentUUID": "4047fd41-0841-4d84-bddb-02d3a3b7d3c2",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为16417699 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "159119fb-5026-4539-aa31-35818e5108f4",
                              "parentUUID": "4047fd41-0841-4d84-bddb-02d3a3b7d3c2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为16417699 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "63d41dca-0195-4096-ad72-f60c80f33ccd",
                              "parentUUID": "4047fd41-0841-4d84-bddb-02d3a3b7d3c2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为16417699 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "c26e884f-0c1f-43da-a397-448a9c9d8a72",
                              "parentUUID": "4047fd41-0841-4d84-bddb-02d3a3b7d3c2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为16417699 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "cef82a12-dc92-4a75-bc07-c2c9c76782df",
                              "parentUUID": "4047fd41-0841-4d84-bddb-02d3a3b7d3c2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为16417699 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "7ff596c7-b17f-4782-b98d-7482586c0f9e",
                              "parentUUID": "4047fd41-0841-4d84-bddb-02d3a3b7d3c2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为16417699 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "19584713-17ae-4c8c-a86b-3abe53f9b7f0",
                              "parentUUID": "4047fd41-0841-4d84-bddb-02d3a3b7d3c2",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "159119fb-5026-4539-aa31-35818e5108f4",
                            "63d41dca-0195-4096-ad72-f60c80f33ccd",
                            "c26e884f-0c1f-43da-a397-448a9c9d8a72",
                            "cef82a12-dc92-4a75-bc07-c2c9c76782df",
                            "7ff596c7-b17f-4782-b98d-7482586c0f9e",
                            "19584713-17ae-4c8c-a86b-3abe53f9b7f0"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 5,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "3d5805ea-09b0-45a2-ac28-3fef99ea29be",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A \"before all\" hook",
                              "timedOut": false,
                              "duration": 431,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "f3744fe0-905e-404c-b2f5-6599ad976e87",
                              "parentUUID": "3d5805ea-09b0-45a2-ac28-3fef99ea29be",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "3a6f45e6-f9fd-430a-ba97-9202f317ae46",
                              "parentUUID": "3d5805ea-09b0-45a2-ac28-3fef99ea29be",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected false to equal true",
                                "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:131:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": "- false\n+ true\n"
                              },
                              "uuid": "ddb157a1-15dd-4686-94a1-65bae40e5bb3",
                              "parentUUID": "3d5805ea-09b0-45a2-ac28-3fef99ea29be",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'can\\'t find account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg-5e69b0d4' to include 'Account not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "0925cb10-9b35-40e8-838b-68bf873d6805",
                              "parentUUID": "3d5805ea-09b0-45a2-ac28-3fef99ea29be",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "fb14e334-ce52-459f-ae9f-fc02535e09f4",
                              "parentUUID": "3d5805ea-09b0-45a2-ac28-3fef99ea29be",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 0,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "b7372667-f3c0-4263-bc94-33741026d8bc",
                              "parentUUID": "3d5805ea-09b0-45a2-ac28-3fef99ea29be",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为BF95A512631F2F714CEDD38BD69605E789B024C208AD324D77F0BC0984F05B1A 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:145:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                "diff": null
                              },
                              "uuid": "b7d1438f-0263-485b-8ded-8cf35045e505",
                              "parentUUID": "3d5805ea-09b0-45a2-ac28-3fef99ea29be",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "3a6f45e6-f9fd-430a-ba97-9202f317ae46",
                            "ddb157a1-15dd-4686-94a1-65bae40e5bb3",
                            "0925cb10-9b35-40e8-838b-68bf873d6805",
                            "fb14e334-ce52-459f-ae9f-fc02535e09f4",
                            "b7372667-f3c0-4263-bc94-33741026d8bc",
                            "b7d1438f-0263-485b-8ded-8cf35045e505"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 5,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "694b6457-f7d6-4ed6-96df-d23f9148e3a2",
                      "title": "测试jt_getTransactionReceipt",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionReceipt \"before all\" hook",
                          "timedOut": false,
                          "duration": 311,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "d6efa6a7-41ba-459c-8215-f4c7d026a819",
                          "parentUUID": "694b6457-f7d6-4ed6-96df-d23f9148e3a2",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t有效交易哈希",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionReceipt 0010\t有效交易哈希",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "cb28338f-ec45-4497-a1f9-823e49e47c93",
                          "parentUUID": "694b6457-f7d6-4ed6-96df-d23f9148e3a2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易哈希：不存在的交易哈希",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionReceipt 0020\t无效交易哈希：不存在的交易哈希",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "ae64351c-51cf-4335-8802-600c4bfa95fa",
                          "parentUUID": "694b6457-f7d6-4ed6-96df-d23f9148e3a2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易哈希：数字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionReceipt 0020\t无效交易哈希：数字",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "34926263-4b76-4873-810e-67f2e560fe39",
                          "parentUUID": "694b6457-f7d6-4ed6-96df-d23f9148e3a2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易哈希：字符串乱码",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionReceipt 0020\t无效交易哈希：字符串乱码",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "86b21cb5-88c8-4ccb-8587-bfcf29a2b9a8",
                          "parentUUID": "694b6457-f7d6-4ed6-96df-d23f9148e3a2",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "cb28338f-ec45-4497-a1f9-823e49e47c93",
                        "ae64351c-51cf-4335-8802-600c4bfa95fa",
                        "34926263-4b76-4873-810e-67f2e560fe39",
                        "86b21cb5-88c8-4ccb-8587-bfcf29a2b9a8"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "8fabf733-8c8b-410b-ae31-d9bbc286f396",
                      "title": "测试jt_getTransactionByHash",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByHash \"before all\" hook",
                          "timedOut": false,
                          "duration": 577,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "4e2cbdaa-6b39-4b6a-8c16-85539eea14ba",
                          "parentUUID": "8fabf733-8c8b-410b-ae31-d9bbc286f396",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t查询有效交易哈希-底层币",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0010\t查询有效交易哈希-底层币",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f090b599-8c89-4f75-97e0-5a311e1b10e3",
                          "parentUUID": "8fabf733-8c8b-410b-ae31-d9bbc286f396",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t查询有效交易哈希-token",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0020\t查询有效交易哈希-token",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "813ebe4b-a678-4c8a-be28-615ff4267c32",
                          "parentUUID": "8fabf733-8c8b-410b-ae31-d9bbc286f396",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t查询有效交易哈希-memos",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0030\t查询有效交易哈希-memos",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "c7cedead-eca9-47bd-a314-4207915a9f43",
                          "parentUUID": "8fabf733-8c8b-410b-ae31-d9bbc286f396",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t查询无效交易哈希:数字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0040\t查询无效交易哈希:数字",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'interface conversion: interface {} is float64, not string' to include 'invalid tx hash'",
                            "estack": "AssertionError: expected 'interface conversion: interface {} is float64, not string' to include 'invalid tx hash'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTransaction [as checkFunction] (test\\testCases\\tcsGetTx.js:129:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "e7800945-ab57-4e20-8918-25682d4086ee",
                          "parentUUID": "8fabf733-8c8b-410b-ae31-d9bbc286f396",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t查询无效交易哈希:字符串",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0040\t查询无效交易哈希:字符串",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'encoding/hex: invalid byte: U+0074 \\'t\\'' to include 'invalid tx hash'",
                            "estack": "AssertionError: expected 'encoding/hex: invalid byte: U+0074 \\'t\\'' to include 'invalid tx hash'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTransaction [as checkFunction] (test\\testCases\\tcsGetTx.js:129:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "f9563a84-3450-49ee-856d-91d8e3304aa8",
                          "parentUUID": "8fabf733-8c8b-410b-ae31-d9bbc286f396",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t查询无效交易哈希:参数为空",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0040\t查询无效交易哈希:参数为空",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'interface conversion: interface {} is nil, not string' to include 'invalid tx hash'",
                            "estack": "AssertionError: expected 'interface conversion: interface {} is nil, not string' to include 'invalid tx hash'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTransaction [as checkFunction] (test\\testCases\\tcsGetTx.js:129:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "077ed3b2-d2d7-43f3-9105-439c465a9881",
                          "parentUUID": "8fabf733-8c8b-410b-ae31-d9bbc286f396",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t无效交易哈希：不存在的hash",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0040\t无效交易哈希：不存在的hash",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'can\\'t find transaction B07647D61E6F7C4683E715004E2FB236D47DB64DF92F6504B71D6A1D4469530A' to include 'Transaction not found.'",
                            "estack": "AssertionError: expected 'can\\'t find transaction B07647D61E6F7C4683E715004E2FB236D47DB64DF92F6504B71D6A1D4469530A' to include 'Transaction not found.'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTransaction [as checkFunction] (test\\testCases\\tcsGetTx.js:129:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "f2f3d734-7879-45de-923e-920c672503e9",
                          "parentUUID": "8fabf733-8c8b-410b-ae31-d9bbc286f396",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t无效交易哈希：hash长度超过标准",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0040\t无效交易哈希：hash长度超过标准",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'runtime error: index out of range' to include 'invalid tx hash'",
                            "estack": "AssertionError: expected 'runtime error: index out of range' to include 'invalid tx hash'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTransaction [as checkFunction] (test\\testCases\\tcsGetTx.js:129:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": null
                          },
                          "uuid": "96c6c239-7419-43f5-8b18-153dbeb7a9f3",
                          "parentUUID": "8fabf733-8c8b-410b-ae31-d9bbc286f396",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f090b599-8c89-4f75-97e0-5a311e1b10e3",
                        "813ebe4b-a678-4c8a-be28-615ff4267c32",
                        "c7cedead-eca9-47bd-a314-4207915a9f43"
                      ],
                      "failures": [
                        "e7800945-ab57-4e20-8918-25682d4086ee",
                        "f9563a84-3450-49ee-856d-91d8e3304aa8",
                        "077ed3b2-d2d7-43f3-9105-439c465a9881",
                        "f2f3d734-7879-45de-923e-920c672503e9",
                        "96c6c239-7419-43f5-8b18-153dbeb7a9f3"
                      ],
                      "pending": [],
                      "skipped": [],
                      "duration": 8,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "8421a126-8736-4192-8b06-08afff4abf66",
                      "title": "测试jt_getTransactionByIndex",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex \"before all\" hook",
                          "timedOut": false,
                          "duration": 1527,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "96c81a0c-8045-411c-a5b8-a904b4dcdb84",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t查询有效交易哈希-token",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t查询有效交易哈希-token",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "84449178-afd6-466b-840c-b68fcc5a7cc9",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t查询有效交易哈希-底层币",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t查询有效交易哈希-底层币",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "8f81889a-4dfc-411e-be92-08860a8b8090",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效的地址，遍历部分有效sequence：1",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t有效的地址，遍历部分有效sequence：1",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "6011a7f3-1bb5-46c3-9093-efa691b1345e",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效的地址，遍历部分有效sequence：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t有效的地址，遍历部分有效sequence：2",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "c680fe55-dd66-485c-a373-157b3bca71a1",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效的地址，遍历部分有效sequence：3",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t有效的地址，遍历部分有效sequence：3",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "19656d36-005a-4122-9450-c171dac5bf1b",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效的地址，遍历部分有效sequence：4",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t有效的地址，遍历部分有效sequence：4",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "ca5360de-51ae-432e-897b-2f6718db5d80",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效的地址，遍历部分有效sequence：5",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t有效的地址，遍历部分有效sequence：5",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "37349209-67c4-490f-b3c7-e63d13650f25",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效的地址，遍历部分有效sequence：6",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t有效的地址，遍历部分有效sequence：6",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "955231c7-d476-4ec8-b048-93c9cead4c40",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效的地址，遍历部分有效sequence：7",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t有效的地址，遍历部分有效sequence：7",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f75ca114-d875-4307-8f31-54b0c594c3f5",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效的地址，遍历部分有效sequence：8",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t有效的地址，遍历部分有效sequence：8",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "c4ba1c74-dc16-48e8-bad7-d16646b1cd51",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效的地址，遍历部分有效sequence：9",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t有效的地址，遍历部分有效sequence：9",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "22e4309e-c675-42e3-b47a-d236f7507f73",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效的地址，遍历部分有效sequence：10",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0010\t有效的地址，遍历部分有效sequence：10",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "61bbb7cb-4df4-4d87-8192-f4f729ac8bf4",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效的地址，无效的sequence：很大的数值",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0020\t有效的地址，无效的sequence：很大的数值",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "27f7a0be-4674-4424-bb08-ff08ce8ae5a0",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效的地址，无效的sequence：0",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0020\t有效的地址，无效的sequence：0",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "abdf2697-1f20-4780-a991-91ecc38dc1d1",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效的地址，无效的sequence：负数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0020\t有效的地址，无效的sequence：负数",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "a4321129-1ff6-4278-92b5-9333b9479122",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效的地址，无效的sequence：小数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0020\t有效的地址，无效的sequence：小数",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected true to equal false",
                            "estack": "AssertionError: expected true to equal false\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkTransaction [as checkFunction] (test\\testCases\\tcsGetTx.js:121:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": "- true\n+ false\n"
                          },
                          "uuid": "bd0f2948-071e-4839-a479-ed0537d94028",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效的地址，无效的sequence：乱码字符串",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0020\t有效的地址，无效的sequence：乱码字符串",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "442634ca-a41f-476e-a120-3fdcb051859b",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t无效的地址参数_01：地址长度不够",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0030\t无效的地址参数_01：地址长度不够",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "1bbf31c6-9138-43d5-8fbe-af4f27937bd5",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t无效的地址参数_01：地址长度过长",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0030\t无效的地址参数_01：地址长度过长",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "2795fbc3-b4e4-4e0a-9cd9-649035ac4bee",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t无效的地址参数_01：地址不以j开头",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0030\t无效的地址参数_01：地址不以j开头",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "039dbbba-4999-4293-813e-34810b40442a",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t无效的地址参数_02：地址长度没问题且以j开头，但是一个不存在没被使用过的地址",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByIndex 0040\t无效的地址参数_02：地址长度没问题且以j开头，但是一个不存在没被使用过的地址",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "00773df1-e6e4-48e1-a6e1-c4431f1b1104",
                          "parentUUID": "8421a126-8736-4192-8b06-08afff4abf66",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "84449178-afd6-466b-840c-b68fcc5a7cc9",
                        "8f81889a-4dfc-411e-be92-08860a8b8090",
                        "6011a7f3-1bb5-46c3-9093-efa691b1345e",
                        "c680fe55-dd66-485c-a373-157b3bca71a1",
                        "19656d36-005a-4122-9450-c171dac5bf1b",
                        "ca5360de-51ae-432e-897b-2f6718db5d80",
                        "37349209-67c4-490f-b3c7-e63d13650f25",
                        "955231c7-d476-4ec8-b048-93c9cead4c40",
                        "f75ca114-d875-4307-8f31-54b0c594c3f5",
                        "c4ba1c74-dc16-48e8-bad7-d16646b1cd51",
                        "22e4309e-c675-42e3-b47a-d236f7507f73",
                        "61bbb7cb-4df4-4d87-8192-f4f729ac8bf4",
                        "27f7a0be-4674-4424-bb08-ff08ce8ae5a0",
                        "abdf2697-1f20-4780-a991-91ecc38dc1d1",
                        "a4321129-1ff6-4278-92b5-9333b9479122",
                        "442634ca-a41f-476e-a120-3fdcb051859b",
                        "1bbf31c6-9138-43d5-8fbe-af4f27937bd5",
                        "2795fbc3-b4e4-4e0a-9cd9-649035ac4bee",
                        "039dbbba-4999-4293-813e-34810b40442a",
                        "00773df1-e6e4-48e1-a6e1-c4431f1b1104"
                      ],
                      "failures": [
                        "bd0f2948-071e-4839-a479-ed0537d94028"
                      ],
                      "pending": [],
                      "skipped": [],
                      "duration": 10,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "828db12f-6869-4789-950a-97c790d1da98",
                      "title": "测试jt_getTransactionByBlockHashAndIndex",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex \"before all\" hook",
                          "timedOut": false,
                          "duration": 423,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "6f4f42cb-fe30-47b7-b75e-f556b2d9d4f5",
                          "parentUUID": "828db12f-6869-4789-950a-97c790d1da98",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t有效区块哈希，有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0010\t有效区块哈希，有效交易索引",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "264ec679-57b9-4007-8f5a-ea285be9872f",
                          "parentUUID": "828db12f-6869-4789-950a-97c790d1da98",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效区块哈希，有效交易索引:查询有效区块编号，遍历所有有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0010\t有效区块哈希，有效交易索引:查询有效区块编号，遍历所有有效交易索引",
                          "timedOut": false,
                          "duration": 1901,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f6cd0363-566c-4085-88f6-0b1d78f2c9f5",
                          "parentUUID": "828db12f-6869-4789-950a-97c790d1da98",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块哈希，无效交易索引无效交易索引:100",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0020\t有效区块哈希，无效交易索引无效交易索引:100",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "8c885e08-43be-4d7b-9424-078a0887e4aa",
                          "parentUUID": "828db12f-6869-4789-950a-97c790d1da98",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块哈希，无效交易索引无效交易索引:负数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0020\t有效区块哈希，无效交易索引无效交易索引:负数",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "212ca6f7-4dc9-46ed-8b94-a64e560e7448",
                          "parentUUID": "828db12f-6869-4789-950a-97c790d1da98",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块哈希，无效交易索引无效交易索引:乱码",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0020\t有效区块哈希，无效交易索引无效交易索引:乱码",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "2fb0214c-324d-4dee-a5f3-4c8be51d605b",
                          "parentUUID": "828db12f-6869-4789-950a-97c790d1da98",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t无效区块哈希",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0030\t无效区块哈希",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "ea12820e-1f23-4c32-93e8-94711d402cf5",
                          "parentUUID": "828db12f-6869-4789-950a-97c790d1da98",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "264ec679-57b9-4007-8f5a-ea285be9872f",
                        "f6cd0363-566c-4085-88f6-0b1d78f2c9f5",
                        "8c885e08-43be-4d7b-9424-078a0887e4aa",
                        "212ca6f7-4dc9-46ed-8b94-a64e560e7448",
                        "2fb0214c-324d-4dee-a5f3-4c8be51d605b",
                        "ea12820e-1f23-4c32-93e8-94711d402cf5"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1906,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "a7fe0f26-94ba-48d2-aa3f-0f988a5d23b3",
                      "title": "测试jt_getTransactionByBlockNumberAndIndex",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex \"before all\" hook",
                          "timedOut": false,
                          "duration": 657,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "13fbeab5-e182-4a4b-b321-0db28efbd3e5",
                          "parentUUID": "a7fe0f26-94ba-48d2-aa3f-0f988a5d23b3",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t有效区块哈希，有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0010\t有效区块哈希，有效交易索引",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "c3989798-4d75-40ca-952d-331d13ceaaba",
                          "parentUUID": "a7fe0f26-94ba-48d2-aa3f-0f988a5d23b3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效区块编号，有效交易索引:查询有效区块编号，遍历所有有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0010\t有效区块编号，有效交易索引:查询有效区块编号，遍历所有有效交易索引",
                          "timedOut": false,
                          "duration": 1437,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f5a20b33-b68e-4e4a-b7d9-6971afcb54c0",
                          "parentUUID": "a7fe0f26-94ba-48d2-aa3f-0f988a5d23b3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效区块编号，有效交易索引:查询有效区块编号earliest，遍历所有有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0010\t有效区块编号，有效交易索引:查询有效区块编号earliest，遍历所有有效交易索引",
                          "timedOut": false,
                          "duration": 2,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected false to equal true",
                            "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkFunction (test\\testCases\\tcsGetTx.js:547:27)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": "- false\n+ true\n"
                          },
                          "uuid": "4eee67cd-110b-4e39-9fe6-685f5180d7ff",
                          "parentUUID": "a7fe0f26-94ba-48d2-aa3f-0f988a5d23b3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效区块编号，有效交易索引:查询有效区块编号latest，遍历所有有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0010\t有效区块编号，有效交易索引:查询有效区块编号latest，遍历所有有效交易索引",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected false to equal true",
                            "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkFunction (test\\testCases\\tcsGetTx.js:547:27)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": "- false\n+ true\n"
                          },
                          "uuid": "4e8992af-6f77-4cbd-a700-6aee25234b59",
                          "parentUUID": "a7fe0f26-94ba-48d2-aa3f-0f988a5d23b3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效区块编号，有效交易索引:查询有效区块编号pending，遍历所有有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0010\t有效区块编号，有效交易索引:查询有效区块编号pending，遍历所有有效交易索引",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected false to equal true",
                            "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkFunction (test\\testCases\\tcsGetTx.js:547:27)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": "- false\n+ true\n"
                          },
                          "uuid": "4bd33149-3f5b-4e74-a6b4-1a41bab933da",
                          "parentUUID": "a7fe0f26-94ba-48d2-aa3f-0f988a5d23b3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块编号，无效交易索引无效交易索引:100",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0020\t有效区块编号，无效交易索引无效交易索引:100",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "0d5bdc32-949e-406d-9daf-75a02e16f3ab",
                          "parentUUID": "a7fe0f26-94ba-48d2-aa3f-0f988a5d23b3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块编号，无效交易索引无效交易索引:负数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0020\t有效区块编号，无效交易索引无效交易索引:负数",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "6e8d386a-6eeb-45dc-8150-1bcf213d8eb9",
                          "parentUUID": "a7fe0f26-94ba-48d2-aa3f-0f988a5d23b3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块编号，无效交易索引无效交易索引:乱码",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0020\t有效区块编号，无效交易索引无效交易索引:乱码",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "ca4beb42-8a1b-4592-ab1f-71ee11751b30",
                          "parentUUID": "a7fe0f26-94ba-48d2-aa3f-0f988a5d23b3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t无效区块编号",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0030\t无效区块编号",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "cf0a22ef-9365-4ab1-a2a0-c0b70c699425",
                          "parentUUID": "a7fe0f26-94ba-48d2-aa3f-0f988a5d23b3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c3989798-4d75-40ca-952d-331d13ceaaba",
                        "f5a20b33-b68e-4e4a-b7d9-6971afcb54c0",
                        "0d5bdc32-949e-406d-9daf-75a02e16f3ab",
                        "6e8d386a-6eeb-45dc-8150-1bcf213d8eb9",
                        "ca4beb42-8a1b-4592-ab1f-71ee11751b30",
                        "cf0a22ef-9365-4ab1-a2a0-c0b70c699425"
                      ],
                      "failures": [
                        "4eee67cd-110b-4e39-9fe6-685f5180d7ff",
                        "4e8992af-6f77-4cbd-a700-6aee25234b59",
                        "4bd33149-3f5b-4e74-a6b4-1a41bab933da"
                      ],
                      "pending": [],
                      "skipped": [],
                      "duration": 1443,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "87c8e9e3-be3f-4a21-8116-2f870c5d06bd",
                      "title": "测试jt_getBlockTransactionCountByHash",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByHash \"before all\" hook",
                          "timedOut": false,
                          "duration": 212,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "51fec092-8c62-479c-b798-3abd93babef3",
                          "parentUUID": "87c8e9e3-be3f-4a21-8116-2f870c5d06bd",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t查询有效区块哈希",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByHash 0010\t查询有效区块哈希",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "109eb0bc-47af-4af2-a368-462d2c787409",
                          "parentUUID": "87c8e9e3-be3f-4a21-8116-2f870c5d06bd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易哈希：不存在的hash",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByHash 0020\t无效交易哈希：不存在的hash",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f499902c-edf3-428a-86d9-f70c42ca6c70",
                          "parentUUID": "87c8e9e3-be3f-4a21-8116-2f870c5d06bd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易哈希：hash长度超过标准",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByHash 0020\t无效交易哈希：hash长度超过标准",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "3573f310-3dd7-40d9-99c8-4d52ec12b330",
                          "parentUUID": "87c8e9e3-be3f-4a21-8116-2f870c5d06bd",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "109eb0bc-47af-4af2-a368-462d2c787409",
                        "f499902c-edf3-428a-86d9-f70c42ca6c70",
                        "3573f310-3dd7-40d9-99c8-4d52ec12b330"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "f5e6c013-7e14-44db-aef6-c0e4fe35029d",
                      "title": "测试jt_getBlockTransactionCountByNumber",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByNumber \"before all\" hook",
                          "timedOut": false,
                          "duration": 283,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "110a3be2-a092-42ee-a840-262586610897",
                          "parentUUID": "f5e6c013-7e14-44db-aef6-c0e4fe35029d",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t查询有效区块编号",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByNumber 0010\t查询有效区块编号",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "136984d8-376c-4264-8126-cf48fb027757",
                          "parentUUID": "f5e6c013-7e14-44db-aef6-c0e4fe35029d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易编号：9999999",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByNumber 0020\t无效交易编号：9999999",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "76ae439d-2d7f-4a9e-b5ee-a3c26abd2083",
                          "parentUUID": "f5e6c013-7e14-44db-aef6-c0e4fe35029d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易编号：负数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByNumber 0020\t无效交易编号：负数",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "d3b93509-ea88-4dd7-b44e-ae3d13321b0f",
                          "parentUUID": "f5e6c013-7e14-44db-aef6-c0e4fe35029d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易编号：乱码",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByNumber 0020\t无效交易编号：乱码",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "5b2e4db0-71ee-49e5-9d8e-9fd6e5521976",
                          "parentUUID": "f5e6c013-7e14-44db-aef6-c0e4fe35029d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "136984d8-376c-4264-8126-cf48fb027757",
                        "76ae439d-2d7f-4a9e-b5ee-a3c26abd2083",
                        "d3b93509-ea88-4dd7-b44e-ae3d13321b0f",
                        "5b2e4db0-71ee-49e5-9d8e-9fd6e5521976"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "c1964a61-4170-4bb6-9e8d-4db641454497",
                      "title": "测试jt_sendTransaction和jt_signTransaction",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "36b0d62a-0eb0-4337-918b-2a649ba7e6df",
                          "title": "原生币swt测试：jt_sendTransaction",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [],
                          "suites": [
                            {
                              "uuid": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                              "title": "测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 2515,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "a5dfa5db-aa8e-4713-8e73-c1f13b8723bf",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0010\t发起原生币swt有效交易_01",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0010\t发起原生币swt有效交易_01",
                                  "timedOut": false,
                                  "duration": 72,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "3adceadb-9fcd-4f62-a0e5-79f418bc8ad5",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0020\t发起原生币swt有效交易_02: 交易额填\"15\"等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0020\t发起原生币swt有效交易_02: 交易额填\"15\"等",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected false to equal true",
                                    "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                    "diff": "- false\n+ true\n"
                                  },
                                  "uuid": "f1c553e3-7883-4695-964b-9645a7e92755",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 没有秘钥",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0030\t发起原生币swt无效交易_01: 没有秘钥",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "e3197431-a85c-4aed-a843-2a055679aeb1",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 错误的秘钥1",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0030\t发起原生币swt无效交易_01: 错误的秘钥1",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                    "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                    "diff": null
                                  },
                                  "uuid": "d5d198bf-7dcf-4688-8bcd-4a10121175b3",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 错误的秘钥2",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0030\t发起原生币swt无效交易_01: 错误的秘钥2",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "2b532d0b-9312-487d-ab84-7545f0608bcc",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0040\t发起原生币swt无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0040\t发起原生币swt无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "cef16464-e8a8-43c5-8cd0-05a48955bf0f",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0050\t发起原生币swt无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0050\t发起原生币swt无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "b6471e03-2940-4acf-924f-d8ffbed0c60e",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0060\t发起原生币swt无效交易_04: 交易额超过发起钱包余额",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0060\t发起原生币swt无效交易_04: 交易额超过发起钱包余额",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "3842c909-304e-4e18-8a9b-8735d32f6590",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0070\t发起原生币swt无效交易_05: 交易额为负数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0070\t发起原生币swt无效交易_05: 交易额为负数",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "491a6057-4d21-42be-ba50-816a2e128729",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0080\t发起原生币swt无效交易_06: 交易额为空",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0080\t发起原生币swt无效交易_06: 交易额为空",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "00aaec42-a891-48b6-ba1c-ba6b559a85b7",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0080\t发起原生币swt无效交易_06: 交易额为字符串",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0080\t发起原生币swt无效交易_06: 交易额为字符串",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "607448f9-dc1c-4781-879a-1dccc56ce56d",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0090\t发起原生币swt无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0090\t发起原生币swt无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "90089517-4227-4ec1-b689-11024b64c344",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0100\t发起原生币swt无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0100\t发起原生币swt无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "49658939-85f5-440c-a555-4d6cf6189092",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0110\t发起原生币swt无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0110\t发起原生币swt无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "cb92f9ff-16cc-4d1f-adeb-7d4f78f28a8b",
                                  "parentUUID": "5cc636d2-6da5-4a9d-ab6d-2122dc8ea74f",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "3adceadb-9fcd-4f62-a0e5-79f418bc8ad5",
                                "e3197431-a85c-4aed-a843-2a055679aeb1",
                                "2b532d0b-9312-487d-ab84-7545f0608bcc",
                                "cef16464-e8a8-43c5-8cd0-05a48955bf0f",
                                "b6471e03-2940-4acf-924f-d8ffbed0c60e",
                                "3842c909-304e-4e18-8a9b-8735d32f6590",
                                "491a6057-4d21-42be-ba50-816a2e128729",
                                "00aaec42-a891-48b6-ba1c-ba6b559a85b7",
                                "607448f9-dc1c-4781-879a-1dccc56ce56d",
                                "90089517-4227-4ec1-b689-11024b64c344",
                                "49658939-85f5-440c-a555-4d6cf6189092",
                                "cb92f9ff-16cc-4d1f-adeb-7d4f78f28a8b"
                              ],
                              "failures": [
                                "f1c553e3-7883-4695-964b-9645a7e92755",
                                "d5d198bf-7dcf-4688-8bcd-4a10121175b3"
                              ],
                              "pending": [],
                              "skipped": [],
                              "duration": 76,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "e8bd75f3-c4db-430c-a4ee-d272e039df63",
                              "title": "测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 1077,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "0922384d-7ba4-4af1-9ce0-8ec96697f8bd",
                                  "parentUUID": "e8bd75f3-c4db-430c-a4ee-d272e039df63",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                  "timedOut": false,
                                  "duration": 3970,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "db2251e3-5d6f-4e8d-9604-1d468b37e692",
                                  "parentUUID": "e8bd75f3-c4db-430c-a4ee-d272e039df63",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                  "timedOut": false,
                                  "duration": 73,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "04edcdbe-2343-4c7f-8ec6-7cea28c08690",
                                  "parentUUID": "e8bd75f3-c4db-430c-a4ee-d272e039df63",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                  "timedOut": false,
                                  "duration": 70,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "d4b1e227-a114-4c31-b713-36358a2612a3",
                                  "parentUUID": "e8bd75f3-c4db-430c-a4ee-d272e039df63",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                  "timedOut": false,
                                  "duration": 76,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "bf49b53a-dda9-4fc9-a88c-f003b347302f",
                                  "parentUUID": "e8bd75f3-c4db-430c-a4ee-d272e039df63",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                  "timedOut": false,
                                  "duration": 74,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "52b47ff8-3290-44eb-b916-11c2fecdb920",
                                  "parentUUID": "e8bd75f3-c4db-430c-a4ee-d272e039df63",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "db2251e3-5d6f-4e8d-9604-1d468b37e692",
                                "04edcdbe-2343-4c7f-8ec6-7cea28c08690",
                                "d4b1e227-a114-4c31-b713-36358a2612a3",
                                "bf49b53a-dda9-4fc9-a88c-f003b347302f",
                                "52b47ff8-3290-44eb-b916-11c2fecdb920"
                              ],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 4263,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                              "title": "测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 1921,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "5f82d42e-44c9-4c5f-aeb2-8dbc5179924e",
                                  "parentUUID": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                  "timedOut": false,
                                  "duration": 1140,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "569d1bd0-e60c-4955-afe3-16ab9ffa4dbf",
                                  "parentUUID": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0160\t发起带有效fee的交易_01: fee为null",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                  "timedOut": false,
                                  "duration": 77,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "a59fabc8-8605-4e41-b73d-2518c8278216",
                                  "parentUUID": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                  "timedOut": false,
                                  "duration": 70,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "6783b4f1-c8bc-4b85-902a-8d2ec7145b9a",
                                  "parentUUID": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                  "timedOut": false,
                                  "duration": 76,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "c5ced81a-ba95-452a-b62f-815fea17b090",
                                  "parentUUID": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "95af60ad-2335-4d0e-80aa-acc29e3de1cb",
                                  "parentUUID": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0200\t发起带无效fee的交易_02: fee为0",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "91552da7-0082-4434-911e-77db8e2a12c5",
                                  "parentUUID": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                    "diff": null
                                  },
                                  "uuid": "c69d4b0e-6e0f-4fdf-b990-3c6ce18199c7",
                                  "parentUUID": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包原生币swt余额的整数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包原生币swt余额的整数",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "3e984f59-1373-44d8-ae32-f2dde8dda656",
                                  "parentUUID": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                    "diff": null
                                  },
                                  "uuid": "6ee118d5-2418-4f8b-94be-417f82aa67ba",
                                  "parentUUID": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                    "diff": null
                                  },
                                  "uuid": "a6971827-8cb5-4515-b279-0633ee32adf0",
                                  "parentUUID": "387fdcce-cc95-4faf-9577-9f276ac5fe59",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "569d1bd0-e60c-4955-afe3-16ab9ffa4dbf",
                                "a59fabc8-8605-4e41-b73d-2518c8278216",
                                "6783b4f1-c8bc-4b85-902a-8d2ec7145b9a",
                                "c5ced81a-ba95-452a-b62f-815fea17b090",
                                "95af60ad-2335-4d0e-80aa-acc29e3de1cb",
                                "91552da7-0082-4434-911e-77db8e2a12c5",
                                "3e984f59-1373-44d8-ae32-f2dde8dda656"
                              ],
                              "failures": [
                                "c69d4b0e-6e0f-4fdf-b990-3c6ce18199c7",
                                "6ee118d5-2418-4f8b-94be-417f82aa67ba",
                                "a6971827-8cb5-4515-b279-0633ee32adf0"
                              ],
                              "pending": [],
                              "skipped": [],
                              "duration": 1366,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            }
                          ],
                          "passes": [],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 0,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "8a9fa1af-cd0a-4fba-a9e5-1ba3d15ff7e4",
                          "title": "原生币swt测试：jt_signTransaction",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [],
                          "suites": [
                            {
                              "uuid": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                              "title": "测试基本交易-[币种:原生币swt] [方式:jt_signTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 2449,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "1791b330-3b7d-45f7-881d-d9853863456d",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0010\t发起原生币swt有效交易_01",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0010\t发起原生币swt有效交易_01",
                                  "timedOut": false,
                                  "duration": 3356,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "0d6b12f5-5d63-4b5a-a857-5b7366c630eb",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0020\t发起原生币swt有效交易_02: 交易额填\"15\"等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0020\t发起原生币swt有效交易_02: 交易额填\"15\"等",
                                  "timedOut": false,
                                  "duration": 7,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected false to equal true",
                                    "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                    "diff": "- false\n+ true\n"
                                  },
                                  "uuid": "24494b98-aaeb-46e2-9971-31f097908f85",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 没有秘钥",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0030\t发起原生币swt无效交易_01: 没有秘钥",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "ffcf080d-d9b9-4bc4-89bc-a212b0e8ac1b",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 错误的秘钥1",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0030\t发起原生币swt无效交易_01: 错误的秘钥1",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                    "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                    "diff": null
                                  },
                                  "uuid": "b40a928d-f0bb-4d7f-9cde-7df99686e451",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 错误的秘钥2",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0030\t发起原生币swt无效交易_01: 错误的秘钥2",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "8bca2d2c-da03-4988-b0c0-b9d7e87d61cf",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0040\t发起原生币swt无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0040\t发起原生币swt无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "6b0356d8-66c3-407d-bf21-eb2a92bcaef2",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0050\t发起原生币swt无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0050\t发起原生币swt无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "26f5e649-c44e-4d68-9f50-7774c5f3e2c6",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0060\t发起原生币swt无效交易_04: 交易额超过发起钱包余额",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0060\t发起原生币swt无效交易_04: 交易额超过发起钱包余额",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "703caed0-ae2e-4084-8e33-c4bbfda82ec3",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0070\t发起原生币swt无效交易_05: 交易额为负数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0070\t发起原生币swt无效交易_05: 交易额为负数",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "7024ebd4-47ef-43f3-a17c-d192cf219561",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0080\t发起原生币swt无效交易_06: 交易额为空",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0080\t发起原生币swt无效交易_06: 交易额为空",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "bbc9165b-2065-4e47-86d8-92b5f20f8db6",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0080\t发起原生币swt无效交易_06: 交易额为字符串",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0080\t发起原生币swt无效交易_06: 交易额为字符串",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "8c83180d-2e34-412d-909f-151ad900302f",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0090\t发起原生币swt无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0090\t发起原生币swt无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "f6e3cbbc-e5df-4d45-976b-3826efc4619f",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0100\t发起原生币swt无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0100\t发起原生币swt无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "a887afeb-8848-42ee-8fe6-2bcab30e9169",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0110\t发起原生币swt无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0110\t发起原生币swt无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "b5f962df-38f4-401e-aa06-44060e4fe19e",
                                  "parentUUID": "b9f409c9-b948-47f7-865d-10f9799b9c33",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "0d6b12f5-5d63-4b5a-a857-5b7366c630eb",
                                "ffcf080d-d9b9-4bc4-89bc-a212b0e8ac1b",
                                "8bca2d2c-da03-4988-b0c0-b9d7e87d61cf",
                                "6b0356d8-66c3-407d-bf21-eb2a92bcaef2",
                                "26f5e649-c44e-4d68-9f50-7774c5f3e2c6",
                                "703caed0-ae2e-4084-8e33-c4bbfda82ec3",
                                "7024ebd4-47ef-43f3-a17c-d192cf219561",
                                "bbc9165b-2065-4e47-86d8-92b5f20f8db6",
                                "8c83180d-2e34-412d-909f-151ad900302f",
                                "f6e3cbbc-e5df-4d45-976b-3826efc4619f",
                                "a887afeb-8848-42ee-8fe6-2bcab30e9169",
                                "b5f962df-38f4-401e-aa06-44060e4fe19e"
                              ],
                              "failures": [
                                "24494b98-aaeb-46e2-9971-31f097908f85",
                                "b40a928d-f0bb-4d7f-9cde-7df99686e451"
                              ],
                              "pending": [],
                              "skipped": [],
                              "duration": 3367,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "cc6c22cb-1153-44f5-8a48-9b18dfc6a127",
                              "title": "测试交易memo-[币种:原生币swt] [方式:jt_signTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 1450,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "9f51b005-8698-4191-a603-d06b0b61d70f",
                                  "parentUUID": "cc6c22cb-1153-44f5-8a48-9b18dfc6a127",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                  "timedOut": false,
                                  "duration": 3360,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "cd3e218e-b152-43db-b037-7209390dce26",
                                  "parentUUID": "cc6c22cb-1153-44f5-8a48-9b18dfc6a127",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                  "timedOut": false,
                                  "duration": 145,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "83cae699-01d4-4791-bd44-8cc54635d7db",
                                  "parentUUID": "cc6c22cb-1153-44f5-8a48-9b18dfc6a127",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                  "timedOut": false,
                                  "duration": 144,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "fe3d4a5d-8473-4895-a151-450c5bf8470f",
                                  "parentUUID": "cc6c22cb-1153-44f5-8a48-9b18dfc6a127",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                  "timedOut": false,
                                  "duration": 142,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "5539002a-c43e-4991-a294-8fd13e267571",
                                  "parentUUID": "cc6c22cb-1153-44f5-8a48-9b18dfc6a127",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                  "timedOut": false,
                                  "duration": 145,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "2bfa941b-b789-492a-a5a2-d47b5028ccab",
                                  "parentUUID": "cc6c22cb-1153-44f5-8a48-9b18dfc6a127",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "cd3e218e-b152-43db-b037-7209390dce26",
                                "83cae699-01d4-4791-bd44-8cc54635d7db",
                                "fe3d4a5d-8473-4895-a151-450c5bf8470f",
                                "5539002a-c43e-4991-a294-8fd13e267571",
                                "2bfa941b-b789-492a-a5a2-d47b5028ccab"
                              ],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 3936,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "92ecba22-2e50-435a-be3c-08849abb0143",
                              "title": "测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 2398,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "027e75fa-f711-44d4-a7bb-45db252a736a",
                                  "parentUUID": "92ecba22-2e50-435a-be3c-08849abb0143",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                  "timedOut": false,
                                  "duration": 1224,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "38c904ba-0d27-4ddd-9a28-d345cbd68386",
                                  "parentUUID": "92ecba22-2e50-435a-be3c-08849abb0143",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0160\t发起带有效fee的交易_01: fee为null",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                  "timedOut": false,
                                  "duration": 138,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "a41a2c12-0d25-44ae-9fa5-6e3d79976ec6",
                                  "parentUUID": "92ecba22-2e50-435a-be3c-08849abb0143",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                  "timedOut": false,
                                  "duration": 151,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "83c44d71-99d4-4a85-8a6c-d5bec0a469b3",
                                  "parentUUID": "92ecba22-2e50-435a-be3c-08849abb0143",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                  "timedOut": false,
                                  "duration": 146,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "f94916a5-0964-4955-bd87-7062aa299ec3",
                                  "parentUUID": "92ecba22-2e50-435a-be3c-08849abb0143",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "aa5d353e-757b-4d04-a700-1aa12e2a38a8",
                                  "parentUUID": "92ecba22-2e50-435a-be3c-08849abb0143",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0200\t发起带无效fee的交易_02: fee为0",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "7066cd39-1300-4876-bfb5-45bd83f91666",
                                  "parentUUID": "92ecba22-2e50-435a-be3c-08849abb0143",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                    "diff": null
                                  },
                                  "uuid": "783b2139-e696-4d58-af4c-56100d74f922",
                                  "parentUUID": "92ecba22-2e50-435a-be3c-08849abb0143",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包原生币swt余额的整数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包原生币swt余额的整数",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "d0d111d8-57fb-4e50-9e02-3e6a4739f707",
                                  "parentUUID": "92ecba22-2e50-435a-be3c-08849abb0143",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                    "diff": null
                                  },
                                  "uuid": "90e42b0a-8742-4e71-a823-102cbcbc06f5",
                                  "parentUUID": "92ecba22-2e50-435a-be3c-08849abb0143",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                    "diff": null
                                  },
                                  "uuid": "b17249e2-871c-4438-924f-d6146d4d9094",
                                  "parentUUID": "92ecba22-2e50-435a-be3c-08849abb0143",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "38c904ba-0d27-4ddd-9a28-d345cbd68386",
                                "a41a2c12-0d25-44ae-9fa5-6e3d79976ec6",
                                "83c44d71-99d4-4a85-8a6c-d5bec0a469b3",
                                "f94916a5-0964-4955-bd87-7062aa299ec3",
                                "aa5d353e-757b-4d04-a700-1aa12e2a38a8",
                                "7066cd39-1300-4876-bfb5-45bd83f91666",
                                "d0d111d8-57fb-4e50-9e02-3e6a4739f707"
                              ],
                              "failures": [
                                "783b2139-e696-4d58-af4c-56100d74f922",
                                "90e42b0a-8742-4e71-a823-102cbcbc06f5",
                                "b17249e2-871c-4438-924f-d6146d4d9094"
                              ],
                              "pending": [],
                              "skipped": [],
                              "duration": 1665,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            }
                          ],
                          "passes": [],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 0,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "8571fc3f-d1de-4854-9ff0-c41b4e835e82",
                          "title": "代币测试：jt_sendTransaction",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [],
                          "suites": [
                            {
                              "uuid": "96bc01af-6338-452d-8b45-6af87a0b150d",
                              "title": "标准一次性代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                  "title": "测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2376,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "da61b3c7-c880-46f5-884a-6f4683bb2e3d",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0270\t发行标准一次性代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "029f8758-fe92-435e-9aef-3f6f73347d7f",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准一次性代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0290\t发行标准一次性代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "25bcf72f-37f3-4912-91b2-9d6f538c39fc",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准一次性代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0300\t发行标准一次性代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6195d7bd-1748-45d7-9af8-a6964b035a38",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准一次性代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0310\t发行标准一次性代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a9d980ce-0ade-4dc8-9dac-b577030d7004",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准一次性代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0310\t发行标准一次性代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "386a163a-c664-463a-a024-776440f3341a",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准一次性代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0320\t发行标准一次性代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "63e5f10c-2f16-400e-b678-365d568262bc",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0320\t发行标准一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, E16CCA5243D65DA6371ABC4BC322147DC4C608EE44324E9FAE4C7E0447259851: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, E16CCA5243D65DA6371ABC4BC322147DC4C608EE44324E9FAE4C7E0447259851: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "3fc11000-c8d8-47da-a619-15139150bfe0",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0330\t发行标准一次性代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "46c80b7d-3ba4-4fc5-9ec6-451a1911a57b",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0330\t发行标准一次性代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8c8245e9-19cd-424f-b76f-892c2ac9e1c8",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0330\t发行标准一次性代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c6b021a0-ff63-48b6-8818-b1b71cfb374c",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8c9ffca7-80d5-475b-8e23-4470f0cf85d0",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ca0ef030-7753-4b27-a176-e81f8556ecc0",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "147ee8a6-9704-410f-9336-a02a542a193d",
                                      "parentUUID": "76f6c283-8f52-41cb-ba36-c00dc6378e2c",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "25bcf72f-37f3-4912-91b2-9d6f538c39fc",
                                    "6195d7bd-1748-45d7-9af8-a6964b035a38",
                                    "a9d980ce-0ade-4dc8-9dac-b577030d7004",
                                    "386a163a-c664-463a-a024-776440f3341a",
                                    "63e5f10c-2f16-400e-b678-365d568262bc",
                                    "46c80b7d-3ba4-4fc5-9ec6-451a1911a57b",
                                    "8c8245e9-19cd-424f-b76f-892c2ac9e1c8",
                                    "c6b021a0-ff63-48b6-8818-b1b71cfb374c",
                                    "8c9ffca7-80d5-475b-8e23-4470f0cf85d0",
                                    "ca0ef030-7753-4b27-a176-e81f8556ecc0",
                                    "147ee8a6-9704-410f-9336-a02a542a193d"
                                  ],
                                  "failures": [
                                    "029f8758-fe92-435e-9aef-3f6f73347d7f",
                                    "3fc11000-c8d8-47da-a619-15139150bfe0"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 15,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                  "title": "测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2493,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "8283c16e-db33-4cff-af38-88ecb6b267b6",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准一次性代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0010\t发起标准一次性代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "384a9d36-e49a-4f08-910d-3b5deeb028ea",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0030\t发起标准一次性代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "33d0c4de-5b05-44fb-8a5b-3b42cf7d818e",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0030\t发起标准一次性代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "b1655d49-e328-4fdb-8543-eb661c2b61c7",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0030\t发起标准一次性代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "40b12bd2-3cc7-4d64-92db-78142585de4a",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0040\t发起标准一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0ac0061f-201a-4e48-b6d2-c0fef28d4bc5",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0050\t发起标准一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "00032384-c94a-4d02-aee0-661ea9469b38",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0060\t发起标准一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9e71d60c-21d5-4827-9411-a6ac1bc5511c",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准一次性代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0070\t发起标准一次性代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "551e5ec0-c83e-4797-913f-98fda3beea8b",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准一次性代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0080\t发起标准一次性代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9ddd3fab-7f85-4234-a1c5-8d96b06a0f2d",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准一次性代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0080\t发起标准一次性代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5437530a-ee14-4632-8000-9a2ac02e9d05",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0090\t发起标准一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c0519ae5-9719-4d06-86d4-ee511df4b397",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0100\t发起标准一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9f668f75-c726-429c-ad91-c446ec03f40b",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0110\t发起标准一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "09876fd1-67b5-4c1e-bbc5-41fa94c096e9",
                                      "parentUUID": "82a54715-267b-405c-9424-4f9c5f07fbfb",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "33d0c4de-5b05-44fb-8a5b-3b42cf7d818e",
                                    "40b12bd2-3cc7-4d64-92db-78142585de4a",
                                    "0ac0061f-201a-4e48-b6d2-c0fef28d4bc5",
                                    "00032384-c94a-4d02-aee0-661ea9469b38",
                                    "9e71d60c-21d5-4827-9411-a6ac1bc5511c",
                                    "551e5ec0-c83e-4797-913f-98fda3beea8b",
                                    "9ddd3fab-7f85-4234-a1c5-8d96b06a0f2d",
                                    "5437530a-ee14-4632-8000-9a2ac02e9d05",
                                    "c0519ae5-9719-4d06-86d4-ee511df4b397",
                                    "9f668f75-c726-429c-ad91-c446ec03f40b",
                                    "09876fd1-67b5-4c1e-bbc5-41fa94c096e9"
                                  ],
                                  "failures": [
                                    "384a9d36-e49a-4f08-910d-3b5deeb028ea",
                                    "b1655d49-e328-4fdb-8543-eb661c2b61c7"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 9,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "7287802b-99ac-4401-aae6-441786ec6066",
                                  "title": "测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1128,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "bbbece58-0042-4b84-ac82-5589a74e3448",
                                      "parentUUID": "7287802b-99ac-4401-aae6-441786ec6066",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "e156fdbc-e40a-40f6-80f1-4b4a101d71cd",
                                      "parentUUID": "7287802b-99ac-4401-aae6-441786ec6066",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "3959ef81-846c-4967-954e-2ec517bd54cf",
                                      "parentUUID": "7287802b-99ac-4401-aae6-441786ec6066",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "988e36a3-7a94-40c8-9166-14f2fdf64dba",
                                      "parentUUID": "7287802b-99ac-4401-aae6-441786ec6066",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "63c6091d-69e3-4de2-88c6-1a3535ef7dab",
                                      "parentUUID": "7287802b-99ac-4401-aae6-441786ec6066",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "5c2f604e-882c-4bb1-9ab0-967b48f6cf00",
                                      "parentUUID": "7287802b-99ac-4401-aae6-441786ec6066",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "e156fdbc-e40a-40f6-80f1-4b4a101d71cd",
                                    "3959ef81-846c-4967-954e-2ec517bd54cf",
                                    "988e36a3-7a94-40c8-9166-14f2fdf64dba",
                                    "63c6091d-69e3-4de2-88c6-1a3535ef7dab",
                                    "5c2f604e-882c-4bb1-9ab0-967b48f6cf00"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 0,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                  "title": "测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1758,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "ae34b8b2-df77-4a14-b75f-ee07d4dc7b5e",
                                      "parentUUID": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "5bc9f77f-6946-4130-80b9-61c0c1bf26e9",
                                      "parentUUID": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "81df23a9-bbf4-45f2-afad-3a89fe718970",
                                      "parentUUID": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "e49f82db-42fd-4994-8abf-79613dff97ef",
                                      "parentUUID": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "0346e337-dba7-4043-94c1-6de0fc3af1ae",
                                      "parentUUID": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d1f053bf-d789-4444-b77f-a6443c02378e",
                                      "parentUUID": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "03b8eaa9-9324-4992-9b81-8439b048dc60",
                                      "parentUUID": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "876c4d60-ff0e-4e61-b623-f4b32459c69c",
                                      "parentUUID": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准一次性代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准一次性代币余额的整数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, E67ACDD3EA4B0C9637622E3E3DB481D51A5A37495A3898FEE1F12EFF2D724F34: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, E67ACDD3EA4B0C9637622E3E3DB481D51A5A37495A3898FEE1F12EFF2D724F34: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "6253406a-7cf6-4872-bc24-ac47e9608330",
                                      "parentUUID": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "6d67eb01-16d6-4816-b833-b919345e57a5",
                                      "parentUUID": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "b4484c5e-050e-4889-a2e8-d7ccf2a77e76",
                                      "parentUUID": "0ba03d04-00d9-44f3-a9f2-3340e0a16db3",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "d1f053bf-d789-4444-b77f-a6443c02378e",
                                    "03b8eaa9-9324-4992-9b81-8439b048dc60"
                                  ],
                                  "failures": [
                                    "5bc9f77f-6946-4130-80b9-61c0c1bf26e9",
                                    "81df23a9-bbf4-45f2-afad-3a89fe718970",
                                    "e49f82db-42fd-4994-8abf-79613dff97ef",
                                    "0346e337-dba7-4043-94c1-6de0fc3af1ae",
                                    "876c4d60-ff0e-4e61-b623-f4b32459c69c",
                                    "6253406a-7cf6-4872-bc24-ac47e9608330",
                                    "6d67eb01-16d6-4816-b833-b919345e57a5",
                                    "b4484c5e-050e-4889-a2e8-d7ccf2a77e76"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 8,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "f33194db-b24d-4b26-ba72-f19374f3e063",
                                  "title": "测试增发-[币种:5f4c7d5a] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d5a] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 221,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "bff829ea-8a3c-4b66-a4de-80c8cb09ad14",
                                      "parentUUID": "f33194db-b24d-4b26-ba72-f19374f3e063",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d5a] [方式:jt_sendTransaction] 0370\t增发可增发的代币标准一次性代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, B04DC5975F828B54DF334928DD0A3EBB579781402DB2753ADBB1C823D15F05C6: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, B04DC5975F828B54DF334928DD0A3EBB579781402DB2753ADBB1C823D15F05C6: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "a10754b4-7b53-40a5-ad22-cdb609434110",
                                      "parentUUID": "f33194db-b24d-4b26-ba72-f19374f3e063",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "a10754b4-7b53-40a5-ad22-cdb609434110"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "aa13d200-db12-4441-962d-12f0a587665c",
                                  "title": "测试销毁-[币种:5f4c7d5a] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5a] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 676,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "67413b09-74d8-47c5-8d0d-75dd6e1feeb9",
                                      "parentUUID": "aa13d200-db12-4441-962d-12f0a587665c",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5a] [方式:jt_sendTransaction] 0380\t销毁标准一次性代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, F5C4435F2C3B8B8947A0D1425F0F1E219E76B10A2863C6767E9DBD8C44084930: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, F5C4435F2C3B8B8947A0D1425F0F1E219E76B10A2863C6767E9DBD8C44084930: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "b748d1ca-2ab7-4373-b8f9-70b4cd2dae26",
                                      "parentUUID": "aa13d200-db12-4441-962d-12f0a587665c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5a] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准一次性代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 0E6A3966B6A9F9649CBAE3234608634F88319D60370B9D5CBA4B8A90E543B5BE: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 0E6A3966B6A9F9649CBAE3234608634F88319D60370B9D5CBA4B8A90E543B5BE: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "0ab2df11-a82e-4ead-86a9-5c49b46254aa",
                                      "parentUUID": "aa13d200-db12-4441-962d-12f0a587665c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5a] [方式:jt_sendTransaction] 0380\t销毁所有标准一次性代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, BCCA9D2A8185E5FA91571902F134EC7628F522408A5063D64003805C2441EC47: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, BCCA9D2A8185E5FA91571902F134EC7628F522408A5063D64003805C2441EC47: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "15b77ded-3179-42cc-a8da-56a04652a383",
                                      "parentUUID": "aa13d200-db12-4441-962d-12f0a587665c",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "b748d1ca-2ab7-4373-b8f9-70b4cd2dae26",
                                    "0ab2df11-a82e-4ead-86a9-5c49b46254aa",
                                    "15b77ded-3179-42cc-a8da-56a04652a383"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "93faed4f-ee2a-4fa7-9ef0-1da39f985890",
                              "title": "标准可增发代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                  "title": "测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2243,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "4b26dc79-a471-47f4-8d5f-d379c5595dc7",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0270\t发行标准可增发代币",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "26dfdde9-e087-40d0-816f-a1cdd3aed90c",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可增发代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0290\t发行标准可增发代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1cd2ca75-f888-4fdf-8d80-d99e892a5583",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可增发代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0300\t发行标准可增发代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "885ca8f5-f2d5-4e0c-957d-c62e23e0e476",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0310\t发行标准可增发代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a6b1abe3-7781-4a2d-bc6b-3deba5cb4a3d",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0310\t发行标准可增发代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9366ab90-e83c-47a3-a212-bb48ddbc1707",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0320\t发行标准可增发代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f86d2b08-4799-4abb-8115-495a55bdc262",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0320\t发行标准可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 75D898249F7D1C423EFB21DDBFE043D927B1836199FDF6E283DE32F4AD8350D0: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 75D898249F7D1C423EFB21DDBFE043D927B1836199FDF6E283DE32F4AD8350D0: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "cfc4dffe-348d-4744-bc13-86cb611879ae",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0330\t发行标准可增发代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "27809468-bae5-4a75-be0b-b444fefe8062",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0330\t发行标准可增发代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c00868b4-2744-4f62-8d70-8146adfda7bd",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0330\t发行标准可增发代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ae93064d-8bff-4e20-9ea2-e5db3240b991",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1911c313-481e-4aa4-8009-b3ab2a47bec4",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "39f384eb-d680-489d-9dfe-c9e7f4177177",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3becbe53-537b-40ae-acd2-c3a40b4fdff4",
                                      "parentUUID": "ed4c14a8-66d2-456a-8c48-9b09026a8eb4",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "1cd2ca75-f888-4fdf-8d80-d99e892a5583",
                                    "885ca8f5-f2d5-4e0c-957d-c62e23e0e476",
                                    "a6b1abe3-7781-4a2d-bc6b-3deba5cb4a3d",
                                    "9366ab90-e83c-47a3-a212-bb48ddbc1707",
                                    "f86d2b08-4799-4abb-8115-495a55bdc262",
                                    "27809468-bae5-4a75-be0b-b444fefe8062",
                                    "c00868b4-2744-4f62-8d70-8146adfda7bd",
                                    "ae93064d-8bff-4e20-9ea2-e5db3240b991",
                                    "1911c313-481e-4aa4-8009-b3ab2a47bec4",
                                    "39f384eb-d680-489d-9dfe-c9e7f4177177",
                                    "3becbe53-537b-40ae-acd2-c3a40b4fdff4"
                                  ],
                                  "failures": [
                                    "26dfdde9-e087-40d0-816f-a1cdd3aed90c",
                                    "cfc4dffe-348d-4744-bc13-86cb611879ae"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 13,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                  "title": "测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1970,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "7a6b2acf-342d-452d-91ce-5b40c05716a9",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可增发代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0010\t发起标准可增发代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "8cd03211-90fd-48b7-b337-1f4027a99d83",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0030\t发起标准可增发代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a460fa0b-edc4-49fb-a952-436b24997782",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0030\t发起标准可增发代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "38dd1249-cca8-4d3e-b338-65d2eddd3b61",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0030\t发起标准可增发代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8923df34-fc61-4d0d-bc9d-86f8a8a22099",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0040\t发起标准可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "469458d1-e61a-4c81-95ba-9b66efc26f55",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0050\t发起标准可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d839cdbf-e10e-4b2a-ae78-79fb19318d2a",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0060\t发起标准可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c39ec9a5-0d82-4406-954d-becc33a5a2a6",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可增发代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0070\t发起标准可增发代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cd1ec164-4c79-4ecc-b5c0-b67ba1447461",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0080\t发起标准可增发代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6324e443-9900-4fda-a6b9-c263558e45e3",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0080\t发起标准可增发代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0ab13db7-0f30-4883-bfa1-b91fd54fcfcf",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0090\t发起标准可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6ba096be-d71e-4e2b-8f1a-edf7ae554d25",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0100\t发起标准可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a6692d42-71b3-4a19-ba20-714c7cf868de",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0110\t发起标准可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "323be3e1-b9ba-4dd2-bf4a-7546eb73292c",
                                      "parentUUID": "cf8a3a9d-75b0-46b3-abf0-7f5ed9bf6f49",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "a460fa0b-edc4-49fb-a952-436b24997782",
                                    "8923df34-fc61-4d0d-bc9d-86f8a8a22099",
                                    "469458d1-e61a-4c81-95ba-9b66efc26f55",
                                    "d839cdbf-e10e-4b2a-ae78-79fb19318d2a",
                                    "c39ec9a5-0d82-4406-954d-becc33a5a2a6",
                                    "cd1ec164-4c79-4ecc-b5c0-b67ba1447461",
                                    "6324e443-9900-4fda-a6b9-c263558e45e3",
                                    "0ab13db7-0f30-4883-bfa1-b91fd54fcfcf",
                                    "6ba096be-d71e-4e2b-8f1a-edf7ae554d25",
                                    "a6692d42-71b3-4a19-ba20-714c7cf868de",
                                    "323be3e1-b9ba-4dd2-bf4a-7546eb73292c"
                                  ],
                                  "failures": [
                                    "8cd03211-90fd-48b7-b337-1f4027a99d83",
                                    "38dd1249-cca8-4d3e-b338-65d2eddd3b61"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 6,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "14e7b0fe-8e89-445b-91a5-8272a364132a",
                                  "title": "测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1523,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "9f647026-9f83-4ef8-b4d4-9584e682feb8",
                                      "parentUUID": "14e7b0fe-8e89-445b-91a5-8272a364132a",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "147eb357-9e49-44c0-b492-b7e39e22bc64",
                                      "parentUUID": "14e7b0fe-8e89-445b-91a5-8272a364132a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "1e5cd540-31d0-4b13-86ba-2a4510b8f0b7",
                                      "parentUUID": "14e7b0fe-8e89-445b-91a5-8272a364132a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "4253b6bf-ee05-4b3e-a772-e240e904ed32",
                                      "parentUUID": "14e7b0fe-8e89-445b-91a5-8272a364132a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "75266a56-0eb3-45b0-8c34-be1446e8c174",
                                      "parentUUID": "14e7b0fe-8e89-445b-91a5-8272a364132a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "dd9f5fed-a522-49a2-b77b-f682c483a74f",
                                      "parentUUID": "14e7b0fe-8e89-445b-91a5-8272a364132a",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "147eb357-9e49-44c0-b492-b7e39e22bc64",
                                    "1e5cd540-31d0-4b13-86ba-2a4510b8f0b7",
                                    "4253b6bf-ee05-4b3e-a772-e240e904ed32",
                                    "75266a56-0eb3-45b0-8c34-be1446e8c174",
                                    "dd9f5fed-a522-49a2-b77b-f682c483a74f"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                  "title": "测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1797,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "2f24f5eb-86f5-4311-8bbf-b260a7994ec9",
                                      "parentUUID": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "a2f562e9-6c0e-42b5-9110-ecec4668a741",
                                      "parentUUID": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "6665f916-b408-4a28-8202-da9511eac167",
                                      "parentUUID": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "432711d9-713f-4fd4-92db-fe2057f55fd4",
                                      "parentUUID": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "7a8df552-6bf7-4f54-971a-7b607d28154f",
                                      "parentUUID": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a809d141-d1ea-47a9-9851-07261a3efd9a",
                                      "parentUUID": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6d66d6df-2ffc-419c-87fc-c74bc44e9de1",
                                      "parentUUID": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "5ac05e9c-6ba1-4af7-ab3b-13f0e9ac47c3",
                                      "parentUUID": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发代币余额的整数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 8FDB533C62BDA9D2360473D8A690C50AF443D1E0A835317E3A09C2F6EB652DE6: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 8FDB533C62BDA9D2360473D8A690C50AF443D1E0A835317E3A09C2F6EB652DE6: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "bd782e39-c2ee-4689-bae8-12395a4320f5",
                                      "parentUUID": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "f53698f8-8ef5-4d43-be04-00c075789d56",
                                      "parentUUID": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "6dfe5372-2b92-447f-95f6-c13b17633845",
                                      "parentUUID": "253d499c-16a3-454c-b4d0-dc0b13fa128d",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "a809d141-d1ea-47a9-9851-07261a3efd9a",
                                    "6d66d6df-2ffc-419c-87fc-c74bc44e9de1"
                                  ],
                                  "failures": [
                                    "a2f562e9-6c0e-42b5-9110-ecec4668a741",
                                    "6665f916-b408-4a28-8202-da9511eac167",
                                    "432711d9-713f-4fd4-92db-fe2057f55fd4",
                                    "7a8df552-6bf7-4f54-971a-7b607d28154f",
                                    "5ac05e9c-6ba1-4af7-ab3b-13f0e9ac47c3",
                                    "bd782e39-c2ee-4689-bae8-12395a4320f5",
                                    "f53698f8-8ef5-4d43-be04-00c075789d56",
                                    "6dfe5372-2b92-447f-95f6-c13b17633845"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c3c43fc5-8496-456c-86a4-36214bb2fa6f",
                                  "title": "测试增发-[币种:5f4c7d5c] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d5c] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 217,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "28bb4535-a870-45a4-bb5f-ce9203144033",
                                      "parentUUID": "c3c43fc5-8496-456c-86a4-36214bb2fa6f",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d5c] [方式:jt_sendTransaction] 0370\t增发可增发的代币标准可增发代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "af9952b0-8e01-406b-8b77-ea5a93d50a10",
                                      "parentUUID": "c3c43fc5-8496-456c-86a4-36214bb2fa6f",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "af9952b0-8e01-406b-8b77-ea5a93d50a10"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "4b67570a-316a-4f44-8380-1cff25271caf",
                                  "title": "测试销毁-[币种:5f4c7d5c] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5c] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 661,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "6f0e7111-78cd-4145-adfe-63f639564cec",
                                      "parentUUID": "4b67570a-316a-4f44-8380-1cff25271caf",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5c] [方式:jt_sendTransaction] 0380\t销毁标准可增发代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 7A05610ABAC44A4DEE23E5A77563AA376C77AE71215D86685BEE0ADEDF68B21E: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 7A05610ABAC44A4DEE23E5A77563AA376C77AE71215D86685BEE0ADEDF68B21E: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "66e31614-4f9a-4c1a-b3ac-2d3405f104e2",
                                      "parentUUID": "4b67570a-316a-4f44-8380-1cff25271caf",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5c] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可增发代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, ACF46D93C8165BF791537984734946C5B90D9D47E312873FD43308212B27CAED: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, ACF46D93C8165BF791537984734946C5B90D9D47E312873FD43308212B27CAED: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "beb6776d-ee5c-4945-90e7-f23560182753",
                                      "parentUUID": "4b67570a-316a-4f44-8380-1cff25271caf",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5c] [方式:jt_sendTransaction] 0380\t销毁所有标准可增发代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, C04AC516906B0E9C48D7B2E33EB6874A8113A7872CBD13CE309DD37FB53B0DBB: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, C04AC516906B0E9C48D7B2E33EB6874A8113A7872CBD13CE309DD37FB53B0DBB: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "aeb082f0-b285-49d8-9b00-858f7fc1b72c",
                                      "parentUUID": "4b67570a-316a-4f44-8380-1cff25271caf",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "66e31614-4f9a-4c1a-b3ac-2d3405f104e2",
                                    "beb6776d-ee5c-4945-90e7-f23560182753",
                                    "aeb082f0-b285-49d8-9b00-858f7fc1b72c"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 2,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "c1e151dc-b150-43ab-a09f-a874bf6ed3d3",
                              "title": "标准可销毁代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                  "title": "测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2467,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "dfcee7f0-33a0-46c8-a725-12f898c73bca",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0270\t发行标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "f5f88b38-971d-48c8-9dc2-c56508e8f838",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0290\t发行标准可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5ef2dd28-c01d-48c4-8c94-dcb10bf978e9",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0300\t发行标准可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a98e8fda-aa3f-44c7-9520-9ab46e12a57e",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0310\t发行标准可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "59bc69b7-6a5a-4bbf-8ab7-0600b895e910",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0310\t发行标准可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7543f768-0089-4bf3-86ce-f2099371676f",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0320\t发行标准可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "67ee1231-4f6f-424e-aded-3dea9348b24a",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0320\t发行标准可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 4AE4E89822CD55202BAB510B06B96BA093AF7FAB6AB1895E7B452523C47F6965: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 4AE4E89822CD55202BAB510B06B96BA093AF7FAB6AB1895E7B452523C47F6965: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "fd349ac5-c9ef-4bb6-8390-685deff9dc16",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "24d2455c-f286-45c0-87af-deea6c058ae0",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8c3f9481-ea04-4956-bf3d-9284444061c9",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fb973b7d-98e7-4c37-9379-143b063bda65",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1cd072c6-2910-4ff6-88cd-6206bff5c7cc",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e81c6722-9d17-41ce-9e50-530399ff7c9e",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "390a88ba-6f9f-4b68-81a6-9a6a65f1ee3e",
                                      "parentUUID": "f0aed4e8-afa5-445d-adf0-f264024aca7c",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "5ef2dd28-c01d-48c4-8c94-dcb10bf978e9",
                                    "a98e8fda-aa3f-44c7-9520-9ab46e12a57e",
                                    "59bc69b7-6a5a-4bbf-8ab7-0600b895e910",
                                    "7543f768-0089-4bf3-86ce-f2099371676f",
                                    "67ee1231-4f6f-424e-aded-3dea9348b24a",
                                    "24d2455c-f286-45c0-87af-deea6c058ae0",
                                    "8c3f9481-ea04-4956-bf3d-9284444061c9",
                                    "fb973b7d-98e7-4c37-9379-143b063bda65",
                                    "1cd072c6-2910-4ff6-88cd-6206bff5c7cc",
                                    "e81c6722-9d17-41ce-9e50-530399ff7c9e",
                                    "390a88ba-6f9f-4b68-81a6-9a6a65f1ee3e"
                                  ],
                                  "failures": [
                                    "f5f88b38-971d-48c8-9dc2-c56508e8f838",
                                    "fd349ac5-c9ef-4bb6-8390-685deff9dc16"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                  "title": "测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 15002,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "4c0087e0-055b-400b-9fdb-03a1a47f51b7",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0010\t发起标准可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "bd54486f-2263-46bd-82e5-2857ce7c2c7f",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fcecce19-9abe-47ba-87ca-7fb4f55fb4bc",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "4a001745-ca98-495a-9a93-6b1a1f39083f",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "efe80068-63aa-4b03-86fb-7441bbf4f5a8",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0040\t发起标准可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9bfe48f9-559d-45bd-8445-f7e4760d2210",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0050\t发起标准可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "dc6ba13d-141c-4114-9ef9-f2182f38c8dc",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0060\t发起标准可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 398439E9BCA301337D436B905FEDE433A492700D7EA83F5F54939A77D57A643C: terTIMEOUT No replies received and timeout.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 398439E9BCA301337D436B905FEDE433A492700D7EA83F5F54939A77D57A643C: terTIMEOUT No replies received and timeout.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "67ce8dac-3778-4a66-a64b-0b4e30729e42",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0070\t发起标准可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "da72eafa-fc9f-4b40-90b9-1011c86b3a87",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0080\t发起标准可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "86114c7c-ed2a-465b-b25f-46c61a654950",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0080\t发起标准可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2d572e6f-14c5-45d7-8428-0e68464e646f",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0090\t发起标准可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a8b3924c-00af-40a9-8d25-eca71a2c339e",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0100\t发起标准可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "25001c99-e2be-4b3e-b81c-f0771a8815c2",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0110\t发起标准可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d1835391-ccbe-4d31-9a3e-0ebf4b4f671e",
                                      "parentUUID": "ad8413a6-e9cf-425f-af42-5da6cea53eed",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "fcecce19-9abe-47ba-87ca-7fb4f55fb4bc",
                                    "efe80068-63aa-4b03-86fb-7441bbf4f5a8",
                                    "9bfe48f9-559d-45bd-8445-f7e4760d2210",
                                    "dc6ba13d-141c-4114-9ef9-f2182f38c8dc",
                                    "da72eafa-fc9f-4b40-90b9-1011c86b3a87",
                                    "86114c7c-ed2a-465b-b25f-46c61a654950",
                                    "2d572e6f-14c5-45d7-8428-0e68464e646f",
                                    "a8b3924c-00af-40a9-8d25-eca71a2c339e",
                                    "25001c99-e2be-4b3e-b81c-f0771a8815c2",
                                    "d1835391-ccbe-4d31-9a3e-0ebf4b4f671e"
                                  ],
                                  "failures": [
                                    "bd54486f-2263-46bd-82e5-2857ce7c2c7f",
                                    "4a001745-ca98-495a-9a93-6b1a1f39083f",
                                    "67ce8dac-3778-4a66-a64b-0b4e30729e42"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "92b244ca-7ff3-4492-b5f9-8f8cb92f23ef",
                                  "title": "测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1086,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "04e87a4f-2b3d-4c50-bfec-8f9fa5e55489",
                                      "parentUUID": "92b244ca-7ff3-4492-b5f9-8f8cb92f23ef",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "293f11e4-741f-418c-a0ee-f749d1ed984c",
                                      "parentUUID": "92b244ca-7ff3-4492-b5f9-8f8cb92f23ef",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "6babd8fa-066a-4e2d-bc05-c3664916efc8",
                                      "parentUUID": "92b244ca-7ff3-4492-b5f9-8f8cb92f23ef",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "b82d2a29-7674-4686-8d69-6c1aeb2b98c7",
                                      "parentUUID": "92b244ca-7ff3-4492-b5f9-8f8cb92f23ef",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "17772233-4d17-4fe4-88b9-cd8beb34e604",
                                      "parentUUID": "92b244ca-7ff3-4492-b5f9-8f8cb92f23ef",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "fd1a1fd2-2c52-4b2d-8247-1e8eda0bd880",
                                      "parentUUID": "92b244ca-7ff3-4492-b5f9-8f8cb92f23ef",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "293f11e4-741f-418c-a0ee-f749d1ed984c",
                                    "6babd8fa-066a-4e2d-bc05-c3664916efc8",
                                    "b82d2a29-7674-4686-8d69-6c1aeb2b98c7",
                                    "17772233-4d17-4fe4-88b9-cd8beb34e604",
                                    "fd1a1fd2-2c52-4b2d-8247-1e8eda0bd880"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                  "title": "测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 17232,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "1ae9f34c-761b-4b1d-acbc-dc1736bea6ad",
                                      "parentUUID": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "9d46e7bb-38fb-4958-952c-3adf00e17a9d",
                                      "parentUUID": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "5302e485-c146-47b4-b5f9-fdf5cbe91b79",
                                      "parentUUID": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "cce71a83-d2dd-4aaa-b304-3c957c54e226",
                                      "parentUUID": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "b0f60978-6b04-450a-ac2d-528aec94b466",
                                      "parentUUID": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f9de6490-301c-4770-bb61-510121f32c4a",
                                      "parentUUID": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3bdf6d28-aed7-40b3-9af8-6d4324a17055",
                                      "parentUUID": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "a38eb232-4fd6-45ef-aef4-5830a4914638",
                                      "parentUUID": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, E6CE46208A8387754E3E5E6E754B4607A384CEB3E5375C58A501B5901AE6144D: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, E6CE46208A8387754E3E5E6E754B4607A384CEB3E5375C58A501B5901AE6144D: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "d8e77b21-8ffd-4642-abd1-752af8841cf2",
                                      "parentUUID": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "f9f84ef0-defe-4ba5-a037-f752975e0c5c",
                                      "parentUUID": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "8aade54c-b498-4c0a-bc3c-10a5fdae81d4",
                                      "parentUUID": "b448b683-fb7e-400f-8287-5bc3197971e7",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "f9de6490-301c-4770-bb61-510121f32c4a",
                                    "3bdf6d28-aed7-40b3-9af8-6d4324a17055"
                                  ],
                                  "failures": [
                                    "9d46e7bb-38fb-4958-952c-3adf00e17a9d",
                                    "5302e485-c146-47b4-b5f9-fdf5cbe91b79",
                                    "cce71a83-d2dd-4aaa-b304-3c957c54e226",
                                    "b0f60978-6b04-450a-ac2d-528aec94b466",
                                    "a38eb232-4fd6-45ef-aef4-5830a4914638",
                                    "d8e77b21-8ffd-4642-abd1-752af8841cf2",
                                    "f9f84ef0-defe-4ba5-a037-f752975e0c5c",
                                    "8aade54c-b498-4c0a-bc3c-10a5fdae81d4"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 8,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "98e3f8ef-361f-4897-a9f4-491c743d295e",
                                  "title": "测试增发-[币种:5f4c7d5e] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d5e] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 234,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "f49698ff-92c4-493b-b247-b0f272853024",
                                      "parentUUID": "98e3f8ef-361f-4897-a9f4-491c743d295e",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d5e] [方式:jt_sendTransaction] 0370\t增发可增发的代币标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, C919DD49D908A8323E42596D4B161FFCBD408D65A1122BE4DAFAF8EA0D80D5AD: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, C919DD49D908A8323E42596D4B161FFCBD408D65A1122BE4DAFAF8EA0D80D5AD: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "fb48e00a-adce-4569-9bee-00b2dd92ec31",
                                      "parentUUID": "98e3f8ef-361f-4897-a9f4-491c743d295e",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "fb48e00a-adce-4569-9bee-00b2dd92ec31"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 0,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "8130b2f9-f8f1-42a3-acb0-dc5e0ac7baa4",
                                  "title": "测试销毁-[币种:5f4c7d5e] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5e] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 828,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "b02fda60-b9bf-46d3-a152-aafb52282533",
                                      "parentUUID": "8130b2f9-f8f1-42a3-acb0-dc5e0ac7baa4",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5e] [方式:jt_sendTransaction] 0380\t销毁标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "ce24bb11-743a-4d30-b809-4ab3428b7e17",
                                      "parentUUID": "8130b2f9-f8f1-42a3-acb0-dc5e0ac7baa4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5e] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 4E37251A74BEFF8F18A4DFE20457BDA3390B2391D793167D1A2880342B131146: tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 4E37251A74BEFF8F18A4DFE20457BDA3390B2391D793167D1A2880342B131146: tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "78aa8efd-1d35-4e47-9382-fb592d33629d",
                                      "parentUUID": "8130b2f9-f8f1-42a3-acb0-dc5e0ac7baa4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d5e] [方式:jt_sendTransaction] 0380\t销毁所有标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "6c5ea7c5-867d-4ac3-aed5-7aea90df7d6e",
                                      "parentUUID": "8130b2f9-f8f1-42a3-acb0-dc5e0ac7baa4",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "ce24bb11-743a-4d30-b809-4ab3428b7e17",
                                    "78aa8efd-1d35-4e47-9382-fb592d33629d",
                                    "6c5ea7c5-867d-4ac3-aed5-7aea90df7d6e"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 2,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "e4f22fff-aa4d-4903-bd92-fae8f66efa31",
                              "title": "标准可增发可销毁代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "9663751d-0560-4bb2-800e-41d490236a56",
                                  "title": "测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2163,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "bac777ab-4c18-4ebd-b1e8-ebbfd6f9b13f",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0270\t发行标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "e4574c53-4171-4020-9b8a-6f20a8cf1ed1",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可增发可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0290\t发行标准可增发可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "85279447-3149-4a2a-be2c-676bfd10c976",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可增发可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0300\t发行标准可增发可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1d093815-f39c-4b26-ba3d-0db0c860421f",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0310\t发行标准可增发可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ddd468b0-1926-48e1-a557-a27258dff4ce",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0310\t发行标准可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fbd3c44e-55e0-4a37-81c5-e62958287623",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0320\t发行标准可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ffca0a8b-a012-4049-bf11-7beb20afa8d8",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0320\t发行标准可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 9C5728B4AE96E48EFE01F7A84949225C569B7084A989B4AE921552F2777289B3: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 9C5728B4AE96E48EFE01F7A84949225C569B7084A989B4AE921552F2777289B3: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "fe0af9a8-4db0-49a5-8d46-4e1b5625de74",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "afe56b39-6b4b-476b-85c2-063452e740c3",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "890a7534-61a5-4835-9f8d-92047d9b89eb",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6bcaf636-7c3f-4cff-a015-5cd47cfbf2d6",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0c0482da-9eff-46fd-98dd-6cbac4831e9b",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "686231e5-32c3-46e1-956d-bc5cadd40db2",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b6b91d86-1034-4554-88c3-7c0722f83b2e",
                                      "parentUUID": "9663751d-0560-4bb2-800e-41d490236a56",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "85279447-3149-4a2a-be2c-676bfd10c976",
                                    "1d093815-f39c-4b26-ba3d-0db0c860421f",
                                    "ddd468b0-1926-48e1-a557-a27258dff4ce",
                                    "fbd3c44e-55e0-4a37-81c5-e62958287623",
                                    "ffca0a8b-a012-4049-bf11-7beb20afa8d8",
                                    "afe56b39-6b4b-476b-85c2-063452e740c3",
                                    "890a7534-61a5-4835-9f8d-92047d9b89eb",
                                    "6bcaf636-7c3f-4cff-a015-5cd47cfbf2d6",
                                    "0c0482da-9eff-46fd-98dd-6cbac4831e9b",
                                    "686231e5-32c3-46e1-956d-bc5cadd40db2",
                                    "b6b91d86-1034-4554-88c3-7c0722f83b2e"
                                  ],
                                  "failures": [
                                    "e4574c53-4171-4020-9b8a-6f20a8cf1ed1",
                                    "fe0af9a8-4db0-49a5-8d46-4e1b5625de74"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 6,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                  "title": "测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1995,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "50d19ea3-47f3-40e6-b9ba-6322a86e653c",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可增发可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0010\t发起标准可增发可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "45cac904-7fb0-4268-bb86-36f6b7af53f8",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "51598dc9-6034-4d6e-b35f-788d933e365f",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "0f3fa1a6-8c87-4f06-88f7-199e9d91325a",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9dde0a33-9bf7-471b-9b01-4cdc81a669bf",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0040\t发起标准可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "07ad7b7b-e53c-4be3-baca-a3ce93323245",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0050\t发起标准可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ca2c6925-6138-4b10-b2b1-a42dec79ebf4",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0060\t发起标准可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0cebf6b1-a984-45d3-8ac0-70c1e38e5206",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可增发可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0070\t发起标准可增发可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "65339b56-2d73-4be9-a22a-2da1be89cfa5",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0080\t发起标准可增发可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "23fc6a32-4c98-477d-bf30-6e3afa41967e",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0080\t发起标准可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1bcdfffa-a83a-4bd4-aded-784d5ee5fb19",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0090\t发起标准可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3ba66517-3b2a-44b3-94b9-791ce6f4c0f5",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0100\t发起标准可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "314564f3-6c9e-43f0-848a-ff2f99ef180b",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0110\t发起标准可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b805c276-2491-4eb2-8500-5c3226dca1ff",
                                      "parentUUID": "766f9cab-37fd-4b2c-bc55-da5e7a147ef3",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "51598dc9-6034-4d6e-b35f-788d933e365f",
                                    "9dde0a33-9bf7-471b-9b01-4cdc81a669bf",
                                    "07ad7b7b-e53c-4be3-baca-a3ce93323245",
                                    "ca2c6925-6138-4b10-b2b1-a42dec79ebf4",
                                    "0cebf6b1-a984-45d3-8ac0-70c1e38e5206",
                                    "65339b56-2d73-4be9-a22a-2da1be89cfa5",
                                    "23fc6a32-4c98-477d-bf30-6e3afa41967e",
                                    "1bcdfffa-a83a-4bd4-aded-784d5ee5fb19",
                                    "3ba66517-3b2a-44b3-94b9-791ce6f4c0f5",
                                    "314564f3-6c9e-43f0-848a-ff2f99ef180b",
                                    "b805c276-2491-4eb2-8500-5c3226dca1ff"
                                  ],
                                  "failures": [
                                    "45cac904-7fb0-4268-bb86-36f6b7af53f8",
                                    "0f3fa1a6-8c87-4f06-88f7-199e9d91325a"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "33a033cb-8fd9-4f17-83db-196d1655dde5",
                                  "title": "测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1192,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "e41a44dc-9bf6-460b-9222-c8c0745b5144",
                                      "parentUUID": "33a033cb-8fd9-4f17-83db-196d1655dde5",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "7721879f-39fb-441f-8977-0daa89f05522",
                                      "parentUUID": "33a033cb-8fd9-4f17-83db-196d1655dde5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "4d7b99c2-1600-47b4-8e42-4ec1ebd5597d",
                                      "parentUUID": "33a033cb-8fd9-4f17-83db-196d1655dde5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "56f1de84-2f70-4bab-9112-1b262879cc0d",
                                      "parentUUID": "33a033cb-8fd9-4f17-83db-196d1655dde5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "d8b4565c-6b4b-4252-a3a9-3a784e43505a",
                                      "parentUUID": "33a033cb-8fd9-4f17-83db-196d1655dde5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "dfab9c8c-aa2b-46cb-912d-c20729c18dac",
                                      "parentUUID": "33a033cb-8fd9-4f17-83db-196d1655dde5",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "7721879f-39fb-441f-8977-0daa89f05522",
                                    "4d7b99c2-1600-47b4-8e42-4ec1ebd5597d",
                                    "56f1de84-2f70-4bab-9112-1b262879cc0d",
                                    "d8b4565c-6b4b-4252-a3a9-3a784e43505a",
                                    "dfab9c8c-aa2b-46cb-912d-c20729c18dac"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 8,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                  "title": "测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1822,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "bbb35755-bf85-4ccd-adc5-b39a51d80035",
                                      "parentUUID": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "553b96b6-3926-45b6-bb77-cac9161522c6",
                                      "parentUUID": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "dfaf7823-1171-49a0-9d11-78a53afd9631",
                                      "parentUUID": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "b9ade5de-25d6-4e00-943b-ac44996ed2ee",
                                      "parentUUID": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "5b1d4dd4-b448-4761-873e-c25c8eb3159c",
                                      "parentUUID": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "be537b40-2185-41e8-9028-e90e0421c411",
                                      "parentUUID": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b8b58936-ae42-4d0f-a39b-4f90f96c9356",
                                      "parentUUID": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "ed77812b-293b-4ce7-8cdf-1a44277a3fa5",
                                      "parentUUID": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 675A89540187A8AB9D56B5CBAE2163442E730D71316674D911963790B9A92661: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 675A89540187A8AB9D56B5CBAE2163442E730D71316674D911963790B9A92661: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "ffe405c4-5bb3-4b4b-a855-92b57932dcae",
                                      "parentUUID": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "86958bbd-4186-4d0c-9d08-8275d1bfbedb",
                                      "parentUUID": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "387ccba4-594b-428f-bc44-5e49fd90b6d6",
                                      "parentUUID": "193eb24f-8d8f-486e-8412-ba5477f4e1e4",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "be537b40-2185-41e8-9028-e90e0421c411",
                                    "b8b58936-ae42-4d0f-a39b-4f90f96c9356"
                                  ],
                                  "failures": [
                                    "553b96b6-3926-45b6-bb77-cac9161522c6",
                                    "dfaf7823-1171-49a0-9d11-78a53afd9631",
                                    "b9ade5de-25d6-4e00-943b-ac44996ed2ee",
                                    "5b1d4dd4-b448-4761-873e-c25c8eb3159c",
                                    "ed77812b-293b-4ce7-8cdf-1a44277a3fa5",
                                    "ffe405c4-5bb3-4b4b-a855-92b57932dcae",
                                    "86958bbd-4186-4d0c-9d08-8275d1bfbedb",
                                    "387ccba4-594b-428f-bc44-5e49fd90b6d6"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 8,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "7d6e4a25-c6f2-4307-9bfa-8e25e3d9397e",
                                  "title": "测试增发-[币种:5f4c7d60] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d60] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 239,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "e688cfb7-5acc-4a38-90ed-2166f6803537",
                                      "parentUUID": "7d6e4a25-c6f2-4307-9bfa-8e25e3d9397e",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d60] [方式:jt_sendTransaction] 0370\t增发可增发的代币标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "4933a391-8558-4f8e-8a6a-9b3c562fb862",
                                      "parentUUID": "7d6e4a25-c6f2-4307-9bfa-8e25e3d9397e",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "4933a391-8558-4f8e-8a6a-9b3c562fb862"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "6de7095f-2070-4edb-b33b-9c22367231c0",
                                  "title": "测试销毁-[币种:5f4c7d60] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d60] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 679,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "11373c86-d8f5-47fa-94e7-7bae59265610",
                                      "parentUUID": "6de7095f-2070-4edb-b33b-9c22367231c0",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d60] [方式:jt_sendTransaction] 0380\t销毁标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "bf073184-404b-41b8-9203-5b2f0efe85eb",
                                      "parentUUID": "6de7095f-2070-4edb-b33b-9c22367231c0",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d60] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 75D9A1AAF9EEA271BAC10DC305C68800AA8989DCB7810E9AFFACEE2E3ED4A6AB: tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 75D9A1AAF9EEA271BAC10DC305C68800AA8989DCB7810E9AFFACEE2E3ED4A6AB: tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "9ecb5fa6-333d-404d-b879-8e4ebfeadd7a",
                                      "parentUUID": "6de7095f-2070-4edb-b33b-9c22367231c0",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d60] [方式:jt_sendTransaction] 0380\t销毁所有标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "656553b7-6efc-4876-a79e-01ff820a9fad",
                                      "parentUUID": "6de7095f-2070-4edb-b33b-9c22367231c0",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "bf073184-404b-41b8-9203-5b2f0efe85eb",
                                    "9ecb5fa6-333d-404d-b879-8e4ebfeadd7a",
                                    "656553b7-6efc-4876-a79e-01ff820a9fad"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 2,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "cc0ec41d-3f39-435c-980c-c97ee628d269",
                              "title": "自定Issuer一次性代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                  "title": "测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 3506,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "f5611cce-eb20-467e-98aa-84d6fa1f6357",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0270\t发行自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "79fdbd79-f6e3-479f-a633-2fd6586f2171",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer一次性代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0290\t发行自定Issuer一次性代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "27176c6d-edf3-475f-8f8c-fc30e2445e9f",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer一次性代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0300\t发行自定Issuer一次性代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "225552c6-1664-4155-a13a-bc115487384d",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer一次性代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer一次性代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "76d4bbf7-7faf-40c0-b5f1-b01f14025a2a",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer一次性代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer一次性代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c309a3f3-f74d-4a38-a7bf-0993a12015c1",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer一次性代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer一次性代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a087d90a-0388-498b-8466-da48c1b9b916",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 4124C4426CF407A6ABD67C640C45C468DDF52F3ECFD44F8C039B43EE9E9BD776: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 4124C4426CF407A6ABD67C640C45C468DDF52F3ECFD44F8C039B43EE9E9BD776: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "bca2d6af-2f3d-40b8-a297-1e9653ed2309",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ad47125d-215a-4e67-89ff-2a50cc7efaae",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "45c94316-620c-4a4c-b846-91d0a45ba10b",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3f7a0799-07b6-4771-a369-64949680d883",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9c2aacbe-df7a-451b-b4cc-afd77c1aeb95",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4be2c0e6-b344-480b-ad0d-a1b03407253a",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "32ff000b-9441-48b8-ac09-18589d450b7d",
                                      "parentUUID": "8ef4cf7b-3921-47ab-ab3f-aa766061013c",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "27176c6d-edf3-475f-8f8c-fc30e2445e9f",
                                    "225552c6-1664-4155-a13a-bc115487384d",
                                    "76d4bbf7-7faf-40c0-b5f1-b01f14025a2a",
                                    "c309a3f3-f74d-4a38-a7bf-0993a12015c1",
                                    "a087d90a-0388-498b-8466-da48c1b9b916",
                                    "ad47125d-215a-4e67-89ff-2a50cc7efaae",
                                    "45c94316-620c-4a4c-b846-91d0a45ba10b",
                                    "3f7a0799-07b6-4771-a369-64949680d883",
                                    "9c2aacbe-df7a-451b-b4cc-afd77c1aeb95",
                                    "4be2c0e6-b344-480b-ad0d-a1b03407253a",
                                    "32ff000b-9441-48b8-ac09-18589d450b7d"
                                  ],
                                  "failures": [
                                    "79fdbd79-f6e3-479f-a633-2fd6586f2171",
                                    "bca2d6af-2f3d-40b8-a297-1e9653ed2309"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 8,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                  "title": "测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1939,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "4de747e7-83a7-4249-94ea-ef65b0cb863b",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer一次性代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0010\t发起自定Issuer一次性代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "14b5ed66-db1d-4d5d-8e1a-8512d456487a",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "69617ea6-f766-4b42-b191-4c64a8def702",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "302a9089-1051-4c5c-be41-adf0d85458b0",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "479982b9-0dda-402b-a9f4-1ecadb469ad5",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0040\t发起自定Issuer一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5f2b9a1c-76da-4b0a-bbe6-2bdef35864e3",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0050\t发起自定Issuer一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "797103ca-aa3a-4e1a-8211-ab9736750121",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0060\t发起自定Issuer一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f4ec22fc-c278-4371-8936-7cf13124b2b9",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer一次性代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0070\t发起自定Issuer一次性代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7be46602-5c8d-44ec-a15a-7bf0648aa517",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer一次性代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer一次性代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4c691169-e125-47f6-ae00-d9f030939c83",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer一次性代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer一次性代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "90402904-cdec-440b-98b9-a1038602c6c3",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0090\t发起自定Issuer一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d929df39-b186-4bd9-81ad-e335698b537d",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0100\t发起自定Issuer一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8cc242ec-3a72-492e-b433-ea4ad83fe7f8",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0110\t发起自定Issuer一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fbb40781-8d7f-455c-9591-49f8eedea56e",
                                      "parentUUID": "9d191c28-76b8-43e3-a79a-4f58ace3faa2",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "69617ea6-f766-4b42-b191-4c64a8def702",
                                    "479982b9-0dda-402b-a9f4-1ecadb469ad5",
                                    "5f2b9a1c-76da-4b0a-bbe6-2bdef35864e3",
                                    "797103ca-aa3a-4e1a-8211-ab9736750121",
                                    "f4ec22fc-c278-4371-8936-7cf13124b2b9",
                                    "7be46602-5c8d-44ec-a15a-7bf0648aa517",
                                    "4c691169-e125-47f6-ae00-d9f030939c83",
                                    "90402904-cdec-440b-98b9-a1038602c6c3",
                                    "d929df39-b186-4bd9-81ad-e335698b537d",
                                    "8cc242ec-3a72-492e-b433-ea4ad83fe7f8",
                                    "fbb40781-8d7f-455c-9591-49f8eedea56e"
                                  ],
                                  "failures": [
                                    "14b5ed66-db1d-4d5d-8e1a-8512d456487a",
                                    "302a9089-1051-4c5c-be41-adf0d85458b0"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 8,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "6da4421c-81ae-48cd-8b03-326ddeeb553e",
                                  "title": "测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1182,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "cb40c6c9-26f5-41d1-bcdb-7877afbaff7e",
                                      "parentUUID": "6da4421c-81ae-48cd-8b03-326ddeeb553e",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "ad829fb9-c19a-444a-b8e8-c27d7a27c79c",
                                      "parentUUID": "6da4421c-81ae-48cd-8b03-326ddeeb553e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "677dd3c7-2263-47df-87b5-8a3f8ccdb8ea",
                                      "parentUUID": "6da4421c-81ae-48cd-8b03-326ddeeb553e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "7dd8a1b8-5692-4812-a370-94994cd65116",
                                      "parentUUID": "6da4421c-81ae-48cd-8b03-326ddeeb553e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "b1a3fc6a-9cd3-48a5-bcc8-855f6e307ddf",
                                      "parentUUID": "6da4421c-81ae-48cd-8b03-326ddeeb553e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "09391068-ad60-44e7-aa21-be11fc660229",
                                      "parentUUID": "6da4421c-81ae-48cd-8b03-326ddeeb553e",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "ad829fb9-c19a-444a-b8e8-c27d7a27c79c",
                                    "677dd3c7-2263-47df-87b5-8a3f8ccdb8ea",
                                    "7dd8a1b8-5692-4812-a370-94994cd65116",
                                    "b1a3fc6a-9cd3-48a5-bcc8-855f6e307ddf",
                                    "09391068-ad60-44e7-aa21-be11fc660229"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                  "title": "测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1880,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "f31ac6fe-a7aa-4ad1-9add-bddfb5247534",
                                      "parentUUID": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "efcde6ef-f034-4e62-8667-a4d237bcf95b",
                                      "parentUUID": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "b949d639-4fe6-4030-97db-1ff0ac450b00",
                                      "parentUUID": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "65263add-0224-4509-8093-1b201cc3675f",
                                      "parentUUID": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "8ba80a05-0c04-47bb-9bd9-faee9863b2c4",
                                      "parentUUID": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "89d87072-238b-4a0e-a5aa-a516777498cc",
                                      "parentUUID": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "730d9e84-87bd-45b0-a975-67b1c9ae154d",
                                      "parentUUID": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "4086955a-3e73-4d91-843f-0820c3f726e5",
                                      "parentUUID": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer一次性代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer一次性代币余额的整数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 6475427C27A9D87E47EF11309841786105821FCD751592250FE6384B60BC9443: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 6475427C27A9D87E47EF11309841786105821FCD751592250FE6384B60BC9443: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "6cc36e23-bb25-48f9-8875-ebbaff09dc48",
                                      "parentUUID": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "a78a5e13-1863-48fb-b882-397b66bc480f",
                                      "parentUUID": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "8f2c512d-998b-4cb7-a100-a6b5f5372306",
                                      "parentUUID": "1c32f709-4326-4e84-9ff9-ec0346e2bff8",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "89d87072-238b-4a0e-a5aa-a516777498cc",
                                    "730d9e84-87bd-45b0-a975-67b1c9ae154d"
                                  ],
                                  "failures": [
                                    "efcde6ef-f034-4e62-8667-a4d237bcf95b",
                                    "b949d639-4fe6-4030-97db-1ff0ac450b00",
                                    "65263add-0224-4509-8093-1b201cc3675f",
                                    "8ba80a05-0c04-47bb-9bd9-faee9863b2c4",
                                    "4086955a-3e73-4d91-843f-0820c3f726e5",
                                    "6cc36e23-bb25-48f9-8875-ebbaff09dc48",
                                    "a78a5e13-1863-48fb-b882-397b66bc480f",
                                    "8f2c512d-998b-4cb7-a100-a6b5f5372306"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 7,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "2221b1a2-5adb-4140-8a6d-08a378b82d2b",
                                  "title": "测试增发-[币种:5f4c7d62] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d62] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 234,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "062a1bcf-1545-4e06-8d87-2b9dfb34c9ce",
                                      "parentUUID": "2221b1a2-5adb-4140-8a6d-08a378b82d2b",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d62] [方式:jt_sendTransaction] 0370\t增发可增发的代币自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 03882ED11B84EE31B94094CB667F8D354A0DD1D8FC6C116C64851EB43ABB13EB: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 03882ED11B84EE31B94094CB667F8D354A0DD1D8FC6C116C64851EB43ABB13EB: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "2bb05f11-6aea-4e1e-a354-86cb211f3f6c",
                                      "parentUUID": "2221b1a2-5adb-4140-8a6d-08a378b82d2b",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "2bb05f11-6aea-4e1e-a354-86cb211f3f6c"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 0,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "a14e2edd-22c6-4f4a-bf2c-0029568f8b3e",
                                  "title": "测试销毁-[币种:5f4c7d62] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d62] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 665,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "24d8e6d7-34ee-461c-822f-5b466dd708fa",
                                      "parentUUID": "a14e2edd-22c6-4f4a-bf2c-0029568f8b3e",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d62] [方式:jt_sendTransaction] 0380\t销毁自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 623284B37A15C22407BDC075DD4B45C2492FD76040A49EFCBF021551CF2F6310: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 623284B37A15C22407BDC075DD4B45C2492FD76040A49EFCBF021551CF2F6310: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "7d452d94-b43e-4ddd-84ed-ac6477958834",
                                      "parentUUID": "a14e2edd-22c6-4f4a-bf2c-0029568f8b3e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d62] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 88224E96046FCAA5A1DF360A8AC650C3803A6215049873C963BAC196EEF0D6AA: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 88224E96046FCAA5A1DF360A8AC650C3803A6215049873C963BAC196EEF0D6AA: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "83564106-c693-478c-a73a-1bd5fd1f9f9e",
                                      "parentUUID": "a14e2edd-22c6-4f4a-bf2c-0029568f8b3e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d62] [方式:jt_sendTransaction] 0380\t销毁所有自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, D8AE5BD66FF063B1A6F5553C48F6AF13B12E09A30F44C89ACEE33D52945B9BEF: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, D8AE5BD66FF063B1A6F5553C48F6AF13B12E09A30F44C89ACEE33D52945B9BEF: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "7ffd6e62-ee72-4fd4-8dce-af7b3927b702",
                                      "parentUUID": "a14e2edd-22c6-4f4a-bf2c-0029568f8b3e",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "7d452d94-b43e-4ddd-84ed-ac6477958834",
                                    "83564106-c693-478c-a73a-1bd5fd1f9f9e",
                                    "7ffd6e62-ee72-4fd4-8dce-af7b3927b702"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "6ed2165b-02d8-4544-af4a-81a81a0bbaa6",
                              "title": "自定Issuer可增发代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                  "title": "测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 4777,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "e4a72bb7-0d86-4889-9a30-2793849ed4af",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0270\t发行自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "5624dad8-8b04-43ec-b081-af567985e270",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可增发代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0290\t发行自定Issuer可增发代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f6e188fe-4b7f-4973-b0a0-de5cb4d238d7",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可增发代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0300\t发行自定Issuer可增发代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d6e779d9-36c5-4a86-9923-4e2eaee0df2a",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可增发代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9788ebe0-7cc9-4e42-8c90-3f772e3b2949",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可增发代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c6cbb2dd-e86b-4e5d-8aaf-c7416294219b",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可增发代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "56a84e69-8a51-4eaf-b251-7f7ea7f1e23e",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 3CDA304BA21F765F924DE8AA88194FB67C8B499C2D7C69B7ED14F0A1F46F2F9A: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 3CDA304BA21F765F924DE8AA88194FB67C8B499C2D7C69B7ED14F0A1F46F2F9A: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "2241f3d4-9967-4d59-8a7c-011afbe8b31a",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "880e7d6c-0b5e-43c9-8163-f861066525e5",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d70a8306-9f52-4647-b3c2-0d34fe5dc804",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c47a6da9-c8ed-4fdc-a670-31c4087cff20",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6d212f43-a8f0-490f-a83c-f73e756d9ba2",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0ec8bb5f-fab1-4158-a97d-a0ff3bc59378",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7cddb488-8acb-4d7e-85f2-98763e2ad4bb",
                                      "parentUUID": "cbcb3155-faaa-4179-b961-4cd114e38f96",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "f6e188fe-4b7f-4973-b0a0-de5cb4d238d7",
                                    "d6e779d9-36c5-4a86-9923-4e2eaee0df2a",
                                    "9788ebe0-7cc9-4e42-8c90-3f772e3b2949",
                                    "c6cbb2dd-e86b-4e5d-8aaf-c7416294219b",
                                    "56a84e69-8a51-4eaf-b251-7f7ea7f1e23e",
                                    "880e7d6c-0b5e-43c9-8163-f861066525e5",
                                    "d70a8306-9f52-4647-b3c2-0d34fe5dc804",
                                    "c47a6da9-c8ed-4fdc-a670-31c4087cff20",
                                    "6d212f43-a8f0-490f-a83c-f73e756d9ba2",
                                    "0ec8bb5f-fab1-4158-a97d-a0ff3bc59378",
                                    "7cddb488-8acb-4d7e-85f2-98763e2ad4bb"
                                  ],
                                  "failures": [
                                    "5624dad8-8b04-43ec-b081-af567985e270",
                                    "2241f3d4-9967-4d59-8a7c-011afbe8b31a"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 6,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                  "title": "测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11875,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "82545c2a-5afa-44f2-879d-bc56ccb53589",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可增发代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0010\t发起自定Issuer可增发代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "1ea72512-b9f9-45bc-94a5-0bf0583f4085",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "244a3877-5755-4039-a66b-a4444d9813f9",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "39eee997-309a-4145-89ff-cf8a7afe8e93",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9bd1d102-698b-47b9-9539-616feb574d3c",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0040\t发起自定Issuer可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "dbced96b-84a7-4309-b70a-eea191ece09c",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0050\t发起自定Issuer可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b8a6391c-cb54-4a56-9188-e921e73d23ae",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0060\t发起自定Issuer可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 398439E9BCA301337D436B905FEDE433A492700D7EA83F5F54939A77D57A643C: terTIMEOUT No replies received and timeout.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 398439E9BCA301337D436B905FEDE433A492700D7EA83F5F54939A77D57A643C: terTIMEOUT No replies received and timeout.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "6ae5c36c-2ded-4e92-b155-0562f3155e7d",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可增发代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0070\t发起自定Issuer可增发代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9d1c10f4-ab12-452c-bb7f-d46cc723e123",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可增发代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "06aa4c53-d30f-465e-bb1f-3adef44fe852",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可增发代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "31165369-168a-491e-8ec7-9cf840d54675",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0090\t发起自定Issuer可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d7a51f19-9092-4697-9563-c6a441111dc3",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0100\t发起自定Issuer可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c528a08e-1025-4ba3-868c-b12ee76ae88f",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0110\t发起自定Issuer可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d22541b7-2d6e-4bbe-9f83-f4bb5375ce6b",
                                      "parentUUID": "f9861103-d62b-4b19-9adb-0037e55014fe",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "244a3877-5755-4039-a66b-a4444d9813f9",
                                    "9bd1d102-698b-47b9-9539-616feb574d3c",
                                    "dbced96b-84a7-4309-b70a-eea191ece09c",
                                    "b8a6391c-cb54-4a56-9188-e921e73d23ae",
                                    "9d1c10f4-ab12-452c-bb7f-d46cc723e123",
                                    "06aa4c53-d30f-465e-bb1f-3adef44fe852",
                                    "31165369-168a-491e-8ec7-9cf840d54675",
                                    "d7a51f19-9092-4697-9563-c6a441111dc3",
                                    "c528a08e-1025-4ba3-868c-b12ee76ae88f",
                                    "d22541b7-2d6e-4bbe-9f83-f4bb5375ce6b"
                                  ],
                                  "failures": [
                                    "1ea72512-b9f9-45bc-94a5-0bf0583f4085",
                                    "39eee997-309a-4145-89ff-cf8a7afe8e93",
                                    "6ae5c36c-2ded-4e92-b155-0562f3155e7d"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 8,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "23fa3d4e-49dd-41c9-8845-0e4a87203021",
                                  "title": "测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1359,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "18dea2a8-5e84-4c94-a9a2-60bbd7c26849",
                                      "parentUUID": "23fa3d4e-49dd-41c9-8845-0e4a87203021",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "b5b038e7-5eb8-4826-b3f6-4d8726c5fd9a",
                                      "parentUUID": "23fa3d4e-49dd-41c9-8845-0e4a87203021",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "3a9ba9b1-4a2e-45cf-b7dd-6973868af2d5",
                                      "parentUUID": "23fa3d4e-49dd-41c9-8845-0e4a87203021",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "60a5c36b-39f2-4cbf-85a5-d0dd374772e3",
                                      "parentUUID": "23fa3d4e-49dd-41c9-8845-0e4a87203021",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "12b48635-1184-4233-92c9-2d2183341b2f",
                                      "parentUUID": "23fa3d4e-49dd-41c9-8845-0e4a87203021",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "1444482f-49dc-472a-9f50-2592988c3bc3",
                                      "parentUUID": "23fa3d4e-49dd-41c9-8845-0e4a87203021",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "b5b038e7-5eb8-4826-b3f6-4d8726c5fd9a",
                                    "3a9ba9b1-4a2e-45cf-b7dd-6973868af2d5",
                                    "60a5c36b-39f2-4cbf-85a5-d0dd374772e3",
                                    "12b48635-1184-4233-92c9-2d2183341b2f",
                                    "1444482f-49dc-472a-9f50-2592988c3bc3"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 7,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                  "title": "测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1816,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "3022e6ee-caf2-4ced-aa2e-08db36b45d91",
                                      "parentUUID": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "eabf91e5-f2e9-4d2a-963b-7145f25a0be4",
                                      "parentUUID": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "93509214-7cfb-4400-887d-32e941307a79",
                                      "parentUUID": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "6af5bad1-8523-4152-9a3e-849c064bdf36",
                                      "parentUUID": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "7434234d-3a24-410a-9772-254611661023",
                                      "parentUUID": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ce08021f-e7d8-4a1f-acf7-074c621807f3",
                                      "parentUUID": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c5def316-f4a9-4520-b117-e2f18f98cd62",
                                      "parentUUID": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "cf0c9eca-fe0f-42d8-bc7e-ed59f72ab202",
                                      "parentUUID": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发代币余额的整数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, D0FF10D8F63045F132F2A3045B12B8C515E9CD7189257246D833EDD62AD4312E: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, D0FF10D8F63045F132F2A3045B12B8C515E9CD7189257246D833EDD62AD4312E: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "47981ae0-e9ab-4a14-971b-54671f0ab635",
                                      "parentUUID": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "ce724452-6380-4420-827b-7b2fd67ed26b",
                                      "parentUUID": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "0a6c6d2f-6f84-47b2-950b-0117b0aa73f8",
                                      "parentUUID": "c7a6ec38-8941-48ac-b528-f16e0ee0ad16",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "ce08021f-e7d8-4a1f-acf7-074c621807f3",
                                    "c5def316-f4a9-4520-b117-e2f18f98cd62"
                                  ],
                                  "failures": [
                                    "eabf91e5-f2e9-4d2a-963b-7145f25a0be4",
                                    "93509214-7cfb-4400-887d-32e941307a79",
                                    "6af5bad1-8523-4152-9a3e-849c064bdf36",
                                    "7434234d-3a24-410a-9772-254611661023",
                                    "cf0c9eca-fe0f-42d8-bc7e-ed59f72ab202",
                                    "47981ae0-e9ab-4a14-971b-54671f0ab635",
                                    "ce724452-6380-4420-827b-7b2fd67ed26b",
                                    "0a6c6d2f-6f84-47b2-950b-0117b0aa73f8"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 9,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "d60f4b0d-8735-4884-a594-53303d097068",
                                  "title": "测试增发-[币种:5f4c7d64] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d64] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 239,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "7bd7612d-151c-41e0-89fe-7b099eee9a18",
                                      "parentUUID": "d60f4b0d-8735-4884-a594-53303d097068",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d64] [方式:jt_sendTransaction] 0370\t增发可增发的代币自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "21df4fb9-96a1-4dcd-aa7e-ea7f2c752cad",
                                      "parentUUID": "d60f4b0d-8735-4884-a594-53303d097068",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "21df4fb9-96a1-4dcd-aa7e-ea7f2c752cad"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 2,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "54c0ea00-883d-4edc-89de-e90878bf3fcb",
                                  "title": "测试销毁-[币种:5f4c7d64] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d64] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 660,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "7768a90f-b267-466a-bc55-0f3351ec3540",
                                      "parentUUID": "54c0ea00-883d-4edc-89de-e90878bf3fcb",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d64] [方式:jt_sendTransaction] 0380\t销毁自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 75CC337C90BE44B7C20FF26104A5949EA961B41D44E464521252354968879524: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 75CC337C90BE44B7C20FF26104A5949EA961B41D44E464521252354968879524: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "1ea35474-d178-4868-9b09-25693221671b",
                                      "parentUUID": "54c0ea00-883d-4edc-89de-e90878bf3fcb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d64] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, F070A8CD7CB181FEAB94353AAA22078F2E7A16C911FC2A1B41C40FD6A5209F47: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, F070A8CD7CB181FEAB94353AAA22078F2E7A16C911FC2A1B41C40FD6A5209F47: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "2ffc4e97-9673-44f9-8019-238fc14924f4",
                                      "parentUUID": "54c0ea00-883d-4edc-89de-e90878bf3fcb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d64] [方式:jt_sendTransaction] 0380\t销毁所有自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, F8C46D1C08E2BC03BB32E258BF5E458A98C10223753D1AB2AE9DBBDFBBE5E653: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, F8C46D1C08E2BC03BB32E258BF5E458A98C10223753D1AB2AE9DBBDFBBE5E653: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "85fa25fa-9bcd-4640-81d1-fd9c704c715d",
                                      "parentUUID": "54c0ea00-883d-4edc-89de-e90878bf3fcb",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "1ea35474-d178-4868-9b09-25693221671b",
                                    "2ffc4e97-9673-44f9-8019-238fc14924f4",
                                    "85fa25fa-9bcd-4640-81d1-fd9c704c715d"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "f14fe9be-16d9-47ea-8baf-e3a55acf5c0f",
                              "title": "自定Issuer可销毁代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                  "title": "测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 3627,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "4a6d7ef3-33e8-44ed-8fe1-da16126d7807",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0270\t发行自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "73908644-a4d5-4ec4-9e0d-30eb5ef6784c",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0290\t发行自定Issuer可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e362324e-3d1c-4aa8-bd32-bc2dd84aabaf",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0300\t发行自定Issuer可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "766af59e-5035-4e5b-ae7c-314850256e83",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9387fb91-9a8e-4577-8647-a28b3603ac59",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b27762e5-6ac8-4e24-af12-855dc1345bf3",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "60c3ea80-3a7e-422d-91f3-512d2a7e1c83",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 51D27588D6BBB9DDFC44F5A1E2566105E1DD5A1062D0147246B42B1844FDD2ED: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 51D27588D6BBB9DDFC44F5A1E2566105E1DD5A1062D0147246B42B1844FDD2ED: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "e8182f2c-d760-41ff-b7d4-0a615c1d978a",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d6b7350f-de34-4e3c-b75e-41489b4bf6b1",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "90eddc04-03ae-464e-a66b-8d73adfc6a2f",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6d7216a9-e603-47ef-a8a2-aa0a3f5a63c8",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b53ee161-fda8-4dba-8e16-31a39b131558",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4c3a17d0-3985-4c2c-a5fe-d19b4a41b619",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9988d2cd-d2cc-4b83-819a-3d797fb7b532",
                                      "parentUUID": "64fec5ed-5551-4bf3-b373-325cc6b23dfe",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "e362324e-3d1c-4aa8-bd32-bc2dd84aabaf",
                                    "766af59e-5035-4e5b-ae7c-314850256e83",
                                    "9387fb91-9a8e-4577-8647-a28b3603ac59",
                                    "b27762e5-6ac8-4e24-af12-855dc1345bf3",
                                    "60c3ea80-3a7e-422d-91f3-512d2a7e1c83",
                                    "d6b7350f-de34-4e3c-b75e-41489b4bf6b1",
                                    "90eddc04-03ae-464e-a66b-8d73adfc6a2f",
                                    "6d7216a9-e603-47ef-a8a2-aa0a3f5a63c8",
                                    "b53ee161-fda8-4dba-8e16-31a39b131558",
                                    "4c3a17d0-3985-4c2c-a5fe-d19b4a41b619",
                                    "9988d2cd-d2cc-4b83-819a-3d797fb7b532"
                                  ],
                                  "failures": [
                                    "73908644-a4d5-4ec4-9e0d-30eb5ef6784c",
                                    "e8182f2c-d760-41ff-b7d4-0a615c1d978a"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 12,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                  "title": "测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2000,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "51df3ebf-f38f-47d9-8807-d32e799b347e",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0010\t发起自定Issuer可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "673f5b8b-a152-4934-9e8b-44c9f64cdfc1",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6e2b318f-8171-49a5-88bc-f282a1dc1aa9",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "ca566cd2-f77e-4ed8-8589-72d9239efeed",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "678ee3e0-61ff-4339-b40f-cf999b30d10b",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0040\t发起自定Issuer可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "144c8add-b057-475f-9653-f64dfeeb0a69",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0050\t发起自定Issuer可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3dd9f6d6-9b0d-4025-ac6d-9d349bd3b9aa",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0060\t发起自定Issuer可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 398439E9BCA301337D436B905FEDE433A492700D7EA83F5F54939A77D57A643C: terTIMEOUT No replies received and timeout.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 398439E9BCA301337D436B905FEDE433A492700D7EA83F5F54939A77D57A643C: terTIMEOUT No replies received and timeout.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "127b8529-8094-4578-83bf-586c89dc913b",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0070\t发起自定Issuer可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "61b76545-64df-4f55-8ed8-ee568ae72615",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "993d0e03-ed90-4ffa-aaae-4f5f243a0785",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1bc55617-36dd-4dbf-b634-d8be0d3e8d88",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0090\t发起自定Issuer可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "57fdb861-d06c-4045-bb94-1794912b4228",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0100\t发起自定Issuer可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7c413afb-e07e-4134-8fb7-411ca48299a7",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0110\t发起自定Issuer可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c1e62319-6818-47b5-a4c3-ead660d4fabd",
                                      "parentUUID": "d5fa8b0a-fe69-4066-b9d6-d5838d54720e",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "6e2b318f-8171-49a5-88bc-f282a1dc1aa9",
                                    "678ee3e0-61ff-4339-b40f-cf999b30d10b",
                                    "144c8add-b057-475f-9653-f64dfeeb0a69",
                                    "3dd9f6d6-9b0d-4025-ac6d-9d349bd3b9aa",
                                    "61b76545-64df-4f55-8ed8-ee568ae72615",
                                    "993d0e03-ed90-4ffa-aaae-4f5f243a0785",
                                    "1bc55617-36dd-4dbf-b634-d8be0d3e8d88",
                                    "57fdb861-d06c-4045-bb94-1794912b4228",
                                    "7c413afb-e07e-4134-8fb7-411ca48299a7",
                                    "c1e62319-6818-47b5-a4c3-ead660d4fabd"
                                  ],
                                  "failures": [
                                    "673f5b8b-a152-4934-9e8b-44c9f64cdfc1",
                                    "ca566cd2-f77e-4ed8-8589-72d9239efeed",
                                    "127b8529-8094-4578-83bf-586c89dc913b"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 15,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "7ba8f58e-5208-4627-bf0c-e313c26f9f35",
                                  "title": "测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1114,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "c1ae0d25-982f-4d4a-8770-1056928e7021",
                                      "parentUUID": "7ba8f58e-5208-4627-bf0c-e313c26f9f35",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "aac3590d-fdff-4d0a-8995-143abcb6e61b",
                                      "parentUUID": "7ba8f58e-5208-4627-bf0c-e313c26f9f35",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "269add8f-633a-4591-8012-0957ccacbb3a",
                                      "parentUUID": "7ba8f58e-5208-4627-bf0c-e313c26f9f35",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "305dd974-6c3d-4c2d-b335-cd47c505bb73",
                                      "parentUUID": "7ba8f58e-5208-4627-bf0c-e313c26f9f35",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "6a6751c2-a46e-4e41-8d2f-4efee119c7e0",
                                      "parentUUID": "7ba8f58e-5208-4627-bf0c-e313c26f9f35",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "3070d616-3373-4b17-801a-cdd865bfc6be",
                                      "parentUUID": "7ba8f58e-5208-4627-bf0c-e313c26f9f35",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "aac3590d-fdff-4d0a-8995-143abcb6e61b",
                                    "269add8f-633a-4591-8012-0957ccacbb3a",
                                    "305dd974-6c3d-4c2d-b335-cd47c505bb73",
                                    "6a6751c2-a46e-4e41-8d2f-4efee119c7e0",
                                    "3070d616-3373-4b17-801a-cdd865bfc6be"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                  "title": "测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1781,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "341a3470-d65c-4bfc-b07e-15e47f014779",
                                      "parentUUID": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "4d1fbdc5-708a-4b48-8c87-4df50e0f0066",
                                      "parentUUID": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "3d4425ed-e766-4f13-919a-9be26fa23cb9",
                                      "parentUUID": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "86be496c-beb5-47f5-8d67-0b2ba7840b5c",
                                      "parentUUID": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "b654fd5a-f937-4d2c-abe1-bb94d44e64c6",
                                      "parentUUID": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "59df6a83-4709-4b9d-a603-1a4c4e5479af",
                                      "parentUUID": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6813ac88-c210-42c9-a78e-a28cd3c0b99f",
                                      "parentUUID": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "3762d833-6b08-454c-8054-cce401027ebb",
                                      "parentUUID": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 120F7B6D929650E09204A17D0280EB66138A4E78BE8FFE1579F7423AF9EBBADF: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 120F7B6D929650E09204A17D0280EB66138A4E78BE8FFE1579F7423AF9EBBADF: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "b034a157-6c2a-4bf5-bc8c-a4d75259f476",
                                      "parentUUID": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "0592d448-5c3e-4ec5-97e4-d73feaa60f2b",
                                      "parentUUID": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "aac5f5e5-384e-4690-9c90-64bd47e5cf3a",
                                      "parentUUID": "4dc08144-5366-48b1-96d2-3cf1bf9578de",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "59df6a83-4709-4b9d-a603-1a4c4e5479af",
                                    "6813ac88-c210-42c9-a78e-a28cd3c0b99f"
                                  ],
                                  "failures": [
                                    "4d1fbdc5-708a-4b48-8c87-4df50e0f0066",
                                    "3d4425ed-e766-4f13-919a-9be26fa23cb9",
                                    "86be496c-beb5-47f5-8d67-0b2ba7840b5c",
                                    "b654fd5a-f937-4d2c-abe1-bb94d44e64c6",
                                    "3762d833-6b08-454c-8054-cce401027ebb",
                                    "b034a157-6c2a-4bf5-bc8c-a4d75259f476",
                                    "0592d448-5c3e-4ec5-97e4-d73feaa60f2b",
                                    "aac5f5e5-384e-4690-9c90-64bd47e5cf3a"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 9,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c683ccf3-dab4-4e5e-8e15-0fb79af7c80c",
                                  "title": "测试增发-[币种:5f4c7d66] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d66] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 220,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "e8265506-af9f-4819-8ccb-30b2ad3d44e9",
                                      "parentUUID": "c683ccf3-dab4-4e5e-8e15-0fb79af7c80c",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d66] [方式:jt_sendTransaction] 0370\t增发可增发的代币自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 2F453AC25E45A51944F2DA97E4DFB54F3F60CCC7715ECAE46BCFCC87C4A33C17: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 2F453AC25E45A51944F2DA97E4DFB54F3F60CCC7715ECAE46BCFCC87C4A33C17: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "683507de-9562-4e3c-a224-6715bfdbeef2",
                                      "parentUUID": "c683ccf3-dab4-4e5e-8e15-0fb79af7c80c",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "683507de-9562-4e3c-a224-6715bfdbeef2"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 2,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "25ec0eac-7f81-46f9-9ec9-16179606fdb5",
                                  "title": "测试销毁-[币种:5f4c7d66] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d66] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 673,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "20c60fc6-1717-4410-b7da-1f408d6eafc4",
                                      "parentUUID": "25ec0eac-7f81-46f9-9ec9-16179606fdb5",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d66] [方式:jt_sendTransaction] 0380\t销毁自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "55cb9c75-f3d3-4172-90f6-5e887b37fe1f",
                                      "parentUUID": "25ec0eac-7f81-46f9-9ec9-16179606fdb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d66] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 8B6EB5CFFB2E8F509BA9C1962D3C3FCDC5B76D4372D0AC1630FD8B7E1F046CDF: tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 8B6EB5CFFB2E8F509BA9C1962D3C3FCDC5B76D4372D0AC1630FD8B7E1F046CDF: tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "48ba3bee-64d7-4e83-8e7d-61c279e029f5",
                                      "parentUUID": "25ec0eac-7f81-46f9-9ec9-16179606fdb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d66] [方式:jt_sendTransaction] 0380\t销毁所有自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "e40a827c-93ed-4aaa-ad65-e2e6adde009c",
                                      "parentUUID": "25ec0eac-7f81-46f9-9ec9-16179606fdb5",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "55cb9c75-f3d3-4172-90f6-5e887b37fe1f",
                                    "48ba3bee-64d7-4e83-8e7d-61c279e029f5",
                                    "e40a827c-93ed-4aaa-ad65-e2e6adde009c"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "608d3d33-acde-41f8-a24d-e0773154823f",
                              "title": "自定Issuer可增发可销毁代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                  "title": "测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2427,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "c528d116-bcd7-4274-b7e9-05d9be377e21",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0270\t发行自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "7c73ecdb-151b-4521-8ef4-0a2cf62f78a3",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可增发可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0290\t发行自定Issuer可增发可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "819a351b-744a-4a4d-90b7-a1dd520afc96",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可增发可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0300\t发行自定Issuer可增发可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "50c4eb40-c0e1-46f1-945f-3c7a61614436",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可增发可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "febeda14-f4d4-4fca-a91e-f35358345b43",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0d16d5f3-e513-4381-b37f-a7ab686c8f6f",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "78b428af-0e16-4683-904d-54299e6f1876",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 79B904FB2DEBCD5C7164F14D1DDF94B690F22E8A8E1569E2BD00A03B748BE3DD: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 79B904FB2DEBCD5C7164F14D1DDF94B690F22E8A8E1569E2BD00A03B748BE3DD: tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "79ceafed-fb60-424b-abec-2223022742e9",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3d9e13e6-91db-4184-bc35-5e05d15c2ec3",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a422cf40-c310-4993-86a9-d5e4598da83b",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4a26e86b-c9b5-4688-8e21-542f35cdd7fc",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cf25d7a8-ad73-4884-a3aa-7c23ce4b990f",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ddc3fa8e-6883-44d3-aa0d-c3a162327d32",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "346a4b44-455f-4bad-9bc5-34e411a82b5f",
                                      "parentUUID": "11c41a47-1b9a-4d34-907a-f2f7fe5598f6",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "819a351b-744a-4a4d-90b7-a1dd520afc96",
                                    "50c4eb40-c0e1-46f1-945f-3c7a61614436",
                                    "febeda14-f4d4-4fca-a91e-f35358345b43",
                                    "0d16d5f3-e513-4381-b37f-a7ab686c8f6f",
                                    "78b428af-0e16-4683-904d-54299e6f1876",
                                    "3d9e13e6-91db-4184-bc35-5e05d15c2ec3",
                                    "a422cf40-c310-4993-86a9-d5e4598da83b",
                                    "4a26e86b-c9b5-4688-8e21-542f35cdd7fc",
                                    "cf25d7a8-ad73-4884-a3aa-7c23ce4b990f",
                                    "ddc3fa8e-6883-44d3-aa0d-c3a162327d32",
                                    "346a4b44-455f-4bad-9bc5-34e411a82b5f"
                                  ],
                                  "failures": [
                                    "7c73ecdb-151b-4521-8ef4-0a2cf62f78a3",
                                    "79ceafed-fb60-424b-abec-2223022742e9"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                  "title": "测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1961,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "f0de051d-3cc2-4c32-a5a8-4bb22f4c0950",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可增发可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0010\t发起自定Issuer可增发可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "a85d2ce3-2b01-49ff-adf8-e9ce71d102d8",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "465b52cf-5b95-405d-82fb-8e510d521c9b",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "bca84a23-a0ef-4ce7-9c59-95060ee54ce7",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0e37f79c-641c-484d-95af-0972cdd7dfdd",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0040\t发起自定Issuer可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3da3927f-f75b-4649-b8e2-45ee4e4974f2",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0050\t发起自定Issuer可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "710a0588-d4f8-4740-8f18-cd1fb2fce37c",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0060\t发起自定Issuer可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "081fbb2b-9acf-4c13-a291-667b3c142735",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可增发可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0070\t发起自定Issuer可增发可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b0b913d3-8326-43b0-be59-aa7a11b7b181",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2a7c540a-eeff-4a48-a5c2-e1517097c7c2",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e506bbbf-cb59-4b0d-aeb2-dda7bbaac51c",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0090\t发起自定Issuer可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fe9b12fd-b062-47c7-9c80-e1cc20e63190",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0100\t发起自定Issuer可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "39df21d6-8487-4824-a091-8949d08b9a56",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0110\t发起自定Issuer可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "eeabf7a1-9337-4277-83ba-7cffcf11e967",
                                      "parentUUID": "adfedd26-b28a-401c-80e2-66ecf91d239e",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "465b52cf-5b95-405d-82fb-8e510d521c9b",
                                    "0e37f79c-641c-484d-95af-0972cdd7dfdd",
                                    "3da3927f-f75b-4649-b8e2-45ee4e4974f2",
                                    "710a0588-d4f8-4740-8f18-cd1fb2fce37c",
                                    "081fbb2b-9acf-4c13-a291-667b3c142735",
                                    "b0b913d3-8326-43b0-be59-aa7a11b7b181",
                                    "2a7c540a-eeff-4a48-a5c2-e1517097c7c2",
                                    "e506bbbf-cb59-4b0d-aeb2-dda7bbaac51c",
                                    "fe9b12fd-b062-47c7-9c80-e1cc20e63190",
                                    "39df21d6-8487-4824-a091-8949d08b9a56",
                                    "eeabf7a1-9337-4277-83ba-7cffcf11e967"
                                  ],
                                  "failures": [
                                    "a85d2ce3-2b01-49ff-adf8-e9ce71d102d8",
                                    "bca84a23-a0ef-4ce7-9c59-95060ee54ce7"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 9,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "71ea8a1d-424b-4ed3-a125-65b1e3fb5367",
                                  "title": "测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1114,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "4dca5cb3-6031-42a7-b623-f689aabc14f7",
                                      "parentUUID": "71ea8a1d-424b-4ed3-a125-65b1e3fb5367",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "cb2cf3ba-0df5-4ad7-908b-b9fc7d4376e9",
                                      "parentUUID": "71ea8a1d-424b-4ed3-a125-65b1e3fb5367",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "238d2806-3bb9-4b12-8b38-7dbc86ec1125",
                                      "parentUUID": "71ea8a1d-424b-4ed3-a125-65b1e3fb5367",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "d0b13430-121e-4873-a6c9-bab927117cc4",
                                      "parentUUID": "71ea8a1d-424b-4ed3-a125-65b1e3fb5367",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "a8b055cd-f143-4da8-8a1b-41d041f5f227",
                                      "parentUUID": "71ea8a1d-424b-4ed3-a125-65b1e3fb5367",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "6d6b481c-ba92-43cd-a840-1365d23cd5a5",
                                      "parentUUID": "71ea8a1d-424b-4ed3-a125-65b1e3fb5367",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "cb2cf3ba-0df5-4ad7-908b-b9fc7d4376e9",
                                    "238d2806-3bb9-4b12-8b38-7dbc86ec1125",
                                    "d0b13430-121e-4873-a6c9-bab927117cc4",
                                    "a8b055cd-f143-4da8-8a1b-41d041f5f227",
                                    "6d6b481c-ba92-43cd-a840-1365d23cd5a5"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                  "title": "测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1856,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "306db65e-aa3c-478d-8aa3-6eafb1213488",
                                      "parentUUID": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "9d75d93d-aeb1-46b7-91cd-1577491be46c",
                                      "parentUUID": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "3f986387-396d-4481-8a97-aae22c9826fb",
                                      "parentUUID": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "4bd2dc81-1cd3-42b8-9f07-8d79d52226ce",
                                      "parentUUID": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "8f688b13-a7e4-445f-bf82-00818cdfad64",
                                      "parentUUID": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1f5c790e-6b01-4215-82a9-e3ee79277eca",
                                      "parentUUID": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3fe9c538-7750-4f01-b932-9e1d5dd407c7",
                                      "parentUUID": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "64aa6b1e-8855-44f7-b8cc-102af833d94e",
                                      "parentUUID": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, E12B5C01D56B448263851AED96F717FD774C4CCB37AE9706208CBDE030ADC65F: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, E12B5C01D56B448263851AED96F717FD774C4CCB37AE9706208CBDE030ADC65F: terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "e5d2c471-f01c-4f87-82f1-2dc432b9d5a4",
                                      "parentUUID": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "abb63545-920d-46e6-a571-8d398fee4a0b",
                                      "parentUUID": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "44556d4a-44fb-4aa0-aa73-4c2296643234",
                                      "parentUUID": "c4eeeda3-a470-42a6-b0dd-653e5694845c",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "1f5c790e-6b01-4215-82a9-e3ee79277eca",
                                    "3fe9c538-7750-4f01-b932-9e1d5dd407c7"
                                  ],
                                  "failures": [
                                    "9d75d93d-aeb1-46b7-91cd-1577491be46c",
                                    "3f986387-396d-4481-8a97-aae22c9826fb",
                                    "4bd2dc81-1cd3-42b8-9f07-8d79d52226ce",
                                    "8f688b13-a7e4-445f-bf82-00818cdfad64",
                                    "64aa6b1e-8855-44f7-b8cc-102af833d94e",
                                    "e5d2c471-f01c-4f87-82f1-2dc432b9d5a4",
                                    "abb63545-920d-46e6-a571-8d398fee4a0b",
                                    "44556d4a-44fb-4aa0-aa73-4c2296643234"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 7,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "75c178ec-ae0b-4650-b0b3-2ff153ca5c22",
                                  "title": "测试增发-[币种:5f4c7d68] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d68] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 216,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "0700743f-a5cb-4fee-8e77-556bf989d6f8",
                                      "parentUUID": "75c178ec-ae0b-4650-b0b3-2ff153ca5c22",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试增发-[币种:5f4c7d68] [方式:jt_sendTransaction] 0370\t增发可增发的代币自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "d7ff5cad-6f00-40aa-adc2-696fa6ee113c",
                                      "parentUUID": "75c178ec-ae0b-4650-b0b3-2ff153ca5c22",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "d7ff5cad-6f00-40aa-adc2-696fa6ee113c"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 0,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c5cde253-d91b-41d9-a8da-54f1c1c4249b",
                                  "title": "测试销毁-[币种:5f4c7d68] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d68] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 771,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "8fd9736a-63d3-4b8f-96d5-14f1c789d957",
                                      "parentUUID": "c5cde253-d91b-41d9-a8da-54f1c1c4249b",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d68] [方式:jt_sendTransaction] 0380\t销毁自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "34a0554c-eb4c-4f17-9e2d-6a530ac78b66",
                                      "parentUUID": "c5cde253-d91b-41d9-a8da-54f1c1c4249b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d68] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 56ECF71C69130B2BE0EF69FE08F360BB6797B09B642D2FA78E9076E290AC67EF: tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jNdTZPWrSbTgYpnC4DxpHQBLSxosCDuYQC, 56ECF71C69130B2BE0EF69FE08F360BB6797B09B642D2FA78E9076E290AC67EF: tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "ba3482ef-a224-4ed8-aa5a-6e75ca65915e",
                                      "parentUUID": "c5cde253-d91b-41d9-a8da-54f1c1c4249b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5f4c7d68] [方式:jt_sendTransaction] 0380\t销毁所有自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "e2cb76b2-b889-4ff5-91f9-fd6b4c9e636b",
                                      "parentUUID": "c5cde253-d91b-41d9-a8da-54f1c1c4249b",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "34a0554c-eb4c-4f17-9e2d-6a530ac78b66",
                                    "ba3482ef-a224-4ed8-aa5a-6e75ca65915e",
                                    "e2cb76b2-b889-4ff5-91f9-fd6b4c9e636b"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "cb566a6f-0dbf-4ebf-9c9b-feca2b4a9bfd",
                              "title": "全局CNYT测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                  "title": "测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2009,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "bf92512e-15f2-4d57-baff-b638af2fbcf6",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起全局CNYT有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0010\t发起全局CNYT有效交易_01",
                                      "timedOut": false,
                                      "duration": 1145,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "47bb9b25-44fa-4548-8220-df85b99b841e",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起全局CNYT无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0030\t发起全局CNYT无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b0583861-1c2d-4ff6-b358-de1f7f8e7122",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起全局CNYT无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0030\t发起全局CNYT无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "0f38d3eb-571a-425e-aa7a-a84c806a54b0",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起全局CNYT无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0030\t发起全局CNYT无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e9d8b432-e5e0-4a42-9c5c-c3fbf19c6646",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起全局CNYT无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0040\t发起全局CNYT无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "be9ea07c-453e-476a-b262-b11e717270e7",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起全局CNYT无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0050\t发起全局CNYT无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ef80ad53-173a-4431-adff-35ff7ac0b70b",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起全局CNYT无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0060\t发起全局CNYT无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c0b12e3c-d058-4dcc-b053-4fa26860816c",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起全局CNYT无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0070\t发起全局CNYT无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f773c3e6-2f94-4246-954e-4410c4181615",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起全局CNYT无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0080\t发起全局CNYT无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7be4ee08-d1a7-47e0-8353-57b84eb61c32",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起全局CNYT无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0080\t发起全局CNYT无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0f797a45-cf22-4331-a22d-d2e05e8ecad1",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起全局CNYT无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0090\t发起全局CNYT无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8199cf6d-2330-4900-9be9-7272a0e2532e",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起全局CNYT无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0100\t发起全局CNYT无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8dcaa8a8-ca18-4f77-8037-f09874e063fd",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起全局CNYT无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_sendTransaction] 0110\t发起全局CNYT无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b727961b-b43a-4c58-9ede-b73048d5c8a5",
                                      "parentUUID": "ec28ae53-8e06-4bea-9e71-4d8040b8da19",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "47bb9b25-44fa-4548-8220-df85b99b841e",
                                    "b0583861-1c2d-4ff6-b358-de1f7f8e7122",
                                    "e9d8b432-e5e0-4a42-9c5c-c3fbf19c6646",
                                    "be9ea07c-453e-476a-b262-b11e717270e7",
                                    "ef80ad53-173a-4431-adff-35ff7ac0b70b",
                                    "c0b12e3c-d058-4dcc-b053-4fa26860816c",
                                    "f773c3e6-2f94-4246-954e-4410c4181615",
                                    "7be4ee08-d1a7-47e0-8353-57b84eb61c32",
                                    "0f797a45-cf22-4331-a22d-d2e05e8ecad1",
                                    "8199cf6d-2330-4900-9be9-7272a0e2532e",
                                    "8dcaa8a8-ca18-4f77-8037-f09874e063fd",
                                    "b727961b-b43a-4c58-9ede-b73048d5c8a5"
                                  ],
                                  "failures": [
                                    "0f38d3eb-571a-425e-aa7a-a84c806a54b0"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1150,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "da14473d-b398-496d-ad6e-46c1bb6f854d",
                                  "title": "测试交易memo-[币种:全局CNYT] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1139,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "a6c1a82e-118e-4ca6-8dbe-2fde8e42bdf9",
                                      "parentUUID": "da14473d-b398-496d-ad6e-46c1bb6f854d",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 4366,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9041a490-b12c-4b33-9a45-41d32f04b94a",
                                      "parentUUID": "da14473d-b398-496d-ad6e-46c1bb6f854d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 71,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "411b7fd7-b7e9-4057-b438-8c4650513148",
                                      "parentUUID": "da14473d-b398-496d-ad6e-46c1bb6f854d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 73,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cb80366c-2f70-4d7e-9f91-354a61efb2fa",
                                      "parentUUID": "da14473d-b398-496d-ad6e-46c1bb6f854d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 73,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "74e0abb3-b267-4fd8-8a73-23296c184698",
                                      "parentUUID": "da14473d-b398-496d-ad6e-46c1bb6f854d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 73,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "df313a75-aa02-410c-a592-6c147c123e19",
                                      "parentUUID": "da14473d-b398-496d-ad6e-46c1bb6f854d",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "9041a490-b12c-4b33-9a45-41d32f04b94a",
                                    "411b7fd7-b7e9-4057-b438-8c4650513148",
                                    "cb80366c-2f70-4d7e-9f91-354a61efb2fa",
                                    "74e0abb3-b267-4fd8-8a73-23296c184698",
                                    "df313a75-aa02-410c-a592-6c147c123e19"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4656,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                  "title": "测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2007,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "a8c3cc5d-2035-40f5-ae6f-c83b3bcc785b",
                                      "parentUUID": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 4358,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cf9159fa-0f1f-489d-a464-b9bf59eb0b9f",
                                      "parentUUID": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 72,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "15446a84-34bd-4967-b0f0-da95bbcb42f2",
                                      "parentUUID": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 72,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "35ba4129-aec9-490c-9d7a-dbb5a94cdd37",
                                      "parentUUID": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 70,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "06c54cba-630b-477e-9841-5e509e28d946",
                                      "parentUUID": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "98b17704-20a1-4170-8707-e80167e078b9",
                                      "parentUUID": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c54fba21-bd89-4efb-af4c-ceef2949f412",
                                      "parentUUID": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "da8db6e7-fbea-466a-9c77-a9fc3afcee32",
                                      "parentUUID": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包全局CNYT余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包全局CNYT余额的整数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bdff3b64-a65c-400f-8230-78934a31393c",
                                      "parentUUID": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "948b3191-7c2d-4b43-8b3f-82d19f3fbbb1",
                                      "parentUUID": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "f8f9cbcd-5eab-407e-846e-b3e084a4988d",
                                      "parentUUID": "1b7f73f5-02c4-4840-8ebf-86b6e84de013",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "cf9159fa-0f1f-489d-a464-b9bf59eb0b9f",
                                    "15446a84-34bd-4967-b0f0-da95bbcb42f2",
                                    "35ba4129-aec9-490c-9d7a-dbb5a94cdd37",
                                    "06c54cba-630b-477e-9841-5e509e28d946",
                                    "98b17704-20a1-4170-8707-e80167e078b9",
                                    "c54fba21-bd89-4efb-af4c-ceef2949f412",
                                    "bdff3b64-a65c-400f-8230-78934a31393c"
                                  ],
                                  "failures": [
                                    "da8db6e7-fbea-466a-9c77-a9fc3afcee32",
                                    "948b3191-7c2d-4b43-8b3f-82d19f3fbbb1",
                                    "f8f9cbcd-5eab-407e-846e-b3e084a4988d"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4576,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "0e7fba26-19da-4191-a8e6-19d2fa1fb0dd",
                                  "title": "测试增发-[币种:CNYT] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试增发-[币种:CNYT] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 229,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "9e91b7c3-bbf1-4d98-bf27-30cce2e7f3e9",
                                      "parentUUID": "0e7fba26-19da-4191-a8e6-19d2fa1fb0dd",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币全局CNYT",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试增发-[币种:CNYT] [方式:jt_sendTransaction] 0370\t增发可增发的代币全局CNYT",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "e4497f27-6a28-4549-8def-de588636b040",
                                      "parentUUID": "0e7fba26-19da-4191-a8e6-19d2fa1fb0dd",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "e4497f27-6a28-4549-8def-de588636b040"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 0,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "1680c133-400f-4878-b926-d7e7fc188859",
                                  "title": "测试销毁-[币种:CNYT] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试销毁-[币种:CNYT] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 661,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "3fd106c6-4be0-4d57-b69f-5ef8b32b9491",
                                      "parentUUID": "1680c133-400f-4878-b926-d7e7fc188859",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁全局CNYT",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试销毁-[币种:CNYT] [方式:jt_sendTransaction] 0380\t销毁全局CNYT",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "ff7efc82-382e-4f81-a3bd-8b09e46d7985",
                                      "parentUUID": "1680c133-400f-4878-b926-d7e7fc188859",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量全局CNYT",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试销毁-[币种:CNYT] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量全局CNYT",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jpRhBgu4KZAyW9pMv4ckrxVYSvgG9ZuSVm, E0DE8BB9893164F5AA3FB9A2B79DF8156A39BA680C7BB9B1C7105F8D605D499E: tefSYMBOL_USED Symbol has been used.' to include 'telINSUF_FUND Fund insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jpRhBgu4KZAyW9pMv4ckrxVYSvgG9ZuSVm, E0DE8BB9893164F5AA3FB9A2B79DF8156A39BA680C7BB9B1C7105F8D605D499E: tefSYMBOL_USED Symbol has been used.' to include 'telINSUF_FUND Fund insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "163003ac-e695-4970-bb6b-ef14e939b8ff",
                                      "parentUUID": "1680c133-400f-4878-b926-d7e7fc188859",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有全局CNYT",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 全局CNYT测试：jt_sendTransaction 测试销毁-[币种:CNYT] [方式:jt_sendTransaction] 0380\t销毁所有全局CNYT",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:374:25)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "1fa77f15-bc0a-4261-b966-6fa831883c6d",
                                      "parentUUID": "1680c133-400f-4878-b926-d7e7fc188859",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "ff7efc82-382e-4f81-a3bd-8b09e46d7985",
                                    "163003ac-e695-4970-bb6b-ef14e939b8ff",
                                    "1fa77f15-bc0a-4261-b966-6fa831883c6d"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            }
                          ],
                          "passes": [],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 0,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "42d3e950-6453-4237-af88-8ef9064c1634",
                          "title": "代币测试：jt_signTransaction",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [],
                          "suites": [
                            {
                              "uuid": "0ee787b0-97c5-4fa6-a93e-f312aef2a1cb",
                              "title": "标准一次性代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                  "title": "测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2455,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "9c2595fd-6a6e-4364-90f0-df47fc08f521",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0270\t发行标准一次性代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "921d60fa-c84c-41b9-a97d-dbe129f30fc4",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准一次性代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0290\t发行标准一次性代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "adcc91df-df7b-44b0-8777-110a3bd50c61",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准一次性代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0300\t发行标准一次性代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ff7b60cf-0851-45ba-8a86-4c2e70236ba3",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准一次性代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0310\t发行标准一次性代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected true to equal false",
                                        "estack": "AssertionError: expected true to equal false\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:575:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- true\n+ false\n"
                                      },
                                      "uuid": "42999f4e-c027-474f-9bd2-0932fc49373a",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准一次性代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0310\t发行标准一次性代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0ada27ed-543e-4c3a-bb15-2cbce7f02cf9",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准一次性代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0320\t发行标准一次性代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "04dc2366-024c-4b80-8ae7-a48a9efc5cd3",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0320\t发行标准一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: AA6F73AC653206AE97AA9CC7BDE57388A09340929C7A45C8996F2B8F771CD0ED, blob 12000122800000002400019d3b68400000000000000a6cd6e316a9e9a40e80000000000000356466396364663000000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402204b60cdd83a72f99810db1ade618d5443d9aefe1d5e383566a72b2c2bf0b90d3302203f7aecfc3f4b1da7d0e18b83ce8c13f71f95de289d80b7287e7414243604f3cf8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333632041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: AA6F73AC653206AE97AA9CC7BDE57388A09340929C7A45C8996F2B8F771CD0ED, blob 12000122800000002400019d3b68400000000000000a6cd6e316a9e9a40e80000000000000356466396364663000000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402204b60cdd83a72f99810db1ade618d5443d9aefe1d5e383566a72b2c2bf0b90d3302203f7aecfc3f4b1da7d0e18b83ce8c13f71f95de289d80b7287e7414243604f3cf8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333632041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "d5e885ee-a486-412b-9a97-90b015c5e6a8",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0330\t发行标准一次性代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "92881f42-2859-46fd-aa81-bac268a8b355",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0330\t发行标准一次性代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "43cf18dc-4a3e-46f3-90a7-517e07636c02",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0330\t发行标准一次性代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "89ee3561-8fa6-4377-975c-9a690c914d7d",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bbbe585f-e360-4a30-a221-6268fb14568c",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1ce1b004-6661-4b16-80eb-b25ff9291d61",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "aa7aeba1-ff3b-4a5a-b2f4-763153a1c474",
                                      "parentUUID": "7b58d32b-640c-4046-a1b1-6211429a6143",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "adcc91df-df7b-44b0-8777-110a3bd50c61",
                                    "ff7b60cf-0851-45ba-8a86-4c2e70236ba3",
                                    "0ada27ed-543e-4c3a-bb15-2cbce7f02cf9",
                                    "04dc2366-024c-4b80-8ae7-a48a9efc5cd3",
                                    "92881f42-2859-46fd-aa81-bac268a8b355",
                                    "43cf18dc-4a3e-46f3-90a7-517e07636c02",
                                    "89ee3561-8fa6-4377-975c-9a690c914d7d",
                                    "bbbe585f-e360-4a30-a221-6268fb14568c",
                                    "1ce1b004-6661-4b16-80eb-b25ff9291d61",
                                    "aa7aeba1-ff3b-4a5a-b2f4-763153a1c474"
                                  ],
                                  "failures": [
                                    "921d60fa-c84c-41b9-a97d-dbe129f30fc4",
                                    "42999f4e-c027-474f-9bd2-0932fc49373a",
                                    "d5e885ee-a486-412b-9a97-90b015c5e6a8"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 8,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                  "title": "测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2172,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "32b9f77f-6df8-4f0d-bb6a-f6158697c55e",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准一次性代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0010\t发起标准一次性代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "c9135aa8-178b-4c21-8522-ce679d410fd9",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0030\t发起标准一次性代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5f489beb-cf9f-4755-bb13-b69359a68f14",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0030\t发起标准一次性代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "e3ab3488-06dc-4b07-b59b-200adad3547f",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0030\t发起标准一次性代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c43a7d59-6399-488d-be60-f03f1b7f36c6",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0040\t发起标准一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3b3c9023-51ae-4fa4-ab70-0600fb6aa62f",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0050\t发起标准一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "032110df-3b8f-44be-ad5d-4c734192826e",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0060\t发起标准一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "161875a7-af7a-457d-a512-07be9c96ce2a",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准一次性代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0070\t发起标准一次性代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a81321fb-1a4d-42c1-b85d-c664e796b849",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准一次性代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0080\t发起标准一次性代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0ad22323-6abe-452a-9a56-265e69d62b4e",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准一次性代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0080\t发起标准一次性代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fba72a5b-4d2b-4e5a-85a7-b3a16604fcae",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0090\t发起标准一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "eacdd0f9-17e5-4a00-a5b5-5fbd1ebc829f",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0100\t发起标准一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "79eff904-02e1-427f-984f-0f60857b53db",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0110\t发起标准一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7d0cf47a-4a4b-45e1-889c-03c8045d9a7b",
                                      "parentUUID": "61f86894-8050-475d-83f6-bb4d8a96440a",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "5f489beb-cf9f-4755-bb13-b69359a68f14",
                                    "c43a7d59-6399-488d-be60-f03f1b7f36c6",
                                    "3b3c9023-51ae-4fa4-ab70-0600fb6aa62f",
                                    "032110df-3b8f-44be-ad5d-4c734192826e",
                                    "161875a7-af7a-457d-a512-07be9c96ce2a",
                                    "a81321fb-1a4d-42c1-b85d-c664e796b849",
                                    "0ad22323-6abe-452a-9a56-265e69d62b4e",
                                    "fba72a5b-4d2b-4e5a-85a7-b3a16604fcae",
                                    "eacdd0f9-17e5-4a00-a5b5-5fbd1ebc829f",
                                    "79eff904-02e1-427f-984f-0f60857b53db",
                                    "7d0cf47a-4a4b-45e1-889c-03c8045d9a7b"
                                  ],
                                  "failures": [
                                    "c9135aa8-178b-4c21-8522-ce679d410fd9",
                                    "e3ab3488-06dc-4b07-b59b-200adad3547f"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 11,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "4e10058f-a2f3-40aa-a8d6-48ee1753b5b4",
                                  "title": "测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1560,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "26a1c32b-9658-4b15-8656-c0e6118a2660",
                                      "parentUUID": "4e10058f-a2f3-40aa-a8d6-48ee1753b5b4",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "371608dc-c395-4c1c-ab8f-00afb1ea38d4",
                                      "parentUUID": "4e10058f-a2f3-40aa-a8d6-48ee1753b5b4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "002687b8-2fdb-4572-a2fd-dc5a7295b296",
                                      "parentUUID": "4e10058f-a2f3-40aa-a8d6-48ee1753b5b4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "77c745f6-c20b-486a-9d3d-80f0c5d2d662",
                                      "parentUUID": "4e10058f-a2f3-40aa-a8d6-48ee1753b5b4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "f4b65d55-fe62-4a20-8e65-ac07681378da",
                                      "parentUUID": "4e10058f-a2f3-40aa-a8d6-48ee1753b5b4",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "6dca68b1-50b0-4888-ab6b-bcc260fa3a51",
                                      "parentUUID": "4e10058f-a2f3-40aa-a8d6-48ee1753b5b4",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "371608dc-c395-4c1c-ab8f-00afb1ea38d4",
                                    "002687b8-2fdb-4572-a2fd-dc5a7295b296",
                                    "77c745f6-c20b-486a-9d3d-80f0c5d2d662",
                                    "f4b65d55-fe62-4a20-8e65-ac07681378da",
                                    "6dca68b1-50b0-4888-ab6b-bcc260fa3a51"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                  "title": "测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2335,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "e3927d15-1e57-4001-bfc1-ffa9beb13be7",
                                      "parentUUID": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "16194632-415d-4351-b7ed-b929f6436e5f",
                                      "parentUUID": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "4ede63f3-0a78-4e6a-91b4-1cc32378a276",
                                      "parentUUID": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "90a92080-cfee-4f09-9f03-d82a7ccd25b1",
                                      "parentUUID": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "26e4c120-b75d-457e-9b9a-931cdbfce114",
                                      "parentUUID": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e236accb-f5b2-487f-9c29-cbdc249a08c5",
                                      "parentUUID": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3653ab14-34a3-4954-b27b-d652e069b985",
                                      "parentUUID": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "8514a79d-1d81-457a-8fad-b2b7fffe8dc3",
                                      "parentUUID": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准一次性代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准一次性代币余额的整数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 169ADEC576079D7CB310B88703A22F9049AD19A146EC7E92048580993590B00A, blob 12000022800000002400019d3b61d4838d7ea4c68000000000000000356634633764366100000000000000000000000000000000000000000000000000006840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100802433d4df33526d208c972da92cadbdc56622d468d0d963bbf6d2339880cd0e0220261abafb20987b5bed5a303980aeb85869d655e53498ee80c0c97032506df8c08114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 169ADEC576079D7CB310B88703A22F9049AD19A146EC7E92048580993590B00A, blob 12000022800000002400019d3b61d4838d7ea4c68000000000000000356634633764366100000000000000000000000000000000000000000000000000006840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100802433d4df33526d208c972da92cadbdc56622d468d0d963bbf6d2339880cd0e0220261abafb20987b5bed5a303980aeb85869d655e53498ee80c0c97032506df8c08114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "d5d1a50e-d632-4b56-a6f8-570ebcdaca28",
                                      "parentUUID": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "7f00fb3c-1afd-45a6-8c1d-dd93a92e1c72",
                                      "parentUUID": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "7cbc7e5e-4d08-4e02-9476-2f716efa3991",
                                      "parentUUID": "6ef460c3-7737-4651-818b-ac1ed8312e53",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "e236accb-f5b2-487f-9c29-cbdc249a08c5",
                                    "3653ab14-34a3-4954-b27b-d652e069b985"
                                  ],
                                  "failures": [
                                    "16194632-415d-4351-b7ed-b929f6436e5f",
                                    "4ede63f3-0a78-4e6a-91b4-1cc32378a276",
                                    "90a92080-cfee-4f09-9f03-d82a7ccd25b1",
                                    "26e4c120-b75d-457e-9b9a-931cdbfce114",
                                    "8514a79d-1d81-457a-8fad-b2b7fffe8dc3",
                                    "d5d1a50e-d632-4b56-a6f8-570ebcdaca28",
                                    "7f00fb3c-1afd-45a6-8c1d-dd93a92e1c72",
                                    "7cbc7e5e-4d08-4e02-9476-2f716efa3991"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 7,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "0e02beec-d167-4243-bb8a-b76a377358c5",
                                  "title": "测试增发-[币种:5f4c7d6a] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试增发-[币种:5f4c7d6a] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 301,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "03bf1578-7d89-482c-9393-35073eed5fc1",
                                      "parentUUID": "0e02beec-d167-4243-bb8a-b76a377358c5",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试增发-[币种:5f4c7d6a] [方式:jt_signTransaction] 0370\t增发可增发的代币标准一次性代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 5B97A29D9CEEF1E8F4102B545556FA70C5F5115D3BF553DCD9C29C8AF63F6087, blob 12000122800000002400019d3b68400000000000000a6cd49ff973cafa8000000000000000356634633764366100000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402202c5760678b0698e91cef5b059bb7ddc15529bd3efbfbdb3ec233150dad4ad6230220533c8159893e2cf683818bb1b9f5210c3e6cca1697e1e0518b08a047863ef9278114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333632041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 5B97A29D9CEEF1E8F4102B545556FA70C5F5115D3BF553DCD9C29C8AF63F6087, blob 12000122800000002400019d3b68400000000000000a6cd49ff973cafa8000000000000000356634633764366100000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402202c5760678b0698e91cef5b059bb7ddc15529bd3efbfbdb3ec233150dad4ad6230220533c8159893e2cf683818bb1b9f5210c3e6cca1697e1e0518b08a047863ef9278114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333632041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "23b8a8fb-20cb-4091-a164-e5ce85beacd3",
                                      "parentUUID": "0e02beec-d167-4243-bb8a-b76a377358c5",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "23b8a8fb-20cb-4091-a164-e5ce85beacd3"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 0,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "402d2aec-129b-4139-881f-d2f98524b1a8",
                                  "title": "测试销毁-[币种:5f4c7d6a] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6a] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 862,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "ae04272d-f373-43e0-92f6-2d24a67b399e",
                                      "parentUUID": "402d2aec-129b-4139-881f-d2f98524b1a8",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6a] [方式:jt_signTransaction] 0380\t销毁标准一次性代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 2ECEE7CAEBB2221452E53AFD99D1B1AF5D6A85871D83CC2827F7B9A164173317, blob 12000122800000002400019d3b68400000000000000a6c949ff973cafa8000000000000000356634633764366100000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744630440220638de5c87f5a61cb4663157cdd52e4627a35e6cec09eef887a280782cc58a6990220286fb2f4bbc09f24cdb5135201c401deb1b8f4b771cf0dadd360f95720bf75498114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333632041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 2ECEE7CAEBB2221452E53AFD99D1B1AF5D6A85871D83CC2827F7B9A164173317, blob 12000122800000002400019d3b68400000000000000a6c949ff973cafa8000000000000000356634633764366100000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744630440220638de5c87f5a61cb4663157cdd52e4627a35e6cec09eef887a280782cc58a6990220286fb2f4bbc09f24cdb5135201c401deb1b8f4b771cf0dadd360f95720bf75498114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333632041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "bbe048ba-f5bc-4307-b5e5-572045a2a0b2",
                                      "parentUUID": "402d2aec-129b-4139-881f-d2f98524b1a8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6a] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准一次性代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 185BBCA060350E33DFD545EDD2CC7D83F3B06DD99F9DBE90AD6CD2C2A6620DD0, blob 12000122800000002400019d3b68400000000000000a6c98a316a9e9a40e80000000000000356634633764366100000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402207416ba07be2765b034dcc26f324722fd1a98a93337ff6e950e4c74b22d7ab703022036261de389e51b8cacc166950118ac236a659b65c9cb6a97deafc3465be5551d8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333632041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 185BBCA060350E33DFD545EDD2CC7D83F3B06DD99F9DBE90AD6CD2C2A6620DD0, blob 12000122800000002400019d3b68400000000000000a6c98a316a9e9a40e80000000000000356634633764366100000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402207416ba07be2765b034dcc26f324722fd1a98a93337ff6e950e4c74b22d7ab703022036261de389e51b8cacc166950118ac236a659b65c9cb6a97deafc3465be5551d8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333632041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "ad2ce94a-c224-4343-882f-a98750b3d6a1",
                                      "parentUUID": "402d2aec-129b-4139-881f-d2f98524b1a8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6a] [方式:jt_signTransaction] 0380\t销毁所有标准一次性代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: F9FA9CDDD0B5F70AACCA8E128C5D98D6EA8B1AB764DB048AD20716D2808D0F80, blob 12000122800000002400019d3b68400000000000000a6c97118b54f4c44ba0000000000000356634633764366100000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402205da36544fe129c381141566d464d479d8872e0815bcc1058e1dfd5ce0d4c1bc40220192ebbcac2b7e9c4ab8c4f106744dd643950dd6ef2b7a1fa15ba78effd8f26988114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333632041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: F9FA9CDDD0B5F70AACCA8E128C5D98D6EA8B1AB764DB048AD20716D2808D0F80, blob 12000122800000002400019d3b68400000000000000a6c97118b54f4c44ba0000000000000356634633764366100000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402205da36544fe129c381141566d464d479d8872e0815bcc1058e1dfd5ce0d4c1bc40220192ebbcac2b7e9c4ab8c4f106744dd643950dd6ef2b7a1fa15ba78effd8f26988114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333632041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "833e088a-f0a7-4d08-965b-c9d8fda5b828",
                                      "parentUUID": "402d2aec-129b-4139-881f-d2f98524b1a8",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "bbe048ba-f5bc-4307-b5e5-572045a2a0b2",
                                    "ad2ce94a-c224-4343-882f-a98750b3d6a1",
                                    "833e088a-f0a7-4d08-965b-c9d8fda5b828"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "bca333f6-859e-45fa-9431-c1cdaad25ce9",
                              "title": "标准可增发代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                  "title": "测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 3836,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "41350723-708b-42b3-a97c-215ab2ea3cec",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0270\t发行标准可增发代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "f0376b32-a5b5-404d-8281-11bf77dde5c9",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可增发代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0290\t发行标准可增发代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e3f3e54d-9064-4293-afcc-35da1dd0b009",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可增发代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0300\t发行标准可增发代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "88ee3db4-7001-438b-826c-17e9c1de273d",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0310\t发行标准可增发代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected true to equal false",
                                        "estack": "AssertionError: expected true to equal false\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:575:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- true\n+ false\n"
                                      },
                                      "uuid": "c937577e-7ace-4494-8dfe-7c243f0336a2",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0310\t发行标准可增发代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b31c7d74-872e-4724-8c5a-ca64fa037ff5",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0320\t发行标准可增发代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f9eb135b-f294-42ac-85ff-746122b531d4",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0320\t发行标准可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: F94A6A5E00C2A0E9C62B9EF10F5FC83B2503A60583CC9DD67F2AAA8CF80B9CAF, blob 12000122800100002400019d3b68400000000000000a6cd6e316a9e9a40e80000000000000356466396364663000000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744630440220009374d61bc67cdbef1f09e25f6834ed33f62fcc77986cc10bdd1fb681f5973202207914a58a89d3d5387e57973f9792240be31dd715971114aa70b2d2030e137bfb8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333634041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: F94A6A5E00C2A0E9C62B9EF10F5FC83B2503A60583CC9DD67F2AAA8CF80B9CAF, blob 12000122800100002400019d3b68400000000000000a6cd6e316a9e9a40e80000000000000356466396364663000000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744630440220009374d61bc67cdbef1f09e25f6834ed33f62fcc77986cc10bdd1fb681f5973202207914a58a89d3d5387e57973f9792240be31dd715971114aa70b2d2030e137bfb8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333634041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "11d4fa0d-a44d-4158-b88b-e3c88c6eb390",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0330\t发行标准可增发代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fe3d010d-3b0d-4ed3-9720-fe2c1d0d693d",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0330\t发行标准可增发代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "241a2220-760c-4735-bf46-dd084a8749fe",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0330\t发行标准可增发代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c58cd80d-afa3-4ba1-ad2e-a22aae5e15eb",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9d95c9ba-97ec-4d5d-839c-a232538fe74d",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c4ae3fdf-3ec5-4ee1-854b-d1e93cb5621a",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "827cf951-0ac3-4f05-8a9e-b4d0cf9e20e2",
                                      "parentUUID": "66f43b23-ce2a-420b-acc4-0b0ad998c666",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "e3f3e54d-9064-4293-afcc-35da1dd0b009",
                                    "88ee3db4-7001-438b-826c-17e9c1de273d",
                                    "b31c7d74-872e-4724-8c5a-ca64fa037ff5",
                                    "f9eb135b-f294-42ac-85ff-746122b531d4",
                                    "fe3d010d-3b0d-4ed3-9720-fe2c1d0d693d",
                                    "241a2220-760c-4735-bf46-dd084a8749fe",
                                    "c58cd80d-afa3-4ba1-ad2e-a22aae5e15eb",
                                    "9d95c9ba-97ec-4d5d-839c-a232538fe74d",
                                    "c4ae3fdf-3ec5-4ee1-854b-d1e93cb5621a",
                                    "827cf951-0ac3-4f05-8a9e-b4d0cf9e20e2"
                                  ],
                                  "failures": [
                                    "f0376b32-a5b5-404d-8281-11bf77dde5c9",
                                    "c937577e-7ace-4494-8dfe-7c243f0336a2",
                                    "11d4fa0d-a44d-4158-b88b-e3c88c6eb390"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 6,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                  "title": "测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2081,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "647fac54-9910-4282-b500-2a040efef89d",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可增发代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0010\t发起标准可增发代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "7a5bb5f3-d99c-4d1e-8ff2-7bdb4cae717c",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0030\t发起标准可增发代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bb38bf99-68b2-4ef9-860e-f8e20491aca6",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0030\t发起标准可增发代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "c06e95a1-f6cb-4211-8e30-5ba151990899",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0030\t发起标准可增发代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "de20355c-1a13-4460-9a3c-4e63b5de7c6d",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0040\t发起标准可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c86999c0-81a9-4d15-9b95-0f2e6e3c795b",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0050\t发起标准可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "44861506-330e-4b13-aa98-3fc020931c20",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0060\t发起标准可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "02a9572b-2333-48bd-9a0f-1485799caa39",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可增发代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0070\t发起标准可增发代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "79f2d601-7cf2-417d-9e73-aaddfcf19501",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0080\t发起标准可增发代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c3cf790f-ebcf-4300-8253-56f6c11d852c",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0080\t发起标准可增发代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "10810d28-0953-498d-8532-56cfd2bc045a",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0090\t发起标准可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "41ebfdd1-a370-4699-9020-d26ef3a24b88",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0100\t发起标准可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6397530a-2bdd-40ac-be61-a32d3a7f828e",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0110\t发起标准可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "be9c7fd2-5ea3-480e-9187-217fcb655d7e",
                                      "parentUUID": "8099c04d-78df-42e2-876b-5995323bf6b5",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "bb38bf99-68b2-4ef9-860e-f8e20491aca6",
                                    "de20355c-1a13-4460-9a3c-4e63b5de7c6d",
                                    "c86999c0-81a9-4d15-9b95-0f2e6e3c795b",
                                    "44861506-330e-4b13-aa98-3fc020931c20",
                                    "02a9572b-2333-48bd-9a0f-1485799caa39",
                                    "79f2d601-7cf2-417d-9e73-aaddfcf19501",
                                    "c3cf790f-ebcf-4300-8253-56f6c11d852c",
                                    "10810d28-0953-498d-8532-56cfd2bc045a",
                                    "41ebfdd1-a370-4699-9020-d26ef3a24b88",
                                    "6397530a-2bdd-40ac-be61-a32d3a7f828e",
                                    "be9c7fd2-5ea3-480e-9187-217fcb655d7e"
                                  ],
                                  "failures": [
                                    "7a5bb5f3-d99c-4d1e-8ff2-7bdb4cae717c",
                                    "c06e95a1-f6cb-4211-8e30-5ba151990899"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "09d16373-7bb9-4133-91ff-94933363e5b2",
                                  "title": "测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1515,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "9bf68a1d-09c7-4982-a05b-e886cf3f3d59",
                                      "parentUUID": "09d16373-7bb9-4133-91ff-94933363e5b2",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "90849053-54f7-402a-a42c-075ccd09723b",
                                      "parentUUID": "09d16373-7bb9-4133-91ff-94933363e5b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "40e38efe-112f-4403-91f5-264454f68174",
                                      "parentUUID": "09d16373-7bb9-4133-91ff-94933363e5b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "260b2a82-cd9b-4c12-ad29-a8157ee71957",
                                      "parentUUID": "09d16373-7bb9-4133-91ff-94933363e5b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "45dc4dd5-037d-4e39-ba86-745621b98732",
                                      "parentUUID": "09d16373-7bb9-4133-91ff-94933363e5b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "497ca7a7-1298-4dda-957a-c1d8288fc74b",
                                      "parentUUID": "09d16373-7bb9-4133-91ff-94933363e5b2",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "90849053-54f7-402a-a42c-075ccd09723b",
                                    "40e38efe-112f-4403-91f5-264454f68174",
                                    "260b2a82-cd9b-4c12-ad29-a8157ee71957",
                                    "45dc4dd5-037d-4e39-ba86-745621b98732",
                                    "497ca7a7-1298-4dda-957a-c1d8288fc74b"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                  "title": "测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2276,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "87732542-88af-4ab6-9900-909334c36eb8",
                                      "parentUUID": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "76e4e0e7-252a-4864-ae62-736e09ba27dc",
                                      "parentUUID": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "fc883099-bc8b-4df0-a027-d7dd9499c217",
                                      "parentUUID": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "36512429-18c5-4f78-b275-58e74bd80a21",
                                      "parentUUID": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "d9291744-1185-461c-b20f-68826615fdb9",
                                      "parentUUID": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6a632d61-8cc4-4a5e-9012-222d398dac59",
                                      "parentUUID": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "dc44789b-9822-4061-8b5d-1003f15062c6",
                                      "parentUUID": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "3f4cdbec-7864-4680-9b6d-6572edc1bc76",
                                      "parentUUID": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发代币余额的整数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: A8B0F824768F6BDE997E7BA46D84DBD999850C27CBB795F4DA118006CD538991, blob 12000022800000002400019d3b61d4838d7ea4c68000000000000000356634633764366300000000000000000000000000000000000000000000000000006840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100eb2d27bec989a4a930b907dfef2ff12ad0fc64aed722235c64afdd23829c6ac30220288cec79fb76211b0701228d2053bb4d50bcd1282fa50a8d7516bdcf2d7a13708114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: A8B0F824768F6BDE997E7BA46D84DBD999850C27CBB795F4DA118006CD538991, blob 12000022800000002400019d3b61d4838d7ea4c68000000000000000356634633764366300000000000000000000000000000000000000000000000000006840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100eb2d27bec989a4a930b907dfef2ff12ad0fc64aed722235c64afdd23829c6ac30220288cec79fb76211b0701228d2053bb4d50bcd1282fa50a8d7516bdcf2d7a13708114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "1de8d5be-b811-42ce-ac5f-264c07be13d9",
                                      "parentUUID": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "bae5df95-f01b-4dd0-9466-421f5890fa77",
                                      "parentUUID": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "ab85af9a-2757-433f-bae6-d8be7316275c",
                                      "parentUUID": "54e55663-d0c8-4933-9a9f-83470a81c68b",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "6a632d61-8cc4-4a5e-9012-222d398dac59",
                                    "dc44789b-9822-4061-8b5d-1003f15062c6"
                                  ],
                                  "failures": [
                                    "76e4e0e7-252a-4864-ae62-736e09ba27dc",
                                    "fc883099-bc8b-4df0-a027-d7dd9499c217",
                                    "36512429-18c5-4f78-b275-58e74bd80a21",
                                    "d9291744-1185-461c-b20f-68826615fdb9",
                                    "3f4cdbec-7864-4680-9b6d-6572edc1bc76",
                                    "1de8d5be-b811-42ce-ac5f-264c07be13d9",
                                    "bae5df95-f01b-4dd0-9466-421f5890fa77",
                                    "ab85af9a-2757-433f-bae6-d8be7316275c"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 11,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "747ec565-96e5-441f-b322-520db6ae99cb",
                                  "title": "测试增发-[币种:5f4c7d6c] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试增发-[币种:5f4c7d6c] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 288,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "bb012333-dea7-4526-8477-117d3ba45f6d",
                                      "parentUUID": "747ec565-96e5-441f-b322-520db6ae99cb",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试增发-[币种:5f4c7d6c] [方式:jt_signTransaction] 0370\t增发可增发的代币标准可增发代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "206cdf56-3f1e-4259-94d7-e75e82e4dc2c",
                                      "parentUUID": "747ec565-96e5-441f-b322-520db6ae99cb",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "206cdf56-3f1e-4259-94d7-e75e82e4dc2c"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 0,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "d88376eb-9b6d-460a-bad8-8f4097fde6ac",
                                  "title": "测试销毁-[币种:5f4c7d6c] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6c] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 868,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "d59f91cb-bf39-4771-b987-73245dc157b6",
                                      "parentUUID": "d88376eb-9b6d-460a-bad8-8f4097fde6ac",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6c] [方式:jt_signTransaction] 0380\t销毁标准可增发代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: EF993B11BB85421C8E522EC5138360D80431F92B81062338E5BB6498E3EE8BCA, blob 12000122800100002400019d3b68400000000000000a6c949ff973cafa8000000000000000356634633764366300000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374463044022035b106d69b2cc56733961d3cad115d500f9ba241498b5dcfd4bae28c1497b7ef02202e3e871bca84b3289455703c6cd0c6ecba298faf28a326c3a6719a532d6a81428114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333634041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: EF993B11BB85421C8E522EC5138360D80431F92B81062338E5BB6498E3EE8BCA, blob 12000122800100002400019d3b68400000000000000a6c949ff973cafa8000000000000000356634633764366300000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374463044022035b106d69b2cc56733961d3cad115d500f9ba241498b5dcfd4bae28c1497b7ef02202e3e871bca84b3289455703c6cd0c6ecba298faf28a326c3a6719a532d6a81428114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333634041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "cefd81a9-155b-4f46-b194-7688b7cf5bc5",
                                      "parentUUID": "d88376eb-9b6d-460a-bad8-8f4097fde6ac",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6c] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可增发代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 47C943C8DD4A14BCDAE5C28372EC848D1CD627135391523D6B61CFF2EDD7C078, blob 12000122800100002400019d3b68400000000000000a6c98a316a9e9a40e80000000000000356634633764366300000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744630440220268f890b2a9513c7126f46f85b9b6a7b0dd70ffde0274f6bb14c588ba2a4b846022034f58952bdf3f8812cf5669f4a0264eb81fe6f62d9c880b18833d7fc92d86f388114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333634041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 47C943C8DD4A14BCDAE5C28372EC848D1CD627135391523D6B61CFF2EDD7C078, blob 12000122800100002400019d3b68400000000000000a6c98a316a9e9a40e80000000000000356634633764366300000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744630440220268f890b2a9513c7126f46f85b9b6a7b0dd70ffde0274f6bb14c588ba2a4b846022034f58952bdf3f8812cf5669f4a0264eb81fe6f62d9c880b18833d7fc92d86f388114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333634041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "f79dc353-8eb9-4162-907e-2e91ad1cba95",
                                      "parentUUID": "d88376eb-9b6d-460a-bad8-8f4097fde6ac",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6c] [方式:jt_signTransaction] 0380\t销毁所有标准可增发代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 9FAAD60BC74A3807DE1A3F2FDE46A19873F4B77EA3E8C632FC3A4C944B1E5EA4, blob 12000122800100002400019d3b68400000000000000a6c97118b54f4c44ba0000000000000356634633764366300000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100e3ddbc963e4af09e121641ca2d8df55e4b185fa7edf66a5de9cbeef4967cb095022067889c2019aa65323cd3e3a7796b809a58d708f15d69a6d94f0cfdbbfa1510038114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333634041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 9FAAD60BC74A3807DE1A3F2FDE46A19873F4B77EA3E8C632FC3A4C944B1E5EA4, blob 12000122800100002400019d3b68400000000000000a6c97118b54f4c44ba0000000000000356634633764366300000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100e3ddbc963e4af09e121641ca2d8df55e4b185fa7edf66a5de9cbeef4967cb095022067889c2019aa65323cd3e3a7796b809a58d708f15d69a6d94f0cfdbbfa1510038114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333634041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "ef60f90a-c49a-4f76-bcdf-98c22624c1bf",
                                      "parentUUID": "d88376eb-9b6d-460a-bad8-8f4097fde6ac",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "cefd81a9-155b-4f46-b194-7688b7cf5bc5",
                                    "f79dc353-8eb9-4162-907e-2e91ad1cba95",
                                    "ef60f90a-c49a-4f76-bcdf-98c22624c1bf"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "74a0ac04-e1f1-4412-8de7-a57d84ff1124",
                              "title": "标准可销毁代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                  "title": "测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2530,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "3f42c8f0-700d-499b-80fa-d5b846db8666",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0270\t发行标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "bf5de932-6f91-42a5-9ea3-17943be700ac",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0290\t发行标准可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "59c78187-57dd-4f04-bf4e-c25b187ee697",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0300\t发行标准可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fd066290-1375-46de-9a67-1f2f138d37dd",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0310\t发行标准可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected true to equal false",
                                        "estack": "AssertionError: expected true to equal false\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:575:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- true\n+ false\n"
                                      },
                                      "uuid": "8c95b794-cfa6-46c9-bf45-9ca289563665",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0310\t发行标准可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7514d1e5-f594-4ded-abb0-c54e3d1c3429",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0320\t发行标准可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a5ce23b1-92bf-494f-943d-698485c2ad32",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0320\t发行标准可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: C0B431E7D0CCC000BDAF6DC6B4BDFDC03E525226A88E33D333148849D66F65E2, blob 12000122800200002400019d3b68400000000000000a6cd6e316a9e9a40e80000000000000356466396364663000000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744730450221009ddb0bc30cb8252fb171db43cb3ba972c1a812a2cbc4ac287032c1c9256f3f0a02200484782c6e98b3e58b760e5fdf20516357c6e5d3f2162851ccb3acb49ba0194c8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333636041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: C0B431E7D0CCC000BDAF6DC6B4BDFDC03E525226A88E33D333148849D66F65E2, blob 12000122800200002400019d3b68400000000000000a6cd6e316a9e9a40e80000000000000356466396364663000000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744730450221009ddb0bc30cb8252fb171db43cb3ba972c1a812a2cbc4ac287032c1c9256f3f0a02200484782c6e98b3e58b760e5fdf20516357c6e5d3f2162851ccb3acb49ba0194c8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333636041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "fa504903-6909-426d-a080-aa1090598585",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c05c3c92-d152-449a-bf7c-ec657ccaac14",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2e658592-d3b5-4ecc-8edb-8651990eac12",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "23d01b6c-4ba6-44b1-b7a5-523e1d753333",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "396da770-0eae-485e-8ecd-a467c47d512e",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3870aacf-6c85-4c54-913f-2c053908307c",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0db157a9-73e0-4aba-80ee-504b1b7e9213",
                                      "parentUUID": "7bda744c-50f2-4f86-8dc9-e5d81f8bf463",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "59c78187-57dd-4f04-bf4e-c25b187ee697",
                                    "fd066290-1375-46de-9a67-1f2f138d37dd",
                                    "7514d1e5-f594-4ded-abb0-c54e3d1c3429",
                                    "a5ce23b1-92bf-494f-943d-698485c2ad32",
                                    "c05c3c92-d152-449a-bf7c-ec657ccaac14",
                                    "2e658592-d3b5-4ecc-8edb-8651990eac12",
                                    "23d01b6c-4ba6-44b1-b7a5-523e1d753333",
                                    "396da770-0eae-485e-8ecd-a467c47d512e",
                                    "3870aacf-6c85-4c54-913f-2c053908307c",
                                    "0db157a9-73e0-4aba-80ee-504b1b7e9213"
                                  ],
                                  "failures": [
                                    "bf5de932-6f91-42a5-9ea3-17943be700ac",
                                    "8c95b794-cfa6-46c9-bf45-9ca289563665",
                                    "fa504903-6909-426d-a080-aa1090598585"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 10,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                  "title": "测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11402,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "88d9fd1e-0e7a-462a-aba5-834065ad6ea9",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0010\t发起标准可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "d6cace58-e077-47b6-aa95-b009c7759917",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "71b434cb-2a2a-4a72-adff-0a56650f54c0",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "5588b478-af57-4abb-8fd8-31389f893791",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "26d69924-0416-48c6-9b85-44b1c103e50e",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0040\t发起标准可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "17e26382-9825-432d-97ef-87202e7a1aff",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0050\t发起标准可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2e4edb0a-92c6-4c5a-8ed6-d535bd69626a",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0060\t发起标准可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 398439E9BCA301337D436B905FEDE433A492700D7EA83F5F54939A77D57A643C, blob 12000022800000002400019d3b6140038d7ea4c67fff68400000000000000a7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402200867aee1471d0c5e2a8c6fb13c97d41e5ea7c0e0d904654ed0294ac22b6cf60e022029eb68654ee0b9b2e23d9e49cbfc734e6021acec8e1c9323c7a382441805c9338114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terTIMEOUT No replies received and timeout.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 398439E9BCA301337D436B905FEDE433A492700D7EA83F5F54939A77D57A643C, blob 12000022800000002400019d3b6140038d7ea4c67fff68400000000000000a7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402200867aee1471d0c5e2a8c6fb13c97d41e5ea7c0e0d904654ed0294ac22b6cf60e022029eb68654ee0b9b2e23d9e49cbfc734e6021acec8e1c9323c7a382441805c9338114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terTIMEOUT No replies received and timeout.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "172ef975-3ad8-496e-bf2f-f907a9ee33fc",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0070\t发起标准可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "55691024-d7b3-4374-acc2-72627e04b6d3",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0080\t发起标准可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "91269b6a-4692-4061-939f-625bf831d93c",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0080\t发起标准可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0504d47b-9868-495b-b2f5-ef3299af37f9",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0090\t发起标准可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8d6105ab-4861-47e4-8095-5eb5da75025e",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0100\t发起标准可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6f63781f-1dcb-4694-a7f8-48cc9240614d",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0110\t发起标准可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9fb6add3-ec37-4c53-8911-97cae2be464a",
                                      "parentUUID": "048f80ad-5745-495f-86e9-0b8eac4e7bab",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "71b434cb-2a2a-4a72-adff-0a56650f54c0",
                                    "26d69924-0416-48c6-9b85-44b1c103e50e",
                                    "17e26382-9825-432d-97ef-87202e7a1aff",
                                    "2e4edb0a-92c6-4c5a-8ed6-d535bd69626a",
                                    "55691024-d7b3-4374-acc2-72627e04b6d3",
                                    "91269b6a-4692-4061-939f-625bf831d93c",
                                    "0504d47b-9868-495b-b2f5-ef3299af37f9",
                                    "8d6105ab-4861-47e4-8095-5eb5da75025e",
                                    "6f63781f-1dcb-4694-a7f8-48cc9240614d",
                                    "9fb6add3-ec37-4c53-8911-97cae2be464a"
                                  ],
                                  "failures": [
                                    "d6cace58-e077-47b6-aa95-b009c7759917",
                                    "5588b478-af57-4abb-8fd8-31389f893791",
                                    "172ef975-3ad8-496e-bf2f-f907a9ee33fc"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 8,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "5fc7a24d-a139-460c-8ac8-a86f48e3d351",
                                  "title": "测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 3975,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "714f5e61-d02a-40b6-b7e9-d89e3ee4ab8b",
                                      "parentUUID": "5fc7a24d-a139-460c-8ac8-a86f48e3d351",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "f391d9ae-4965-4394-a61c-bcb7bc4e9f93",
                                      "parentUUID": "5fc7a24d-a139-460c-8ac8-a86f48e3d351",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "0990d36e-52dc-468e-b85b-af0b5d7ab6eb",
                                      "parentUUID": "5fc7a24d-a139-460c-8ac8-a86f48e3d351",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "8255bb88-6e08-4d1b-8276-eeb1fd237df8",
                                      "parentUUID": "5fc7a24d-a139-460c-8ac8-a86f48e3d351",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "11056bd0-e169-4a54-88cc-a9c05355e38a",
                                      "parentUUID": "5fc7a24d-a139-460c-8ac8-a86f48e3d351",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "aeae230f-72f6-4480-b5a0-0a75c694d002",
                                      "parentUUID": "5fc7a24d-a139-460c-8ac8-a86f48e3d351",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "f391d9ae-4965-4394-a61c-bcb7bc4e9f93",
                                    "0990d36e-52dc-468e-b85b-af0b5d7ab6eb",
                                    "8255bb88-6e08-4d1b-8276-eeb1fd237df8",
                                    "11056bd0-e169-4a54-88cc-a9c05355e38a",
                                    "aeae230f-72f6-4480-b5a0-0a75c694d002"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                  "title": "测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 16627,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "c915648d-6456-4a24-b109-ebe4136c760a",
                                      "parentUUID": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "9a720d34-6374-4765-88af-b3ce6d46c8d8",
                                      "parentUUID": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "92a1e6a9-4736-4f7f-aa76-c4e208f8369b",
                                      "parentUUID": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "18b6108d-3801-443c-ac5d-0568675ddf89",
                                      "parentUUID": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "8fe85b80-d95a-45d6-acf8-6de7a8e8a4df",
                                      "parentUUID": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fe7cd73c-dce6-4db6-84a2-6e111a625a8a",
                                      "parentUUID": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6b562875-4461-434e-8ae9-b6e0fd447b82",
                                      "parentUUID": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "17b60bc7-1156-4c34-9952-98495203e5e0",
                                      "parentUUID": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: F5EF218BF29569FDC12B001D4611A2F65E3C6264B30788F309425E0D7E4A0C2E, blob 12000022800000002400019d3b61d4838d7ea4c68000000000000000356634633764366500000000000000000000000000000000000000000000000000006840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100a02821024616f5129e83a8a1ee1eff78f0f719e004a5ea8a75f72976096e7ece0220580d8e99e2ac39358ea9a0bf52808ad51d4fc2c514f4a72624554afca271edc58114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: F5EF218BF29569FDC12B001D4611A2F65E3C6264B30788F309425E0D7E4A0C2E, blob 12000022800000002400019d3b61d4838d7ea4c68000000000000000356634633764366500000000000000000000000000000000000000000000000000006840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100a02821024616f5129e83a8a1ee1eff78f0f719e004a5ea8a75f72976096e7ece0220580d8e99e2ac39358ea9a0bf52808ad51d4fc2c514f4a72624554afca271edc58114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "59c74ae5-e127-43ef-8767-6d56614f7788",
                                      "parentUUID": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "d1309b74-c95b-4516-a4b1-e7dfcfb45b01",
                                      "parentUUID": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "fc105655-b15d-432d-af43-45695088cdc5",
                                      "parentUUID": "5b6a06f8-713b-46af-aef6-ecadc77b4411",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "fe7cd73c-dce6-4db6-84a2-6e111a625a8a",
                                    "6b562875-4461-434e-8ae9-b6e0fd447b82"
                                  ],
                                  "failures": [
                                    "9a720d34-6374-4765-88af-b3ce6d46c8d8",
                                    "92a1e6a9-4736-4f7f-aa76-c4e208f8369b",
                                    "18b6108d-3801-443c-ac5d-0568675ddf89",
                                    "8fe85b80-d95a-45d6-acf8-6de7a8e8a4df",
                                    "17b60bc7-1156-4c34-9952-98495203e5e0",
                                    "59c74ae5-e127-43ef-8767-6d56614f7788",
                                    "d1309b74-c95b-4516-a4b1-e7dfcfb45b01",
                                    "fc105655-b15d-432d-af43-45695088cdc5"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 11,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "9eabcc6d-a0fa-4a14-b820-de111bd04e62",
                                  "title": "测试增发-[币种:5f4c7d6e] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试增发-[币种:5f4c7d6e] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2864,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "f85b42fe-b6b6-4ba3-9cdf-41fc14ca3d6d",
                                      "parentUUID": "9eabcc6d-a0fa-4a14-b820-de111bd04e62",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试增发-[币种:5f4c7d6e] [方式:jt_signTransaction] 0370\t增发可增发的代币标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 4E43A558AC1B222B1E325D7ABE99FFEC3E687AC8F827762E9340339571785CD7, blob 12000122800200002400019d3b68400000000000000a6cd49ff973cafa8000000000000000356634633764366500000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237447304502210081a79066aa2036a1d2a2b1cfad81ce80f12ee37b9e90ae4ce65f1f5a317b94c902203ed84dc67f61109cefb1d84b31f1f31e79bf44effd5eea730c08903b403369f18114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333636041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 4E43A558AC1B222B1E325D7ABE99FFEC3E687AC8F827762E9340339571785CD7, blob 12000122800200002400019d3b68400000000000000a6cd49ff973cafa8000000000000000356634633764366500000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237447304502210081a79066aa2036a1d2a2b1cfad81ce80f12ee37b9e90ae4ce65f1f5a317b94c902203ed84dc67f61109cefb1d84b31f1f31e79bf44effd5eea730c08903b403369f18114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333636041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "c1e5c22f-ffb0-4472-90f4-f7ab0c8b4d9b",
                                      "parentUUID": "9eabcc6d-a0fa-4a14-b820-de111bd04e62",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "c1e5c22f-ffb0-4472-90f4-f7ab0c8b4d9b"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "7d4ed844-6d23-4ffd-b4c8-8f33048aadc2",
                                  "title": "测试销毁-[币种:5f4c7d6e] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6e] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 924,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "505f65d4-8dbf-49f3-8882-a9b6ace53013",
                                      "parentUUID": "7d4ed844-6d23-4ffd-b4c8-8f33048aadc2",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6e] [方式:jt_signTransaction] 0380\t销毁标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "dfea7d43-3d21-4f18-bb6e-9ab6080c4034",
                                      "parentUUID": "7d4ed844-6d23-4ffd-b4c8-8f33048aadc2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6e] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 8A8D684EF1122FB5B36818B1E393C1EF164F7A8A34BBF00BB2C9AF295A10D3A0, blob 12000122800200002400019d3b68400000000000000a6c98a316a9e9a40e80000000000000356634633764366500000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402204ab721a6a4b490d79710f9e9a0714df34c8584d0602a87d4c8028f9a4532154b0220440c453fe481ba423dcc9bc2bf9be285511b9a6886423cdfce2280611754be598114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333636041008, tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 8A8D684EF1122FB5B36818B1E393C1EF164F7A8A34BBF00BB2C9AF295A10D3A0, blob 12000122800200002400019d3b68400000000000000a6c98a316a9e9a40e80000000000000356634633764366500000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402204ab721a6a4b490d79710f9e9a0714df34c8584d0602a87d4c8028f9a4532154b0220440c453fe481ba423dcc9bc2bf9be285511b9a6886423cdfce2280611754be598114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333636041008, tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "605955c5-11e8-4aef-a5cf-2a6bb05f0e67",
                                      "parentUUID": "7d4ed844-6d23-4ffd-b4c8-8f33048aadc2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d6e] [方式:jt_signTransaction] 0380\t销毁所有标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "06e892cf-1e0b-4ff2-bd13-6caa3812efc3",
                                      "parentUUID": "7d4ed844-6d23-4ffd-b4c8-8f33048aadc2",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "dfea7d43-3d21-4f18-bb6e-9ab6080c4034",
                                    "605955c5-11e8-4aef-a5cf-2a6bb05f0e67",
                                    "06e892cf-1e0b-4ff2-bd13-6caa3812efc3"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 2,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "e04a1234-c0ef-4370-aca5-e710ebd3b52e",
                              "title": "标准可增发可销毁代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                  "title": "测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2512,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "8f8ff4a7-20b8-4d52-bc32-3d0a983e9a7e",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0270\t发行标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "3a89d7b8-03c7-4172-8f0b-3db24530c059",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可增发可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0290\t发行标准可增发可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fade7227-c7d6-4c64-a94a-11f2fcc6ba93",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可增发可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0300\t发行标准可增发可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ec99f8d2-40e7-4848-bd05-9e57a0b92514",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0310\t发行标准可增发可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected true to equal false",
                                        "estack": "AssertionError: expected true to equal false\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:575:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- true\n+ false\n"
                                      },
                                      "uuid": "be9db27f-709b-4d54-a050-a9d94cca4f86",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0310\t发行标准可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5a762400-da75-40f4-8aa5-8688aba816ca",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0320\t发行标准可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "12662a6b-786c-4160-8b02-29507f173677",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0320\t发行标准可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 05BD0B3EFB2D1784D3287225AF96DBCC3FCC276547E76C3D50837DCC88274964, blob 12000122800300002400019d3b68400000000000000a6cd6e316a9e9a40e80000000000000356466396364663000000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744630440220737dbc61ae4414ce391cab826c8e8ac10d1c2b2a29b2921b993b6cec38959a10022034a78988e70d2bc2e11c9866185975a380eafef310bcb05488948cd45823eaaa8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333638041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 05BD0B3EFB2D1784D3287225AF96DBCC3FCC276547E76C3D50837DCC88274964, blob 12000122800300002400019d3b68400000000000000a6cd6e316a9e9a40e80000000000000356466396364663000000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744630440220737dbc61ae4414ce391cab826c8e8ac10d1c2b2a29b2921b993b6cec38959a10022034a78988e70d2bc2e11c9866185975a380eafef310bcb05488948cd45823eaaa8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333638041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "2edca8a4-88b9-4109-987f-e622ed8f1622",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "255450a2-2bcd-4e88-95a8-de1f97406f42",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7af95dcd-ba5d-4d30-b215-9cda10b930e8",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6c4fcff4-6403-4a33-a6c1-46c89abffa6e",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d61086e9-a2bc-4e99-8321-f90a1374ca78",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2f14efec-03f7-47f2-b54b-efb36e38c19b",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f5a13c1d-2432-4fa6-bc68-1a1f4413aacf",
                                      "parentUUID": "1216ca01-46ce-48b4-bd7a-b719d93f55f8",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "fade7227-c7d6-4c64-a94a-11f2fcc6ba93",
                                    "ec99f8d2-40e7-4848-bd05-9e57a0b92514",
                                    "5a762400-da75-40f4-8aa5-8688aba816ca",
                                    "12662a6b-786c-4160-8b02-29507f173677",
                                    "255450a2-2bcd-4e88-95a8-de1f97406f42",
                                    "7af95dcd-ba5d-4d30-b215-9cda10b930e8",
                                    "6c4fcff4-6403-4a33-a6c1-46c89abffa6e",
                                    "d61086e9-a2bc-4e99-8321-f90a1374ca78",
                                    "2f14efec-03f7-47f2-b54b-efb36e38c19b",
                                    "f5a13c1d-2432-4fa6-bc68-1a1f4413aacf"
                                  ],
                                  "failures": [
                                    "3a89d7b8-03c7-4172-8f0b-3db24530c059",
                                    "be9db27f-709b-4d54-a050-a9d94cca4f86",
                                    "2edca8a4-88b9-4109-987f-e622ed8f1622"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 10,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                  "title": "测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2162,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "3e7cdc17-4a63-4207-abe2-4cc8521a014b",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可增发可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0010\t发起标准可增发可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "f1c584d9-bc9e-41d9-945b-d6c4edaf6b42",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3d05cc56-ff2a-4dc6-bb63-59474b745dcc",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "fa68723b-a8c9-4909-916f-09e98aef3d9e",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fca04f82-dca9-4655-89a4-1f8af4217f7f",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0040\t发起标准可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "74e2051f-49ee-4078-bfa4-402a3ba3d981",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0050\t发起标准可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "09c3d12d-4ae4-43c5-8d31-11d120082247",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0060\t发起标准可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "13a09b39-d22c-4219-9d00-a13f81d1e65b",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可增发可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0070\t发起标准可增发可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ed9a7f9e-1e29-4469-9883-515a572f6c00",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0080\t发起标准可增发可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "69c7ffc8-1f5f-4e7d-9e0b-07fae8f6927b",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0080\t发起标准可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a8e7a80d-a1b8-46c9-9b8d-de87f275ada0",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0090\t发起标准可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4888b41e-2a4d-4247-a09c-05ab6bf6a028",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0100\t发起标准可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "969686bb-c6f8-45c1-ab60-e05cd0b90fb5",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0110\t发起标准可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fdcde1cc-ae6c-495d-8884-b9f66b77b44c",
                                      "parentUUID": "0de95ec7-d021-4ead-a33b-dd1eb5c7f416",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "3d05cc56-ff2a-4dc6-bb63-59474b745dcc",
                                    "fca04f82-dca9-4655-89a4-1f8af4217f7f",
                                    "74e2051f-49ee-4078-bfa4-402a3ba3d981",
                                    "09c3d12d-4ae4-43c5-8d31-11d120082247",
                                    "13a09b39-d22c-4219-9d00-a13f81d1e65b",
                                    "ed9a7f9e-1e29-4469-9883-515a572f6c00",
                                    "69c7ffc8-1f5f-4e7d-9e0b-07fae8f6927b",
                                    "a8e7a80d-a1b8-46c9-9b8d-de87f275ada0",
                                    "4888b41e-2a4d-4247-a09c-05ab6bf6a028",
                                    "969686bb-c6f8-45c1-ab60-e05cd0b90fb5",
                                    "fdcde1cc-ae6c-495d-8884-b9f66b77b44c"
                                  ],
                                  "failures": [
                                    "f1c584d9-bc9e-41d9-945b-d6c4edaf6b42",
                                    "fa68723b-a8c9-4909-916f-09e98aef3d9e"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "d92483ec-c426-4c05-ba27-9a94c3a85e7b",
                                  "title": "测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1451,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "cf615ae9-07a2-479b-b0a4-dffbe1e19150",
                                      "parentUUID": "d92483ec-c426-4c05-ba27-9a94c3a85e7b",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "006c0543-d996-42b6-82aa-530943cf6ea5",
                                      "parentUUID": "d92483ec-c426-4c05-ba27-9a94c3a85e7b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "1141a882-0f04-401f-a430-003dd10e9fce",
                                      "parentUUID": "d92483ec-c426-4c05-ba27-9a94c3a85e7b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "c4f66b8f-ac13-4607-88ac-6d0eaa686b4d",
                                      "parentUUID": "d92483ec-c426-4c05-ba27-9a94c3a85e7b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "c93a2466-809a-4b94-8765-d285c72290c6",
                                      "parentUUID": "d92483ec-c426-4c05-ba27-9a94c3a85e7b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "9cf9a577-c7fa-4e33-9aca-454b2fb13d1c",
                                      "parentUUID": "d92483ec-c426-4c05-ba27-9a94c3a85e7b",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "006c0543-d996-42b6-82aa-530943cf6ea5",
                                    "1141a882-0f04-401f-a430-003dd10e9fce",
                                    "c4f66b8f-ac13-4607-88ac-6d0eaa686b4d",
                                    "c93a2466-809a-4b94-8765-d285c72290c6",
                                    "9cf9a577-c7fa-4e33-9aca-454b2fb13d1c"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                  "title": "测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2382,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "d5bbb082-83f3-4e0a-8f8b-1eef55012306",
                                      "parentUUID": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "5943d90c-5d99-4554-851b-7dad05ffff29",
                                      "parentUUID": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "f5791615-0f87-4c28-a0f4-837d583ae07f",
                                      "parentUUID": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "b80c7881-88d1-4bd5-b2a8-f98de85ebdd1",
                                      "parentUUID": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "9c6a97e6-f11e-487b-a549-65d3e3fe2c77",
                                      "parentUUID": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "af069511-29ab-4b81-b4ec-dc8d1b3cffd9",
                                      "parentUUID": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "69bb3ab3-d552-4a69-a1e3-882cd40f68ee",
                                      "parentUUID": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "b6e2e60c-e09f-4ec1-a4d0-4a96f39c1151",
                                      "parentUUID": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 63A23C22074220CA5FB06E1C8D1E9EF369E95A73F65CE64B1533F3253630AA0F, blob 12000022800000002400019d3b61d4838d7ea4c68000000000000000356634633764373000000000000000000000000000000000000000000000000000006840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100a582d3a4d724f6cc99a3414c30037081fd82ab8d23cc260cd58a20977e3672cd02201109ac30e2119108cf99c8afe1d5f14bd52154326f1d21099210726dd643dbb98114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 63A23C22074220CA5FB06E1C8D1E9EF369E95A73F65CE64B1533F3253630AA0F, blob 12000022800000002400019d3b61d4838d7ea4c68000000000000000356634633764373000000000000000000000000000000000000000000000000000006840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100a582d3a4d724f6cc99a3414c30037081fd82ab8d23cc260cd58a20977e3672cd02201109ac30e2119108cf99c8afe1d5f14bd52154326f1d21099210726dd643dbb98114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "49d0443c-5924-4aa0-9b4a-ed14bd4ddda7",
                                      "parentUUID": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "d2f93eee-52fb-453c-8f2f-391aff718330",
                                      "parentUUID": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "dcc136ad-a7d9-44e6-9f50-ce015bbd38a2",
                                      "parentUUID": "5c8d4b32-f09a-48b4-90be-95c950bcbfba",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "af069511-29ab-4b81-b4ec-dc8d1b3cffd9",
                                    "69bb3ab3-d552-4a69-a1e3-882cd40f68ee"
                                  ],
                                  "failures": [
                                    "5943d90c-5d99-4554-851b-7dad05ffff29",
                                    "f5791615-0f87-4c28-a0f4-837d583ae07f",
                                    "b80c7881-88d1-4bd5-b2a8-f98de85ebdd1",
                                    "9c6a97e6-f11e-487b-a549-65d3e3fe2c77",
                                    "b6e2e60c-e09f-4ec1-a4d0-4a96f39c1151",
                                    "49d0443c-5924-4aa0-9b4a-ed14bd4ddda7",
                                    "d2f93eee-52fb-453c-8f2f-391aff718330",
                                    "dcc136ad-a7d9-44e6-9f50-ce015bbd38a2"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 12,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "b0a067e9-3768-4da0-835c-a6f57c5e852f",
                                  "title": "测试增发-[币种:5f4c7d70] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试增发-[币种:5f4c7d70] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 282,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "82ded754-e951-459a-95e8-7bf66e1110b8",
                                      "parentUUID": "b0a067e9-3768-4da0-835c-a6f57c5e852f",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试增发-[币种:5f4c7d70] [方式:jt_signTransaction] 0370\t增发可增发的代币标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "449cbf1d-a175-42b3-9ce7-074aa5b0414e",
                                      "parentUUID": "b0a067e9-3768-4da0-835c-a6f57c5e852f",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "449cbf1d-a175-42b3-9ce7-074aa5b0414e"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "f382e62e-b8f7-4757-a775-e870e7d6938f",
                                  "title": "测试销毁-[币种:5f4c7d70] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d70] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 896,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "5815ee4d-7da5-4ec0-a111-6bbc5fd1d2f3",
                                      "parentUUID": "f382e62e-b8f7-4757-a775-e870e7d6938f",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d70] [方式:jt_signTransaction] 0380\t销毁标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "e44897e9-6384-4700-8116-08d2a397311b",
                                      "parentUUID": "f382e62e-b8f7-4757-a775-e870e7d6938f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d70] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 87228F8F8B5D01FE2A889DEAA1F53BD2AA9BDCC28F057416032EDC44864D9EF6, blob 12000122800300002400019d3b68400000000000000a6c98a316a9e9a40e80000000000000356634633764373000000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402205226765fcd846168ff5b43f81ccfd211a99f2046062b8c33bef5580c2bde8a57022021026e25cb760cccd42c50b56791130f86fb2c5d08827bb9139aff586e77f54f8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333638041008, tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 87228F8F8B5D01FE2A889DEAA1F53BD2AA9BDCC28F057416032EDC44864D9EF6, blob 12000122800300002400019d3b68400000000000000a6c98a316a9e9a40e80000000000000356634633764373000000000000000000000000000000000000000000000000000007321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402205226765fcd846168ff5b43f81ccfd211a99f2046062b8c33bef5580c2bde8a57022021026e25cb760cccd42c50b56791130f86fb2c5d08827bb9139aff586e77f54f8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333638041008, tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "2f994637-8192-449c-9800-d9a0c97c2359",
                                      "parentUUID": "f382e62e-b8f7-4757-a775-e870e7d6938f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d70] [方式:jt_signTransaction] 0380\t销毁所有标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "07bfdebb-d486-469a-bfd7-655f1f58d2b5",
                                      "parentUUID": "f382e62e-b8f7-4757-a775-e870e7d6938f",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "e44897e9-6384-4700-8116-08d2a397311b",
                                    "2f994637-8192-449c-9800-d9a0c97c2359",
                                    "07bfdebb-d486-469a-bfd7-655f1f58d2b5"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "511cbf49-472d-4e00-bd66-28f091351638",
                              "title": "自定Issuer一次性代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                  "title": "测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 4239,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "ead52d43-0db5-4362-a93a-7f664b11466a",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0270\t发行自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "221edb6b-c67f-4335-b956-04ca636923be",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer一次性代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0290\t发行自定Issuer一次性代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1d0e29fa-0123-45ae-bb6d-18310b505477",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer一次性代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0300\t发行自定Issuer一次性代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ba664cfc-c7d1-4e17-91f6-032ca5e1a922",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer一次性代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0310\t发行自定Issuer一次性代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected true to equal false",
                                        "estack": "AssertionError: expected true to equal false\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:575:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- true\n+ false\n"
                                      },
                                      "uuid": "85dfff02-a3c1-4c00-9127-412eeb14751f",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer一次性代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0310\t发行自定Issuer一次性代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8605a196-7943-4593-9cab-522112e82b69",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer一次性代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0320\t发行自定Issuer一次性代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "51040d7b-048d-40ca-87a5-72edd9fda883",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0320\t发行自定Issuer一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: D036F97109E7DEAD9DCC70EAE680E19CB262EA2AB755DF23978F8112FDF3DF83, blob 12000122800000002400019d3b68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744730450221008521c70080a02b8f52b457c7b24c982b777ea900db6c9004af1c661c67493d8b0220259c9f1863375b1196f4bf00c6fb4b36a7a13edbfa0b1116eb4f76b81466fe6a8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333730041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: D036F97109E7DEAD9DCC70EAE680E19CB262EA2AB755DF23978F8112FDF3DF83, blob 12000122800000002400019d3b68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744730450221008521c70080a02b8f52b457c7b24c982b777ea900db6c9004af1c661c67493d8b0220259c9f1863375b1196f4bf00c6fb4b36a7a13edbfa0b1116eb4f76b81466fe6a8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333730041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "69a88868-49a3-4afd-a899-387999575dc8",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c541b21a-6afa-4aee-890e-aec8791137a5",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e974e503-ce9f-40d8-a741-be77a188026f",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f73239fc-9ae8-4fea-8099-7c5559806de0",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a0a3a847-c78b-47a8-b809-2f86658c794e",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "722b1870-751b-49c4-b69c-a70f01999262",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3b2578be-2336-49b9-83e9-08691e0a310b",
                                      "parentUUID": "82d28685-6a76-45e5-956a-073f0adddcb5",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "1d0e29fa-0123-45ae-bb6d-18310b505477",
                                    "ba664cfc-c7d1-4e17-91f6-032ca5e1a922",
                                    "8605a196-7943-4593-9cab-522112e82b69",
                                    "51040d7b-048d-40ca-87a5-72edd9fda883",
                                    "c541b21a-6afa-4aee-890e-aec8791137a5",
                                    "e974e503-ce9f-40d8-a741-be77a188026f",
                                    "f73239fc-9ae8-4fea-8099-7c5559806de0",
                                    "a0a3a847-c78b-47a8-b809-2f86658c794e",
                                    "722b1870-751b-49c4-b69c-a70f01999262",
                                    "3b2578be-2336-49b9-83e9-08691e0a310b"
                                  ],
                                  "failures": [
                                    "221edb6b-c67f-4335-b956-04ca636923be",
                                    "85dfff02-a3c1-4c00-9127-412eeb14751f",
                                    "69a88868-49a3-4afd-a899-387999575dc8"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 9,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                  "title": "测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2112,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "e7201335-71d6-4ddb-b66e-0b4d199f6e04",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer一次性代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0010\t发起自定Issuer一次性代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "e5d3688a-e8df-4d97-bbba-c065b8c1f6b8",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f9d638c1-02f8-47f2-bc28-df4c814c4142",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "f936f289-d47c-42e3-8151-2356d90079f5",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e215d854-f666-4a1c-ad25-2c3b377db39a",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0040\t发起自定Issuer一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0b405b79-a41f-4765-a441-0eebbea110e6",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0050\t发起自定Issuer一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3c32d96f-ee23-46ea-be08-4ad7550398db",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0060\t发起自定Issuer一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ea67adf3-a18c-4b0a-a749-3e697e35bff0",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer一次性代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0070\t发起自定Issuer一次性代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b0876b7b-c323-4cdf-bbf0-b9122041a713",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer一次性代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0080\t发起自定Issuer一次性代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3edcd22c-b553-44e7-93b3-d69988aeb48c",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer一次性代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0080\t发起自定Issuer一次性代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8f2b0b6d-a7ec-4669-92bb-28d86e5927aa",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0090\t发起自定Issuer一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a6bd198a-810f-4b77-b468-3e83c1941336",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0100\t发起自定Issuer一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e14c3c00-615e-4701-999f-30b6dea9d7ac",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0110\t发起自定Issuer一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cd6a53cf-bb16-4267-a987-7c71992293f5",
                                      "parentUUID": "f083e3ba-247e-4cad-94e8-fc29be94dd03",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "f9d638c1-02f8-47f2-bc28-df4c814c4142",
                                    "e215d854-f666-4a1c-ad25-2c3b377db39a",
                                    "0b405b79-a41f-4765-a441-0eebbea110e6",
                                    "3c32d96f-ee23-46ea-be08-4ad7550398db",
                                    "ea67adf3-a18c-4b0a-a749-3e697e35bff0",
                                    "b0876b7b-c323-4cdf-bbf0-b9122041a713",
                                    "3edcd22c-b553-44e7-93b3-d69988aeb48c",
                                    "8f2b0b6d-a7ec-4669-92bb-28d86e5927aa",
                                    "a6bd198a-810f-4b77-b468-3e83c1941336",
                                    "e14c3c00-615e-4701-999f-30b6dea9d7ac",
                                    "cd6a53cf-bb16-4267-a987-7c71992293f5"
                                  ],
                                  "failures": [
                                    "e5d3688a-e8df-4d97-bbba-c065b8c1f6b8",
                                    "f936f289-d47c-42e3-8151-2356d90079f5"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 12,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "99703663-d12e-473a-8db7-9c15f1498376",
                                  "title": "测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1545,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "54ecbf0a-f816-40f7-aa7b-0b4de43f308b",
                                      "parentUUID": "99703663-d12e-473a-8db7-9c15f1498376",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "ba08b47d-8ca5-4b16-81ca-0fb4cc304e6f",
                                      "parentUUID": "99703663-d12e-473a-8db7-9c15f1498376",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "51f25172-e4e5-49a8-bbb2-0ec75862757d",
                                      "parentUUID": "99703663-d12e-473a-8db7-9c15f1498376",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "3bd28980-f099-4348-a3f9-57e9ecc1bfcc",
                                      "parentUUID": "99703663-d12e-473a-8db7-9c15f1498376",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "9bdf7707-9e7e-42b3-976a-fe97e70aa160",
                                      "parentUUID": "99703663-d12e-473a-8db7-9c15f1498376",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "c89ef416-12f2-4a00-86d6-84f293af8743",
                                      "parentUUID": "99703663-d12e-473a-8db7-9c15f1498376",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "ba08b47d-8ca5-4b16-81ca-0fb4cc304e6f",
                                    "51f25172-e4e5-49a8-bbb2-0ec75862757d",
                                    "3bd28980-f099-4348-a3f9-57e9ecc1bfcc",
                                    "9bdf7707-9e7e-42b3-976a-fe97e70aa160",
                                    "c89ef416-12f2-4a00-86d6-84f293af8743"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 2,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "1281d37e-ee94-4717-af38-3644c481d04c",
                                  "title": "测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2284,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "1d78a6a8-c1cc-4682-ae50-b89e664b74d8",
                                      "parentUUID": "1281d37e-ee94-4717-af38-3644c481d04c",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "15fd5eb2-4c6a-4e8e-9c2a-15b0652c8e8b",
                                      "parentUUID": "1281d37e-ee94-4717-af38-3644c481d04c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "fd1f5d98-4eb6-4599-ae42-1d85e1a71d23",
                                      "parentUUID": "1281d37e-ee94-4717-af38-3644c481d04c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "8161dbf1-a404-4f2e-bca1-7e3a7415ee88",
                                      "parentUUID": "1281d37e-ee94-4717-af38-3644c481d04c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "1ffae719-dac7-44ee-a93a-d49f3fbc5a99",
                                      "parentUUID": "1281d37e-ee94-4717-af38-3644c481d04c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "08e712f6-336d-4698-acc6-28f5ffcca78d",
                                      "parentUUID": "1281d37e-ee94-4717-af38-3644c481d04c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f84cd8f3-2ff6-4174-a30f-1cd54429968e",
                                      "parentUUID": "1281d37e-ee94-4717-af38-3644c481d04c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "948a7d14-db9a-452b-aee2-b69088da77fb",
                                      "parentUUID": "1281d37e-ee94-4717-af38-3644c481d04c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer一次性代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer一次性代币余额的整数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: D600EABC736F70E4811B5F9850EDE7A751F31960739AE8A81C943855D9A3E2FB, blob 12000022800000002400019d3b61d4838d7ea4c680000000000000003566346337643732000000000000957ec797ff0e2c6148c81689efe013759c5d51a26840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744730450221009f88386fc1f544a9a75e3e3460fe770da2f981d90b8cebe33abee7bc7cc1a7fe022063f32c53a61143a5bfc55ca5b06c98d0ea23ee88510bc8f744205be846c5a6118114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: D600EABC736F70E4811B5F9850EDE7A751F31960739AE8A81C943855D9A3E2FB, blob 12000022800000002400019d3b61d4838d7ea4c680000000000000003566346337643732000000000000957ec797ff0e2c6148c81689efe013759c5d51a26840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e723744730450221009f88386fc1f544a9a75e3e3460fe770da2f981d90b8cebe33abee7bc7cc1a7fe022063f32c53a61143a5bfc55ca5b06c98d0ea23ee88510bc8f744205be846c5a6118114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "be60b6de-6a31-4230-8fd1-1a53674b3767",
                                      "parentUUID": "1281d37e-ee94-4717-af38-3644c481d04c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "14f06b1f-78e8-4dd2-bc83-2a4d14281999",
                                      "parentUUID": "1281d37e-ee94-4717-af38-3644c481d04c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "fb5bba41-fdb2-4b45-82b0-2bccae256bcd",
                                      "parentUUID": "1281d37e-ee94-4717-af38-3644c481d04c",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "08e712f6-336d-4698-acc6-28f5ffcca78d",
                                    "f84cd8f3-2ff6-4174-a30f-1cd54429968e"
                                  ],
                                  "failures": [
                                    "15fd5eb2-4c6a-4e8e-9c2a-15b0652c8e8b",
                                    "fd1f5d98-4eb6-4599-ae42-1d85e1a71d23",
                                    "8161dbf1-a404-4f2e-bca1-7e3a7415ee88",
                                    "1ffae719-dac7-44ee-a93a-d49f3fbc5a99",
                                    "948a7d14-db9a-452b-aee2-b69088da77fb",
                                    "be60b6de-6a31-4230-8fd1-1a53674b3767",
                                    "14f06b1f-78e8-4dd2-bc83-2a4d14281999",
                                    "fb5bba41-fdb2-4b45-82b0-2bccae256bcd"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 8,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "32263f96-de0e-4823-b07e-835ee0cbc4f2",
                                  "title": "测试增发-[币种:5f4c7d72] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试增发-[币种:5f4c7d72] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 284,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "023149a4-ca78-4b41-9c54-323f5c42bb0f",
                                      "parentUUID": "32263f96-de0e-4823-b07e-835ee0cbc4f2",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试增发-[币种:5f4c7d72] [方式:jt_signTransaction] 0370\t增发可增发的代币自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 81F94E036B9508B7C94FDC4F2082FC6F9C50E70ECB646AADBAD127FCE148DFAE, blob 12000122800000002400019d3b68400000000000000a6cd49ff973cafa80000000000000003566346337643732000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402207e85ee935e76ee763b09658870175bff4ff397884c1163c894de0e99b9afff0802204ab15d50044ef14ed22bc7110a394637f524672ec1dbd0a3ee3d8459a6400fc48114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333730041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 81F94E036B9508B7C94FDC4F2082FC6F9C50E70ECB646AADBAD127FCE148DFAE, blob 12000122800000002400019d3b68400000000000000a6cd49ff973cafa80000000000000003566346337643732000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402207e85ee935e76ee763b09658870175bff4ff397884c1163c894de0e99b9afff0802204ab15d50044ef14ed22bc7110a394637f524672ec1dbd0a3ee3d8459a6400fc48114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333730041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "9f3439b7-81ee-436f-b77f-071ab3769184",
                                      "parentUUID": "32263f96-de0e-4823-b07e-835ee0cbc4f2",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "9f3439b7-81ee-436f-b77f-071ab3769184"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "66b9f711-6b30-439c-9429-49e9b31ef734",
                                  "title": "测试销毁-[币种:5f4c7d72] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d72] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1665,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "2c9d231a-9adb-49d2-815b-8b7433a70b1d",
                                      "parentUUID": "66b9f711-6b30-439c-9429-49e9b31ef734",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d72] [方式:jt_signTransaction] 0380\t销毁自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 5BB0E3474823FBCF9C5C4BD16C99E2A3601322FF60DF53899AC71F2291A90E82, blob 12000122800000002400019d3b68400000000000000a6c949ff973cafa80000000000000003566346337643732000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374463044022044a217a8f9e98b92dd4ee1cda415b2d87ca5e48a4d83680e3560082a08c0ef410220428f5415d0a5d0e15a31d614c7077ff7ad2af3cc9d049bbc745bb7e3f0dff1578114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333730041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 5BB0E3474823FBCF9C5C4BD16C99E2A3601322FF60DF53899AC71F2291A90E82, blob 12000122800000002400019d3b68400000000000000a6c949ff973cafa80000000000000003566346337643732000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374463044022044a217a8f9e98b92dd4ee1cda415b2d87ca5e48a4d83680e3560082a08c0ef410220428f5415d0a5d0e15a31d614c7077ff7ad2af3cc9d049bbc745bb7e3f0dff1578114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333730041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "b3cbe9cb-919d-44b4-bc45-f83ecbc725e3",
                                      "parentUUID": "66b9f711-6b30-439c-9429-49e9b31ef734",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d72] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 1960D8DC114B607414945AD8DD50B4821BAFEE0CA6E0B6482290A78704A2B53D, blob 12000122800000002400019d3b68400000000000000a6c98a316a9e9a40e800000000000003566346337643732000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237447304502210083832b98502ee533f6fdb294f85fc764a2964e133fed21fed61227dd23a037be022022e13c354c06ca7d067967c8ed78062bd13f2bff5d8acaf2e514a653deee2d378114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333730041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 1960D8DC114B607414945AD8DD50B4821BAFEE0CA6E0B6482290A78704A2B53D, blob 12000122800000002400019d3b68400000000000000a6c98a316a9e9a40e800000000000003566346337643732000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237447304502210083832b98502ee533f6fdb294f85fc764a2964e133fed21fed61227dd23a037be022022e13c354c06ca7d067967c8ed78062bd13f2bff5d8acaf2e514a653deee2d378114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333730041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "f2816ea2-b6f2-4551-9402-f1ba6751c0e3",
                                      "parentUUID": "66b9f711-6b30-439c-9429-49e9b31ef734",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d72] [方式:jt_signTransaction] 0380\t销毁所有自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: AA339D216BAB4D8BDEC3B152A16A6E41CC9D1344BE44EDD5277542C301E1E166, blob 12000122800000002400019d3b68400000000000000a6c97118b54f4c44ba00000000000003566346337643732000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374463044022074d0cd584a88c30922830171b9ba345514079c88a876d45b164b80528de15a920220712cf18a549ab2e99083af3bf361d78682843d18a442ca41f49fb56a53915da68114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333730041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: AA339D216BAB4D8BDEC3B152A16A6E41CC9D1344BE44EDD5277542C301E1E166, blob 12000122800000002400019d3b68400000000000000a6c97118b54f4c44ba00000000000003566346337643732000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374463044022074d0cd584a88c30922830171b9ba345514079c88a876d45b164b80528de15a920220712cf18a549ab2e99083af3bf361d78682843d18a442ca41f49fb56a53915da68114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333730041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "dfeaf325-9e90-45d8-b9fc-c9a9e6c713dc",
                                      "parentUUID": "66b9f711-6b30-439c-9429-49e9b31ef734",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "b3cbe9cb-919d-44b4-bc45-f83ecbc725e3",
                                    "f2816ea2-b6f2-4551-9402-f1ba6751c0e3",
                                    "dfeaf325-9e90-45d8-b9fc-c9a9e6c713dc"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 6,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "2df8aef8-f0d6-46ee-a172-3c0d5eb51155",
                              "title": "自定Issuer可增发代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                  "title": "测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2332,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "00c2302c-5dfe-4d32-80cb-cf161371a0d0",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0270\t发行自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "f5bb8107-55db-481a-b908-5914dac6d84c",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可增发代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0290\t发行自定Issuer可增发代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6b934fb6-fa15-43f4-b495-fc1d3ec59c00",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可增发代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0300\t发行自定Issuer可增发代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cd368ec1-6386-47d3-92e3-9fca254aeb5e",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可增发代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected true to equal false",
                                        "estack": "AssertionError: expected true to equal false\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:575:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- true\n+ false\n"
                                      },
                                      "uuid": "52d76f6c-7220-4ef9-a3fe-1c3f64c72ce8",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可增发代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6cfdd71c-dac5-4d79-9fc3-da13b6a27e6b",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可增发代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3a236eb5-b91a-47d6-aa21-3a0f0e8297e6",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: E663F6B48552C2DDA2D027B094DE2546DF074E9970567CF8F7B1BDC3FDB1919A, blob 12000122800100002400019d3b68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100889392c6e75141c9211f06f599a586b938e5865ef9e91911796161ee1113c4f2022020513d951f6ebb6ddf4767a1328e1bbb95bf339b35be10770eb4d02571cead928114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333732041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: E663F6B48552C2DDA2D027B094DE2546DF074E9970567CF8F7B1BDC3FDB1919A, blob 12000122800100002400019d3b68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100889392c6e75141c9211f06f599a586b938e5865ef9e91911796161ee1113c4f2022020513d951f6ebb6ddf4767a1328e1bbb95bf339b35be10770eb4d02571cead928114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333732041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "c2d5becb-d9a8-42db-9edb-711be2dd1e66",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4d6b9d12-57fe-48a3-a377-246e2d08e5c6",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a353f670-ca01-45b5-8592-518e3c3e146a",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b790125b-4c83-427a-b99a-fa612fa1fe11",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "84c14418-55af-40a0-b2a6-c44d7e1e39ac",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cdbfbc42-ef1c-44ba-a73c-25f237c11791",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "407bee4d-c52a-40db-be42-82150fc9dce7",
                                      "parentUUID": "4e5aaa1e-f17e-4aa6-aba6-219d5fe46031",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "6b934fb6-fa15-43f4-b495-fc1d3ec59c00",
                                    "cd368ec1-6386-47d3-92e3-9fca254aeb5e",
                                    "6cfdd71c-dac5-4d79-9fc3-da13b6a27e6b",
                                    "3a236eb5-b91a-47d6-aa21-3a0f0e8297e6",
                                    "4d6b9d12-57fe-48a3-a377-246e2d08e5c6",
                                    "a353f670-ca01-45b5-8592-518e3c3e146a",
                                    "b790125b-4c83-427a-b99a-fa612fa1fe11",
                                    "84c14418-55af-40a0-b2a6-c44d7e1e39ac",
                                    "cdbfbc42-ef1c-44ba-a73c-25f237c11791",
                                    "407bee4d-c52a-40db-be42-82150fc9dce7"
                                  ],
                                  "failures": [
                                    "f5bb8107-55db-481a-b908-5914dac6d84c",
                                    "52d76f6c-7220-4ef9-a3fe-1c3f64c72ce8",
                                    "c2d5becb-d9a8-42db-9edb-711be2dd1e66"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 13,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                  "title": "测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 10690,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "4b5ac8a0-2e91-4ee8-a4ae-584162ef7664",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可增发代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0010\t发起自定Issuer可增发代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "69d7f1d2-772c-4c73-94bb-14d364a22e9d",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f5299bb9-1cc2-42e7-b14d-2844efc9a289",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "b36c90e8-2ca6-46a3-8472-a392fd3ad458",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "22dcbac5-ec71-49e8-a915-f3bfcf8f4c51",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0040\t发起自定Issuer可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2d9f478a-abb8-47c6-b138-5fe52a2e90be",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0050\t发起自定Issuer可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b3ca3014-a9e5-4bb1-85c1-15698af0d8fa",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0060\t发起自定Issuer可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 398439E9BCA301337D436B905FEDE433A492700D7EA83F5F54939A77D57A643C, blob 12000022800000002400019d3b6140038d7ea4c67fff68400000000000000a7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402200867aee1471d0c5e2a8c6fb13c97d41e5ea7c0e0d904654ed0294ac22b6cf60e022029eb68654ee0b9b2e23d9e49cbfc734e6021acec8e1c9323c7a382441805c9338114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terTIMEOUT No replies received and timeout.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 398439E9BCA301337D436B905FEDE433A492700D7EA83F5F54939A77D57A643C, blob 12000022800000002400019d3b6140038d7ea4c67fff68400000000000000a7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402200867aee1471d0c5e2a8c6fb13c97d41e5ea7c0e0d904654ed0294ac22b6cf60e022029eb68654ee0b9b2e23d9e49cbfc734e6021acec8e1c9323c7a382441805c9338114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terTIMEOUT No replies received and timeout.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "2b969938-e2a5-4cb1-b82b-cacbdc0e4496",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可增发代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0070\t发起自定Issuer可增发代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d3f5f588-8121-4ceb-ac76-638bd98f00ce",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可增发代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7cd3090b-3a0a-46dc-83e8-02593bde13fd",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可增发代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "76843a57-535f-4d94-b67d-f6c016a1459c",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0090\t发起自定Issuer可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f8579e4e-4a8b-4718-8438-41ca61b613a7",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0100\t发起自定Issuer可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "800d5c4f-ad40-4460-9774-e2d3506b700d",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0110\t发起自定Issuer可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cf700ecd-bacb-4857-9867-46fbb852cb0f",
                                      "parentUUID": "d5bb62f8-3fff-4076-b7b7-276925731642",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "f5299bb9-1cc2-42e7-b14d-2844efc9a289",
                                    "22dcbac5-ec71-49e8-a915-f3bfcf8f4c51",
                                    "2d9f478a-abb8-47c6-b138-5fe52a2e90be",
                                    "b3ca3014-a9e5-4bb1-85c1-15698af0d8fa",
                                    "d3f5f588-8121-4ceb-ac76-638bd98f00ce",
                                    "7cd3090b-3a0a-46dc-83e8-02593bde13fd",
                                    "76843a57-535f-4d94-b67d-f6c016a1459c",
                                    "f8579e4e-4a8b-4718-8438-41ca61b613a7",
                                    "800d5c4f-ad40-4460-9774-e2d3506b700d",
                                    "cf700ecd-bacb-4857-9867-46fbb852cb0f"
                                  ],
                                  "failures": [
                                    "69d7f1d2-772c-4c73-94bb-14d364a22e9d",
                                    "b36c90e8-2ca6-46a3-8472-a392fd3ad458",
                                    "2b969938-e2a5-4cb1-b82b-cacbdc0e4496"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 7,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "304cd962-2740-4b35-b125-853376f94ad8",
                                  "title": "测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1581,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "16933868-3287-4fc3-90ea-01bff0473f11",
                                      "parentUUID": "304cd962-2740-4b35-b125-853376f94ad8",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "cd36e53c-d1e6-4ccd-b1aa-33b4a4b596a8",
                                      "parentUUID": "304cd962-2740-4b35-b125-853376f94ad8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "28917861-4c5f-4946-855e-17fdd8d4a7a8",
                                      "parentUUID": "304cd962-2740-4b35-b125-853376f94ad8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "f3dd74fc-a228-478c-9fc1-597cdd2a07d2",
                                      "parentUUID": "304cd962-2740-4b35-b125-853376f94ad8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "2e1def53-5ba8-4766-bac2-b618ca52bb17",
                                      "parentUUID": "304cd962-2740-4b35-b125-853376f94ad8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "3d7734f0-9a31-4e2a-afb7-e7270f8aab18",
                                      "parentUUID": "304cd962-2740-4b35-b125-853376f94ad8",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "cd36e53c-d1e6-4ccd-b1aa-33b4a4b596a8",
                                    "28917861-4c5f-4946-855e-17fdd8d4a7a8",
                                    "f3dd74fc-a228-478c-9fc1-597cdd2a07d2",
                                    "2e1def53-5ba8-4766-bac2-b618ca52bb17",
                                    "3d7734f0-9a31-4e2a-afb7-e7270f8aab18"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 6,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                  "title": "测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2299,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "21bfcbc1-81dd-4ded-9d2d-6e28be1b44a5",
                                      "parentUUID": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "b422fc7b-ed47-4883-a72b-51bb9be783cb",
                                      "parentUUID": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "e569e434-7b37-4740-80a2-3cc71d5430e8",
                                      "parentUUID": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "06ae5b4c-a7bb-4f9a-9522-aae1ac1aa98d",
                                      "parentUUID": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "d4871697-422d-4f66-a874-a4744cc7dd48",
                                      "parentUUID": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "817c3df7-065e-40ba-a564-21351177fb75",
                                      "parentUUID": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d46b59e0-ec91-48cf-820a-356e7ea377b6",
                                      "parentUUID": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "0ac05cae-2cb6-4ddf-8e59-c92a11877acb",
                                      "parentUUID": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发代币余额的整数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 329C81CDA7BC2E981120E05B8E6E19292E77317CF5B3EE9FCD83E8A81FA5B905, blob 12000022800000002400019d3b61d4838d7ea4c680000000000000003566346337643734000000000000957ec797ff0e2c6148c81689efe013759c5d51a26840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402207522ef9f8d79feff13c9f4ebdede4b98883ef5931b51f5f9cd4ee89a6f5b68e702202393d1a75f7e8b6dcd59e419055254d4ea7a075bd1bf3782e4d9b240f3e9dce68114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 329C81CDA7BC2E981120E05B8E6E19292E77317CF5B3EE9FCD83E8A81FA5B905, blob 12000022800000002400019d3b61d4838d7ea4c680000000000000003566346337643734000000000000957ec797ff0e2c6148c81689efe013759c5d51a26840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402207522ef9f8d79feff13c9f4ebdede4b98883ef5931b51f5f9cd4ee89a6f5b68e702202393d1a75f7e8b6dcd59e419055254d4ea7a075bd1bf3782e4d9b240f3e9dce68114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "77584dad-076f-4d29-ba5b-9e894361f1e1",
                                      "parentUUID": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "4733c27c-9d62-4930-b7f4-776414a67332",
                                      "parentUUID": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "adf2c0fc-dd78-4609-aaee-616a2a49de92",
                                      "parentUUID": "dcf67d88-167d-47ce-a47d-9db34ff4d454",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "817c3df7-065e-40ba-a564-21351177fb75",
                                    "d46b59e0-ec91-48cf-820a-356e7ea377b6"
                                  ],
                                  "failures": [
                                    "b422fc7b-ed47-4883-a72b-51bb9be783cb",
                                    "e569e434-7b37-4740-80a2-3cc71d5430e8",
                                    "06ae5b4c-a7bb-4f9a-9522-aae1ac1aa98d",
                                    "d4871697-422d-4f66-a874-a4744cc7dd48",
                                    "0ac05cae-2cb6-4ddf-8e59-c92a11877acb",
                                    "77584dad-076f-4d29-ba5b-9e894361f1e1",
                                    "4733c27c-9d62-4930-b7f4-776414a67332",
                                    "adf2c0fc-dd78-4609-aaee-616a2a49de92"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 8,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "7d67f870-4f26-4ac9-a41c-cf67c5d92398",
                                  "title": "测试增发-[币种:5f4c7d74] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试增发-[币种:5f4c7d74] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 309,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "4577cb17-d17e-47b7-b711-f537508f461b",
                                      "parentUUID": "7d67f870-4f26-4ac9-a41c-cf67c5d92398",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试增发-[币种:5f4c7d74] [方式:jt_signTransaction] 0370\t增发可增发的代币自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "54c835c0-3e22-4817-9541-7dc10de5c0e2",
                                      "parentUUID": "7d67f870-4f26-4ac9-a41c-cf67c5d92398",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "54c835c0-3e22-4817-9541-7dc10de5c0e2"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 2,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "d13e5539-ae29-4d31-b0b1-7c0ecb30d108",
                                  "title": "测试销毁-[币种:5f4c7d74] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d74] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 893,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "9cea8b96-1c48-4bd2-8dca-bbf33951cf96",
                                      "parentUUID": "d13e5539-ae29-4d31-b0b1-7c0ecb30d108",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d74] [方式:jt_signTransaction] 0380\t销毁自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 9FF41526345082F99F4F13E91B5609343F8C22FF08EE0A5B2340F7175C229BAF, blob 12000122800100002400019d3b68400000000000000a6c949ff973cafa80000000000000003566346337643734000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374463044022034ae4a4a8943d81754ed7e20995fcc708be6a64a86692797695686278691e75102206c5c0c5510beb791f872aa7f5869b259a29e90e3dfd2db1fbadd3a1e722c17248114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333732041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 9FF41526345082F99F4F13E91B5609343F8C22FF08EE0A5B2340F7175C229BAF, blob 12000122800100002400019d3b68400000000000000a6c949ff973cafa80000000000000003566346337643734000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374463044022034ae4a4a8943d81754ed7e20995fcc708be6a64a86692797695686278691e75102206c5c0c5510beb791f872aa7f5869b259a29e90e3dfd2db1fbadd3a1e722c17248114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333732041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "9a064663-8782-4cd1-b503-49a7fa1880ed",
                                      "parentUUID": "d13e5539-ae29-4d31-b0b1-7c0ecb30d108",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d74] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 46390BCF872EBB72EAB5660BD1B4FB1CF4F7B71056132B9F62760067023CB01D, blob 12000122800100002400019d3b68400000000000000a6c98a316a9e9a40e800000000000003566346337643734000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402200a3945eca1f412443de280d5d4d98175ebdf9407e2b2a172c527e8740bbe8a6a02202d5e44aa5637ed179b52f5cba918f86dd419eeef1d243e4deba4715b5772085a8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333732041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 46390BCF872EBB72EAB5660BD1B4FB1CF4F7B71056132B9F62760067023CB01D, blob 12000122800100002400019d3b68400000000000000a6c98a316a9e9a40e800000000000003566346337643734000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402200a3945eca1f412443de280d5d4d98175ebdf9407e2b2a172c527e8740bbe8a6a02202d5e44aa5637ed179b52f5cba918f86dd419eeef1d243e4deba4715b5772085a8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333732041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "623c0fa7-428e-462f-ac67-93d3070c718c",
                                      "parentUUID": "d13e5539-ae29-4d31-b0b1-7c0ecb30d108",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d74] [方式:jt_signTransaction] 0380\t销毁所有自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 96E744CE449A151EFE720A901A170AEEBFD15985FD537D44F623F8625D56744C, blob 12000122800100002400019d3b68400000000000000a6c97118b54f4c44ba00000000000003566346337643734000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100fa10b0b7033f89c45f6dcf4f86516256b6ad51e3cf74ce0730bc7cc08c39982c02202e70e28c9960e94d29991181895f92a4455c97f52f6a99dd78fc860073e729df8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333732041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 96E744CE449A151EFE720A901A170AEEBFD15985FD537D44F623F8625D56744C, blob 12000122800100002400019d3b68400000000000000a6c97118b54f4c44ba00000000000003566346337643734000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100fa10b0b7033f89c45f6dcf4f86516256b6ad51e3cf74ce0730bc7cc08c39982c02202e70e28c9960e94d29991181895f92a4455c97f52f6a99dd78fc860073e729df8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333732041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "14453893-0d09-436f-8380-1aa060b1997a",
                                      "parentUUID": "d13e5539-ae29-4d31-b0b1-7c0ecb30d108",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "9a064663-8782-4cd1-b503-49a7fa1880ed",
                                    "623c0fa7-428e-462f-ac67-93d3070c718c",
                                    "14453893-0d09-436f-8380-1aa060b1997a"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 2,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "b4bedb8f-cb4c-4c1c-8af5-f4db5415b3f4",
                              "title": "自定Issuer可销毁代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                  "title": "测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2569,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "b597875d-7f75-4748-b114-a2462e9f18ab",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0270\t发行自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "4961f5c3-a88b-409e-b9f5-e3e444b9435f",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0290\t发行自定Issuer可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2820f7b9-81d1-4659-b806-f2394f288dd4",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0300\t发行自定Issuer可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "82589212-bb55-476c-953d-63dba86cf83c",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected true to equal false",
                                        "estack": "AssertionError: expected true to equal false\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:575:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- true\n+ false\n"
                                      },
                                      "uuid": "1842ec64-4a41-4f8e-b178-5423850be12d",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7d75d92c-2163-4622-a2e7-cfee36af196e",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d6096b06-a52a-42e9-a60f-14c9620e0c86",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: FE1B3CF6BBAE0D9A2C9C492F844F0659A890E0C01D25B8AA803027151506F430, blob 12000122800200002400019d3b68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402207a0b6a7a14bdd9f317e3cc45e8cf3d815d48dfa968929d620eee897428eef0350220660191990d7dade4758db55f9af64f2e95db33126453e9c6b0aec25256d7d9458114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333734041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: FE1B3CF6BBAE0D9A2C9C492F844F0659A890E0C01D25B8AA803027151506F430, blob 12000122800200002400019d3b68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402207a0b6a7a14bdd9f317e3cc45e8cf3d815d48dfa968929d620eee897428eef0350220660191990d7dade4758db55f9af64f2e95db33126453e9c6b0aec25256d7d9458114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333734041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "9d701305-eecf-41ef-a2bb-ee382d9154f9",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6574ce5a-7e04-4646-a78f-ac954c37d111",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4abc04ec-7f16-4a94-bd01-4bfc560fa12b",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8cb3a2e6-97fd-4a5a-80d6-c9e461c4163c",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5001ccc7-6eb9-4412-b81d-e104adf587de",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5786b2cc-9105-4874-be3a-43be024f068b",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c72534ff-78c5-4010-8a79-b1bfd6eb9e51",
                                      "parentUUID": "1b85b599-0508-41fc-b186-f53ecdb8fcfd",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "2820f7b9-81d1-4659-b806-f2394f288dd4",
                                    "82589212-bb55-476c-953d-63dba86cf83c",
                                    "7d75d92c-2163-4622-a2e7-cfee36af196e",
                                    "d6096b06-a52a-42e9-a60f-14c9620e0c86",
                                    "6574ce5a-7e04-4646-a78f-ac954c37d111",
                                    "4abc04ec-7f16-4a94-bd01-4bfc560fa12b",
                                    "8cb3a2e6-97fd-4a5a-80d6-c9e461c4163c",
                                    "5001ccc7-6eb9-4412-b81d-e104adf587de",
                                    "5786b2cc-9105-4874-be3a-43be024f068b",
                                    "c72534ff-78c5-4010-8a79-b1bfd6eb9e51"
                                  ],
                                  "failures": [
                                    "4961f5c3-a88b-409e-b9f5-e3e444b9435f",
                                    "1842ec64-4a41-4f8e-b178-5423850be12d",
                                    "9d701305-eecf-41ef-a2bb-ee382d9154f9"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 9,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                  "title": "测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2162,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "3af2c67a-424b-45b2-a069-d85dc265ca30",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0010\t发起自定Issuer可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "0d0574ee-92f2-4eb4-be1c-d0bb34d7145d",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c73f7cde-89cc-4e3e-92f6-1dee2a68d4d7",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "3e84bff9-a08b-49e8-a93c-fa6d354c3976",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f03f978f-1503-4aa1-b0eb-9e9d1f461fe2",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0040\t发起自定Issuer可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c900bb6a-58ff-4d73-b359-f43ebf41cf8a",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0050\t发起自定Issuer可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fb6878b5-55ff-4f5d-9054-339bc0e21af3",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0060\t发起自定Issuer可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a51e1c99-db68-4c7a-a445-84b8c089c33a",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0070\t发起自定Issuer可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4d89aec4-d7d0-404f-9c4a-2b62a2568024",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a86553d6-71aa-4683-9fed-c58d20313bec",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1af20a1e-3459-436b-a328-b4ae24112a1d",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0090\t发起自定Issuer可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8efe9bdf-96fa-4a64-b715-3602952820e4",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0100\t发起自定Issuer可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fc6ccaad-53c6-4dc7-8604-451e386eda8b",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0110\t发起自定Issuer可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c9974cad-f1a1-4f98-b397-a871357026ae",
                                      "parentUUID": "72a25308-ea30-4f84-8c7b-dd7716a535d1",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "c73f7cde-89cc-4e3e-92f6-1dee2a68d4d7",
                                    "f03f978f-1503-4aa1-b0eb-9e9d1f461fe2",
                                    "c900bb6a-58ff-4d73-b359-f43ebf41cf8a",
                                    "fb6878b5-55ff-4f5d-9054-339bc0e21af3",
                                    "a51e1c99-db68-4c7a-a445-84b8c089c33a",
                                    "4d89aec4-d7d0-404f-9c4a-2b62a2568024",
                                    "a86553d6-71aa-4683-9fed-c58d20313bec",
                                    "1af20a1e-3459-436b-a328-b4ae24112a1d",
                                    "8efe9bdf-96fa-4a64-b715-3602952820e4",
                                    "fc6ccaad-53c6-4dc7-8604-451e386eda8b",
                                    "c9974cad-f1a1-4f98-b397-a871357026ae"
                                  ],
                                  "failures": [
                                    "0d0574ee-92f2-4eb4-be1c-d0bb34d7145d",
                                    "3e84bff9-a08b-49e8-a93c-fa6d354c3976"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 16,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c5e5663c-680f-475a-a5bd-ffb5baec0e2a",
                                  "title": "测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1499,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "3b0bbdc8-b7b0-4369-835e-3c503e7fe5af",
                                      "parentUUID": "c5e5663c-680f-475a-a5bd-ffb5baec0e2a",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "8a3797b6-7015-403d-9183-e8110aab63a7",
                                      "parentUUID": "c5e5663c-680f-475a-a5bd-ffb5baec0e2a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "570aa7a1-cd8b-496a-a99e-3279db9c9635",
                                      "parentUUID": "c5e5663c-680f-475a-a5bd-ffb5baec0e2a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "c08f114b-4878-46d7-9f56-ebf47ed0549b",
                                      "parentUUID": "c5e5663c-680f-475a-a5bd-ffb5baec0e2a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "e80a119b-d6fd-4d23-8274-232aa73b3b15",
                                      "parentUUID": "c5e5663c-680f-475a-a5bd-ffb5baec0e2a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "1e82b3dc-c57e-4f17-af3f-f337fb6954af",
                                      "parentUUID": "c5e5663c-680f-475a-a5bd-ffb5baec0e2a",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "8a3797b6-7015-403d-9183-e8110aab63a7",
                                    "570aa7a1-cd8b-496a-a99e-3279db9c9635",
                                    "c08f114b-4878-46d7-9f56-ebf47ed0549b",
                                    "e80a119b-d6fd-4d23-8274-232aa73b3b15",
                                    "1e82b3dc-c57e-4f17-af3f-f337fb6954af"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                  "title": "测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2269,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "32647abf-429b-4788-8ced-0311930b2a2d",
                                      "parentUUID": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "06cb9eb7-a901-4067-8941-39f21e715808",
                                      "parentUUID": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "a85ec2cd-18d0-4bb7-869a-3bff2d054410",
                                      "parentUUID": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "42ac2668-e0d7-48fd-b590-84b5bccd9731",
                                      "parentUUID": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "c1ec2281-974c-474a-8600-b854c8ffab49",
                                      "parentUUID": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6e9183b4-1f68-4e87-9ef0-bbd479a12f16",
                                      "parentUUID": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1ca9986d-b44c-4450-8e94-824f8a360da5",
                                      "parentUUID": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "0de092db-956a-41ff-a374-9efd81bc6f8c",
                                      "parentUUID": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: C4F467745BFF303A1D0FE3B565EBDFFBC8DD20D230109C2F3C3BDB9AEB7EE85A, blob 12000022800000002400019d3b61d4838d7ea4c680000000000000003566346337643736000000000000957ec797ff0e2c6148c81689efe013759c5d51a26840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100972e38ed8f08e0c55e12b46a130060bfe192751a184530a17c42f62cb405d6cd022031f9b64d50141a9b321e04daf17713c0a9e0c249fcfc6352b76de8410aca37248114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: C4F467745BFF303A1D0FE3B565EBDFFBC8DD20D230109C2F3C3BDB9AEB7EE85A, blob 12000022800000002400019d3b61d4838d7ea4c680000000000000003566346337643736000000000000957ec797ff0e2c6148c81689efe013759c5d51a26840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100972e38ed8f08e0c55e12b46a130060bfe192751a184530a17c42f62cb405d6cd022031f9b64d50141a9b321e04daf17713c0a9e0c249fcfc6352b76de8410aca37248114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "cae55103-f797-494e-9f0a-1812c4ccdc32",
                                      "parentUUID": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "55803943-a0f6-41a4-a612-9bfc042d23a0",
                                      "parentUUID": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "b2d278fa-7a9f-45e3-9fbb-31a8601894d4",
                                      "parentUUID": "160db6f9-9343-4ad8-ba01-a1fd31e2d14d",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "6e9183b4-1f68-4e87-9ef0-bbd479a12f16",
                                    "1ca9986d-b44c-4450-8e94-824f8a360da5"
                                  ],
                                  "failures": [
                                    "06cb9eb7-a901-4067-8941-39f21e715808",
                                    "a85ec2cd-18d0-4bb7-869a-3bff2d054410",
                                    "42ac2668-e0d7-48fd-b590-84b5bccd9731",
                                    "c1ec2281-974c-474a-8600-b854c8ffab49",
                                    "0de092db-956a-41ff-a374-9efd81bc6f8c",
                                    "cae55103-f797-494e-9f0a-1812c4ccdc32",
                                    "55803943-a0f6-41a4-a612-9bfc042d23a0",
                                    "b2d278fa-7a9f-45e3-9fbb-31a8601894d4"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 13,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "87aa4c3b-e926-45f2-9aba-4d811788ae73",
                                  "title": "测试增发-[币种:5f4c7d76] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试增发-[币种:5f4c7d76] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 308,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "b1b525aa-96d2-4ecc-acc6-58a425152e7c",
                                      "parentUUID": "87aa4c3b-e926-45f2-9aba-4d811788ae73",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试增发-[币种:5f4c7d76] [方式:jt_signTransaction] 0370\t增发可增发的代币自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 797B39F7EA875CAF5C6E4A240C6757BE70F4D230476F384C6A5193B24B6643AF, blob 12000122800200002400019d3b68400000000000000a6cd49ff973cafa80000000000000003566346337643736000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100c32cfc4d5ee986f982500b7620008c79cfc593b9b3a78e283e252cf3d7f430f202205567ace981f89852aff29633193393b7d7ac895d2a31f01670fdc998beab2ebb8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333734041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 797B39F7EA875CAF5C6E4A240C6757BE70F4D230476F384C6A5193B24B6643AF, blob 12000122800200002400019d3b68400000000000000a6cd49ff973cafa80000000000000003566346337643736000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100c32cfc4d5ee986f982500b7620008c79cfc593b9b3a78e283e252cf3d7f430f202205567ace981f89852aff29633193393b7d7ac895d2a31f01670fdc998beab2ebb8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333734041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "a797e5cd-abc6-4086-a798-550e6021d38e",
                                      "parentUUID": "87aa4c3b-e926-45f2-9aba-4d811788ae73",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "a797e5cd-abc6-4086-a798-550e6021d38e"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "fbc37e20-05a6-4f97-a32f-0e1c9ebc128b",
                                  "title": "测试销毁-[币种:5f4c7d76] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d76] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 873,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "53185dfa-a366-4455-8ab4-cd6967a89b69",
                                      "parentUUID": "fbc37e20-05a6-4f97-a32f-0e1c9ebc128b",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d76] [方式:jt_signTransaction] 0380\t销毁自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "a9a5c057-68d2-4f7b-a1f0-ea35163055da",
                                      "parentUUID": "fbc37e20-05a6-4f97-a32f-0e1c9ebc128b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d76] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: F5243D7B1F7BBF6DD284CB8FE5C4E27CB31547903675A1B7342CC77469FA1A9C, blob 12000122800200002400019d3b68400000000000000a6c98a316a9e9a40e800000000000003566346337643736000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100ecc72ff716d57f3bf11d57f7e3f6aea67600054b4353e08659ca3d1d4ea755250220708ee02fca854ee85d100f18a9e3c871140b45a1ded924f22c3b54288b3087218114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333734041008, tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: F5243D7B1F7BBF6DD284CB8FE5C4E27CB31547903675A1B7342CC77469FA1A9C, blob 12000122800200002400019d3b68400000000000000a6c98a316a9e9a40e800000000000003566346337643736000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100ecc72ff716d57f3bf11d57f7e3f6aea67600054b4353e08659ca3d1d4ea755250220708ee02fca854ee85d100f18a9e3c871140b45a1ded924f22c3b54288b3087218114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333734041008, tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "c8245b98-1ce7-4a75-a7a5-6c2a5fb344ec",
                                      "parentUUID": "fbc37e20-05a6-4f97-a32f-0e1c9ebc128b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d76] [方式:jt_signTransaction] 0380\t销毁所有自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "6f48db4a-b31c-410d-8e08-8f5c66a271f5",
                                      "parentUUID": "fbc37e20-05a6-4f97-a32f-0e1c9ebc128b",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "a9a5c057-68d2-4f7b-a1f0-ea35163055da",
                                    "c8245b98-1ce7-4a75-a7a5-6c2a5fb344ec",
                                    "6f48db4a-b31c-410d-8e08-8f5c66a271f5"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "63300c4d-aa93-470a-80a5-fe71401cc323",
                              "title": "自定Issuer可增发可销毁代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                  "title": "测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 3175,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "db3b5a7b-4c7c-47f4-853c-262f2f0247da",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0270\t发行自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "0a410585-db39-4ea7-9080-f53bad71881b",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可增发可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0290\t发行自定Issuer可增发可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "568edef5-a055-4214-b58d-b53c646654bb",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可增发可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0300\t发行自定Issuer可增发可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0583dd3f-5c73-49d2-89bf-cebbe26704ea",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可增发可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected true to equal false",
                                        "estack": "AssertionError: expected true to equal false\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:575:19)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- true\n+ false\n"
                                      },
                                      "uuid": "1384c8a8-4479-4e17-abc2-049d10d7bcd5",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "810ced29-3d1a-48f3-b737-63e317977eed",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "57176b06-e965-4d23-9af7-a2411c017607",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 803132B82C6B8D2A13983C2ED812A8689FE0A50B27158D486F0B305C6C3B2944, blob 12000122800300002400019d3b68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402201b0ba844b0733dd352309f1349890ba4a1834a29dbb69763d53159bd79ce550a022009ce433f36fed7495b63790e5c628b959cff127b6658f309954de0d16e054b138114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333736041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 803132B82C6B8D2A13983C2ED812A8689FE0A50B27158D486F0B305C6C3B2944, blob 12000122800300002400019d3b68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e7237446304402201b0ba844b0733dd352309f1349890ba4a1834a29dbb69763d53159bd79ce550a022009ce433f36fed7495b63790e5c628b959cff127b6658f309954de0d16e054b138114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333736041008, tecNO_ENTRY No matching entry found.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "4929e728-afb1-4a7c-b156-0d20fa3fd7be",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e2b0c5d1-0eeb-45b0-b911-ab89d550a5d2",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c9d145cf-3dc3-4c41-bbbc-c2a6a3df71b9",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "afe2ac79-c3ae-4080-9edf-adca9eb5443f",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9bbca41b-a1eb-4724-81a0-929adc5e901f",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8e6f5d0c-db03-4ebe-a6a0-9ca0552c957d",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d7ad408c-0b3b-44c9-83bb-e4b68e836863",
                                      "parentUUID": "9b6c0ee0-5b6f-40e3-9231-e806371f7522",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "568edef5-a055-4214-b58d-b53c646654bb",
                                    "0583dd3f-5c73-49d2-89bf-cebbe26704ea",
                                    "810ced29-3d1a-48f3-b737-63e317977eed",
                                    "57176b06-e965-4d23-9af7-a2411c017607",
                                    "e2b0c5d1-0eeb-45b0-b911-ab89d550a5d2",
                                    "c9d145cf-3dc3-4c41-bbbc-c2a6a3df71b9",
                                    "afe2ac79-c3ae-4080-9edf-adca9eb5443f",
                                    "9bbca41b-a1eb-4724-81a0-929adc5e901f",
                                    "8e6f5d0c-db03-4ebe-a6a0-9ca0552c957d",
                                    "d7ad408c-0b3b-44c9-83bb-e4b68e836863"
                                  ],
                                  "failures": [
                                    "0a410585-db39-4ea7-9080-f53bad71881b",
                                    "1384c8a8-4479-4e17-abc2-049d10d7bcd5",
                                    "4929e728-afb1-4a7c-b156-0d20fa3fd7be"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 10,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                  "title": "测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2157,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "b8d32641-df78-4ae4-8190-58b3a2388c0a",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可增发可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0010\t发起自定Issuer可增发可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "d9abcf56-1282-4f42-acb8-7b2448ba6c28",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e8d5b9b9-f9ab-4af1-9a45-a53793e4b496",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "f481e23c-4867-4d8a-9741-55bf36891287",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "17ece17e-9be4-4238-9c4c-455da922a5c1",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0040\t发起自定Issuer可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c1ae0e84-831f-4e38-9fdc-fec3e1b2c22f",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0050\t发起自定Issuer可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e957a0df-d258-4df6-ab0b-ca9c6c6ea798",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0060\t发起自定Issuer可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bfc2affe-1e60-44ef-8ad7-24a81702ff3f",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可增发可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0070\t发起自定Issuer可增发可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a1e4a5a4-6497-4b83-b09b-4bedac5f81c9",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2aa8d773-287f-43c6-a85b-a0de6e28a946",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "397ffa55-d485-4eb9-ae83-18611d2f98e2",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0090\t发起自定Issuer可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8c52c10c-d366-49c5-9917-aad0e75d3242",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0100\t发起自定Issuer可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f49c4c4a-40f9-4a1b-92af-efe6dd84f6b5",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0110\t发起自定Issuer可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "06a80a06-a7f0-4445-ba3c-e824b1d0880f",
                                      "parentUUID": "6939e54e-7a07-4f93-9102-24382ebb4a1d",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "e8d5b9b9-f9ab-4af1-9a45-a53793e4b496",
                                    "17ece17e-9be4-4238-9c4c-455da922a5c1",
                                    "c1ae0e84-831f-4e38-9fdc-fec3e1b2c22f",
                                    "e957a0df-d258-4df6-ab0b-ca9c6c6ea798",
                                    "bfc2affe-1e60-44ef-8ad7-24a81702ff3f",
                                    "a1e4a5a4-6497-4b83-b09b-4bedac5f81c9",
                                    "2aa8d773-287f-43c6-a85b-a0de6e28a946",
                                    "397ffa55-d485-4eb9-ae83-18611d2f98e2",
                                    "8c52c10c-d366-49c5-9917-aad0e75d3242",
                                    "f49c4c4a-40f9-4a1b-92af-efe6dd84f6b5",
                                    "06a80a06-a7f0-4445-ba3c-e824b1d0880f"
                                  ],
                                  "failures": [
                                    "d9abcf56-1282-4f42-acb8-7b2448ba6c28",
                                    "f481e23c-4867-4d8a-9741-55bf36891287"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 11,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c0cc92d1-c7c4-4129-8fd6-0cf129cdcc1d",
                                  "title": "测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1559,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "10233952-21e5-4840-9bf7-0bf8f6271978",
                                      "parentUUID": "c0cc92d1-c7c4-4129-8fd6-0cf129cdcc1d",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "b91361f3-c999-40be-8e6d-68ac60253db8",
                                      "parentUUID": "c0cc92d1-c7c4-4129-8fd6-0cf129cdcc1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "cd4f6f71-aeb1-49b4-ba11-79c5106052fd",
                                      "parentUUID": "c0cc92d1-c7c4-4129-8fd6-0cf129cdcc1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "af5f1ccc-b21f-4e42-b540-58abdf6ff405",
                                      "parentUUID": "c0cc92d1-c7c4-4129-8fd6-0cf129cdcc1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "6761b8d7-8631-425d-a066-764ec6b16175",
                                      "parentUUID": "c0cc92d1-c7c4-4129-8fd6-0cf129cdcc1d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "34777ded-8d84-484d-9991-c14297f07c03",
                                      "parentUUID": "c0cc92d1-c7c4-4129-8fd6-0cf129cdcc1d",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "b91361f3-c999-40be-8e6d-68ac60253db8",
                                    "cd4f6f71-aeb1-49b4-ba11-79c5106052fd",
                                    "af5f1ccc-b21f-4e42-b540-58abdf6ff405",
                                    "6761b8d7-8631-425d-a066-764ec6b16175",
                                    "34777ded-8d84-484d-9991-c14297f07c03"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 9,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                  "title": "测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2312,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "df0ee084-1810-4317-bb63-2ba78be5f340",
                                      "parentUUID": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "44ad5731-7865-432b-a026-47fb2ed24de0",
                                      "parentUUID": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "7b5438e2-54f2-492f-a428-08f9950cd0cb",
                                      "parentUUID": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "771fee7e-a3be-41c1-bf02-dac6e0f1cfdd",
                                      "parentUUID": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "61686bdb-a730-4867-89a9-119e1b665e6a",
                                      "parentUUID": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9212ac4e-5880-475a-8432-af260172e5b6",
                                      "parentUUID": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bb755b5f-9406-4e0f-9526-e8b1234cceb1",
                                      "parentUUID": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "069ea46a-32d7-4339-a38c-0008cc98cd25",
                                      "parentUUID": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 7BE94CD86C44F026E0324D3E1FAC2678557FE4076EE644FD43863C84B5F5546F, blob 12000022800000002400019d3b61d4838d7ea4c680000000000000003566346337643738000000000000957ec797ff0e2c6148c81689efe013759c5d51a26840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100ae4775bbeb97865142526123bc3175e249cd679150004f089e90cf4855c01fe502206e3292a91871eb875e0d2994198cc0468e60097d22f006308c1812934030f4e28114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 7BE94CD86C44F026E0324D3E1FAC2678557FE4076EE644FD43863C84B5F5546F, blob 12000022800000002400019d3b61d4838d7ea4c680000000000000003566346337643738000000000000957ec797ff0e2c6148c81689efe013759c5d51a26840038d7ea4c67fff7321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100ae4775bbeb97865142526123bc3175e249cd679150004f089e90cf4855c01fe502206e3292a91871eb875e0d2994198cc0468e60097d22f006308c1812934030f4e28114957ec797ff0e2c6148c81689efe013759c5d51a28314e7c5dea048765c00c5996959e6332fd33d4d4f01f9ea7d146175746f746573743a20746f6b656e2074657374e1f1, terNO_ACCOUNT The source account does not exist.' to include 'telINSUF_FEE_P Fee insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "8e7b8fac-b835-415b-95dc-ada0393309d4",
                                      "parentUUID": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "268ba9e2-7c92-43ab-96b3-141cc3e829fd",
                                      "parentUUID": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "68223593-89cd-4f62-a4c6-39c0895e862e",
                                      "parentUUID": "9e8beec9-98f2-4ad8-8a5c-f1cf85dcff30",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "9212ac4e-5880-475a-8432-af260172e5b6",
                                    "bb755b5f-9406-4e0f-9526-e8b1234cceb1"
                                  ],
                                  "failures": [
                                    "44ad5731-7865-432b-a026-47fb2ed24de0",
                                    "7b5438e2-54f2-492f-a428-08f9950cd0cb",
                                    "771fee7e-a3be-41c1-bf02-dac6e0f1cfdd",
                                    "61686bdb-a730-4867-89a9-119e1b665e6a",
                                    "069ea46a-32d7-4339-a38c-0008cc98cd25",
                                    "8e7b8fac-b835-415b-95dc-ada0393309d4",
                                    "268ba9e2-7c92-43ab-96b3-141cc3e829fd",
                                    "68223593-89cd-4f62-a4c6-39c0895e862e"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 13,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "0550aa53-f5ca-4db2-bd37-d213a1fec20d",
                                  "title": "测试增发-[币种:5f4c7d78] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试增发-[币种:5f4c7d78] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 286,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "16717b66-fef3-423a-89f6-edb2dffdf8db",
                                      "parentUUID": "0550aa53-f5ca-4db2-bd37-d213a1fec20d",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试增发-[币种:5f4c7d78] [方式:jt_signTransaction] 0370\t增发可增发的代币自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "233d6921-d225-4b8c-836e-51be642cbe4f",
                                      "parentUUID": "0550aa53-f5ca-4db2-bd37-d213a1fec20d",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "233d6921-d225-4b8c-836e-51be642cbe4f"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 0,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "fdbcf317-347a-4379-9100-6d15159bb00e",
                                  "title": "测试销毁-[币种:5f4c7d78] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d78] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 878,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "8020c126-f5be-4411-b515-46551028fc6d",
                                      "parentUUID": "fdbcf317-347a-4379-9100-6d15159bb00e",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d78] [方式:jt_signTransaction] 0380\t销毁自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "f072c15b-c0f3-42fa-b18b-bd7905730f26",
                                      "parentUUID": "fdbcf317-347a-4379-9100-6d15159bb00e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d78] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: 26B354DACD3F9D7363EA56DAC1927A96A60FDC588E8DB7CF1DDC1142A13B96A9, blob 12000122800300002400019d3b68400000000000000a6c98a316a9e9a40e800000000000003566346337643738000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100a96cef06ce536505ccacf899b05f5c07c524833231d60d660a78395b2494805e02205e4b7a497de0584ebcd8c069512a6a1b49a19a0269d2e4fc639219c1bb990b5d8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333736041008, tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: 26B354DACD3F9D7363EA56DAC1927A96A60FDC588E8DB7CF1DDC1142A13B96A9, blob 12000122800300002400019d3b68400000000000000a6c98a316a9e9a40e800000000000003566346337643738000000000000957ec797ff0e2c6148c81689efe013759c5d51a27321021856881c36ba13d244134464ffeb5fd9ec3ed3512cee81e1622d731c5041e72374473045022100a96cef06ce536505ccacf899b05f5c07c524833231d60d660a78395b2494805e02205e4b7a497de0584ebcd8c069512a6a1b49a19a0269d2e4fc639219c1bb990b5d8114957ec797ff0e2c6148c81689efe013759c5d51a28214957ec797ff0e2c6148c81689efe013759c5d51a2911254657374436f696e31353938383438333736041008, tecNO_ENTRY No matching entry found.' to include 'telINSUF_FUND Fund insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "028816c8-a3ef-4ff9-ad93-a1a3ce5f4926",
                                      "parentUUID": "fdbcf317-347a-4379-9100-6d15159bb00e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5f4c7d78] [方式:jt_signTransaction] 0380\t销毁所有自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "c3dc9339-410d-435a-87ed-df9bc438ce99",
                                      "parentUUID": "fdbcf317-347a-4379-9100-6d15159bb00e",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "f072c15b-c0f3-42fa-b18b-bd7905730f26",
                                    "028816c8-a3ef-4ff9-ad93-a1a3ce5f4926",
                                    "c3dc9339-410d-435a-87ed-df9bc438ce99"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "3836e2f3-d9d5-4dec-a570-bd22477e3e9d",
                              "title": "全局CNYT测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                  "title": "测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 3085,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "a265f886-7df7-4585-864f-50a1cd98b8d0",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起全局CNYT有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0010\t发起全局CNYT有效交易_01",
                                      "timedOut": false,
                                      "duration": 2290,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3ee6bb4d-0e68-49fe-bc79-07eabe5e1bd9",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起全局CNYT无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0030\t发起全局CNYT无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d7055e6b-b9d0-43c4-8ce8-b3a02dff1ae4",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起全局CNYT无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0030\t发起全局CNYT无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "16f21911-cdbd-4539-b319-260cb1b8a421",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起全局CNYT无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0030\t发起全局CNYT无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1e57b888-e9e8-4f4e-bb59-9b6dc387b9a7",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起全局CNYT无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0040\t发起全局CNYT无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ca4ccf4f-c220-463c-80f9-1f82f7ef2b0b",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起全局CNYT无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0050\t发起全局CNYT无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ad03a32c-1044-4cad-8930-bbcca8398e5d",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起全局CNYT无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0060\t发起全局CNYT无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5491f972-eed5-4360-9466-b8ec1118a4a6",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起全局CNYT无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0070\t发起全局CNYT无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "71c4e03e-7bde-4cf1-bc04-7f7815e753fe",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起全局CNYT无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0080\t发起全局CNYT无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9ad66700-37eb-47d7-8f70-2aff69d65a80",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起全局CNYT无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0080\t发起全局CNYT无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "438e34ef-0ffe-4d7d-ad24-4c71d833e520",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起全局CNYT无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0090\t发起全局CNYT无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a98921d8-d75f-4d5c-b62e-b3c47f5e89f1",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起全局CNYT无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0100\t发起全局CNYT无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3d441863-76b0-4b61-9c37-3f487fee5b15",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起全局CNYT无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试基本交易-[币种:全局CNYT] [方式:jt_signTransaction] 0110\t发起全局CNYT无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 0,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fefa4734-17ce-4dca-b390-4a2e33e76577",
                                      "parentUUID": "cb8a9cf1-d3f5-4f37-939a-4a171ad1b725",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "3ee6bb4d-0e68-49fe-bc79-07eabe5e1bd9",
                                    "d7055e6b-b9d0-43c4-8ce8-b3a02dff1ae4",
                                    "1e57b888-e9e8-4f4e-bb59-9b6dc387b9a7",
                                    "ca4ccf4f-c220-463c-80f9-1f82f7ef2b0b",
                                    "ad03a32c-1044-4cad-8930-bbcca8398e5d",
                                    "5491f972-eed5-4360-9466-b8ec1118a4a6",
                                    "71c4e03e-7bde-4cf1-bc04-7f7815e753fe",
                                    "9ad66700-37eb-47d7-8f70-2aff69d65a80",
                                    "438e34ef-0ffe-4d7d-ad24-4c71d833e520",
                                    "a98921d8-d75f-4d5c-b62e-b3c47f5e89f1",
                                    "3d441863-76b0-4b61-9c37-3f487fee5b15",
                                    "fefa4734-17ce-4dca-b390-4a2e33e76577"
                                  ],
                                  "failures": [
                                    "16f21911-cdbd-4539-b319-260cb1b8a421"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 2301,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "3f393354-118f-4be2-821b-feec25dc5bb7",
                                  "title": "测试交易memo-[币种:全局CNYT] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1501,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "e4c5a9fe-6d07-4f6a-9909-ebb1cf170049",
                                      "parentUUID": "3f393354-118f-4be2-821b-feec25dc5bb7",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 4446,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8f6a75ed-4cf3-4c04-afb2-fc251e9dadba",
                                      "parentUUID": "3f393354-118f-4be2-821b-feec25dc5bb7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 157,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "714bd215-434e-4214-84c9-7f0c54256ba8",
                                      "parentUUID": "3f393354-118f-4be2-821b-feec25dc5bb7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 145,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "59225877-1def-4815-b966-9def88888895",
                                      "parentUUID": "3f393354-118f-4be2-821b-feec25dc5bb7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 146,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "113b3cdf-ffc5-46f9-863b-6981ba92e438",
                                      "parentUUID": "3f393354-118f-4be2-821b-feec25dc5bb7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易memo-[币种:全局CNYT] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 152,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9e45d261-bc36-4f4c-a2a6-b9194ce4d258",
                                      "parentUUID": "3f393354-118f-4be2-821b-feec25dc5bb7",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "8f6a75ed-4cf3-4c04-afb2-fc251e9dadba",
                                    "714bd215-434e-4214-84c9-7f0c54256ba8",
                                    "59225877-1def-4815-b966-9def88888895",
                                    "113b3cdf-ffc5-46f9-863b-6981ba92e438",
                                    "9e45d261-bc36-4f4c-a2a6-b9194ce4d258"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5046,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                  "title": "测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 2443,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "78396296-7460-4d1b-85ea-1f6804a71541",
                                      "parentUUID": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1225,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b9eebdd0-03ed-4584-a75f-0723af02cfae",
                                      "parentUUID": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 146,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "145dc06b-8582-4853-ab79-a0fdab4c4ca6",
                                      "parentUUID": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 152,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "45b32469-c3bc-4c2e-8986-454621e1e521",
                                      "parentUUID": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 145,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "510e51cc-8ff9-4610-a719-f67219e5d43a",
                                      "parentUUID": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0a62c394-9e6b-4178-896c-80e875596501",
                                      "parentUUID": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b68c84a6-acfe-4834-8f42-4a6b0794effb",
                                      "parentUUID": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "4f074121-904c-4d79-a8f3-1dc8bb5e7e58",
                                      "parentUUID": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包全局CNYT余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包全局CNYT余额的整数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "95a3af85-751a-4e75-baf5-be47bef90454",
                                      "parentUUID": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "06b0fa7e-f7ac-4af1-898f-d539b3eb0113",
                                      "parentUUID": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试交易Fee-[币种:全局CNYT] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:588:23)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "4708ed5a-beb7-4a8e-8cbb-6d9ba4cf5c8b",
                                      "parentUUID": "5efdfc8e-d232-4802-8af5-560ead8b2744",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "b9eebdd0-03ed-4584-a75f-0723af02cfae",
                                    "145dc06b-8582-4853-ab79-a0fdab4c4ca6",
                                    "45b32469-c3bc-4c2e-8986-454621e1e521",
                                    "510e51cc-8ff9-4610-a719-f67219e5d43a",
                                    "0a62c394-9e6b-4178-896c-80e875596501",
                                    "b68c84a6-acfe-4834-8f42-4a6b0794effb",
                                    "95a3af85-751a-4e75-baf5-be47bef90454"
                                  ],
                                  "failures": [
                                    "4f074121-904c-4d79-a8f3-1dc8bb5e7e58",
                                    "06b0fa7e-f7ac-4af1-898f-d539b3eb0113",
                                    "4708ed5a-beb7-4a8e-8cbb-6d9ba4cf5c8b"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1676,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "d8fa88d5-96bc-4ade-9a02-93cbe829b5b0",
                                  "title": "测试增发-[币种:CNYT] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试增发-[币种:CNYT] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 287,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "a1500ba8-f874-4cda-9ce7-b13efb195f55",
                                      "parentUUID": "d8fa88d5-96bc-4ade-9a02-93cbe829b5b0",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币全局CNYT",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试增发-[币种:CNYT] [方式:jt_signTransaction] 0370\t增发可增发的代币全局CNYT",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "2eabf0ec-6017-42d2-aa79-c1321448b6c5",
                                      "parentUUID": "d8fa88d5-96bc-4ade-9a02-93cbe829b5b0",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "2eabf0ec-6017-42d2-aa79-c1321448b6c5"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "546d613e-b931-4e4a-b9da-d805a9113f78",
                                  "title": "测试销毁-[币种:CNYT] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试销毁-[币种:CNYT] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 896,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "960f89fa-3360-45eb-bbcf-47dcd2a55e25",
                                      "parentUUID": "546d613e-b931-4e4a-b9da-d805a9113f78",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁全局CNYT",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试销毁-[币种:CNYT] [方式:jt_signTransaction] 0380\t销毁全局CNYT",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "244d1ca8-2df0-4247-bdff-4ceb85762cca",
                                      "parentUUID": "546d613e-b931-4e4a-b9da-d805a9113f78",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量全局CNYT",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试销毁-[币种:CNYT] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量全局CNYT",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction: DB7178B6F4A10262C99BA148608D6872A3B1DBBCF9347DB40842D0E37BCCB80C, blob 12000122800300002400012eea68400000000000000a6c98a316a9e9a40e8000000000000000000000434e59540000000000000000000000000000000000000000000000000000732103b713e69079fa3b4be679aef363deabc39750764ba381f21f9f895011972541fb74473045022100e67580e429f96856104552f8e1e025e5348790e5493a769fd7b7ddb3efb807240220797447743f1f2a0564de7e026c28a3ae7ec96f23121f67814d5df8f325e1384681140f84c457e3798dc14035988226c37077a497973b82140f84c457e3798dc14035988226c37077a497973b9109434e5920546f6b656e041008, tefSYMBOL_USED Symbol has been used.' to include 'telINSUF_FUND Fund insufficient'",
                                        "estack": "AssertionError: expected 'failed to submit transaction: DB7178B6F4A10262C99BA148608D6872A3B1DBBCF9347DB40842D0E37BCCB80C, blob 12000122800300002400012eea68400000000000000a6c98a316a9e9a40e8000000000000000000000434e59540000000000000000000000000000000000000000000000000000732103b713e69079fa3b4be679aef363deabc39750764ba381f21f9f895011972541fb74473045022100e67580e429f96856104552f8e1e025e5348790e5493a769fd7b7ddb3efb807240220797447743f1f2a0564de7e026c28a3ae7ec96f23121f67814d5df8f325e1384681140f84c457e3798dc14035988226c37077a497973b82140f84c457e3798dc14035988226c37077a497973b9109434e5920546f6b656e041008, tefSYMBOL_USED Symbol has been used.' to include 'telINSUF_FUND Fund insufficient'\n    at Object.checkResponseError (test\\framework\\framework.js:848:32)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:411:31)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": null
                                      },
                                      "uuid": "1e419fec-1f1a-427f-9251-713894f19ad6",
                                      "parentUUID": "546d613e-b931-4e4a-b9da-d805a9113f78",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有全局CNYT",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 全局CNYT测试：jt_signTransaction 测试销毁-[币种:CNYT] [方式:jt_signTransaction] 0380\t销毁所有全局CNYT",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected false to equal true",
                                        "estack": "AssertionError: expected false to equal true\n    at Object.checkResponse (test\\framework\\framework.js:842:59)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:390:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:382:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:378:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:443:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:585:29)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                                        "diff": "- false\n+ true\n"
                                      },
                                      "uuid": "435f9820-19da-4225-94c0-e12c4a996f4d",
                                      "parentUUID": "546d613e-b931-4e4a-b9da-d805a9113f78",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [],
                                  "failures": [
                                    "244d1ca8-2df0-4247-bdff-4ceb85762cca",
                                    "1e419fec-1f1a-427f-9251-713894f19ad6",
                                    "435f9820-19da-4225-94c0-e12c4a996f4d"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            }
                          ],
                          "passes": [],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 0,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                      "title": "测试jt_sendRawTransaction",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction \"before all\" hook",
                          "timedOut": false,
                          "duration": 9597,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "383e9ee4-dc98-4f17-afe0-f339a4385683",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t有效的单个交易数据\n",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0010\t有效的单个交易数据\n",
                          "timedOut": false,
                          "duration": 72,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "dde2b64a-5e9a-4512-9d31-778e5515f637",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效的单个交易数据：使用过的sequence",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0020\t无效的单个交易数据：使用过的sequence",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "219bd96b-9534-4c8a-9ed0-428483b6f53e",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效的单个交易数据：未激活的发送帐号",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0020\t无效的单个交易数据：未激活的发送帐号",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "0698d03a-a37d-4c9f-84cf-ea900e7f7225",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效的单个交易数据：余额不足",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0020\t无效的单个交易数据：余额不足",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "93967a78-0c4b-4540-b037-0c2062805fbe",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效的单个交易数据：空交易",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0020\t无效的单个交易数据：空交易",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "3cbb473d-c1b4-4185-a51d-2712723fc45e",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效的单个交易数据：参数为空数组",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0020\t无效的单个交易数据：参数为空数组",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "0c1db3d4-6a28-4afa-be48-d72ee21a7839",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效的单个交易数据：错误的rawTx格式1",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0020\t无效的单个交易数据：错误的rawTx格式1",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "482b3c33-da3f-4416-a318-ee9085d90221",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效的单个交易数据：错误的rawTx格式3",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0020\t无效的单个交易数据：错误的rawTx格式3",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "2fb8a034-c294-45c2-96e8-60637abe1f62",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效的单个交易数据：错误的rawTx格式4",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0020\t无效的单个交易数据：错误的rawTx格式4",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "dc355544-3a08-440e-81d2-db107d7b77b0",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t多个有效的交易数据\n",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0030\t多个有效的交易数据\n",
                          "timedOut": false,
                          "duration": 819,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f65bb66d-0389-4893-aa45-9ffc1cff3670",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t多个无效的交易数据",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0040\t多个无效的交易数据",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "cbe796d6-0d70-4533-9eeb-c2237c006c58",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0050\t多个交易数据，部分有效部分无效\n",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0050\t多个交易数据，部分有效部分无效\n",
                          "timedOut": false,
                          "duration": 0,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 0 to equal 10",
                            "estack": "AssertionError: expected 0 to equal 10\n    at Object.checkForSendRawTxs [as checkFunction] (test\\testCases\\tcsSendRawTx.js:317:42)\n    at Context.<anonymous> (test\\framework\\framework.js:645:40)",
                            "diff": "- 0\n+ 10\n"
                          },
                          "uuid": "ae469fcf-b431-4ca0-9a2d-e17ef5ef653c",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0060\t大量交易数据测试_01：输入上千、上万个有效的交易数据，测试大量交易数据是否有上限\n",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0060\t大量交易数据测试_01：输入上千、上万个有效的交易数据，测试大量交易数据是否有上限\n",
                          "timedOut": false,
                          "duration": 4653,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "8763f951-2797-4300-9e97-ca1dc71e0960",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0070\t大量交易数据测试_02：输入上万、几十万个无效的交易数据\n",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试jt_sendRawTransaction 0070\t大量交易数据测试_02：输入上万、几十万个无效的交易数据\n",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "15252128-b1df-48aa-8453-9a11a20529fd",
                          "parentUUID": "9555bcb6-7f59-4633-8fa1-a2a50ddd1238",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "dde2b64a-5e9a-4512-9d31-778e5515f637",
                        "219bd96b-9534-4c8a-9ed0-428483b6f53e",
                        "0698d03a-a37d-4c9f-84cf-ea900e7f7225",
                        "93967a78-0c4b-4540-b037-0c2062805fbe",
                        "3cbb473d-c1b4-4185-a51d-2712723fc45e",
                        "0c1db3d4-6a28-4afa-be48-d72ee21a7839",
                        "482b3c33-da3f-4416-a318-ee9085d90221",
                        "2fb8a034-c294-45c2-96e8-60637abe1f62",
                        "dc355544-3a08-440e-81d2-db107d7b77b0",
                        "f65bb66d-0389-4893-aa45-9ffc1cff3670",
                        "cbe796d6-0d70-4533-9eeb-c2237c006c58",
                        "8763f951-2797-4300-9e97-ca1dc71e0960",
                        "15252128-b1df-48aa-8453-9a11a20529fd"
                      ],
                      "failures": [
                        "ae469fcf-b431-4ca0-9a2d-e17ef5ef653c"
                      ],
                      "pending": [],
                      "skipped": [],
                      "duration": 5552,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "0a27b289-3e08-4295-ba4e-80b0a9c2813c",
                      "title": "交互性测试",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "6ecebe37-7bf9-4051-b3cf-816f3195ad80",
                          "title": "发送底层币/代币的交互性测试：底层币",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币 \"before all\" hook",
                              "timedOut": false,
                              "duration": 7883,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "fa772a41-44ab-4be9-88c6-44f7aa7b998f",
                              "parentUUID": "6ecebe37-7bf9-4051-b3cf-816f3195ad80",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t同时发起多个底层币发送交易_余额足够（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币 0010\t同时发起多个底层币发送交易_余额足够（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 281,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "3d00a53b-1254-41ef-8c3b-0446a088e33d",
                              "parentUUID": "6ecebe37-7bf9-4051-b3cf-816f3195ad80",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0020\t同时发起多个底层币发送交易_余额足够（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币 0020\t同时发起多个底层币发送交易_余额足够（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 279,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "57fb2a8a-eacd-43ad-acab-b61f1c681234",
                              "parentUUID": "6ecebe37-7bf9-4051-b3cf-816f3195ad80",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0030\t同时发起多个底层币发送交易_余额不够（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币 0030\t同时发起多个底层币发送交易_余额不够（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 268,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "0f1a261d-47ea-423f-8300-4882d9563c40",
                              "parentUUID": "6ecebe37-7bf9-4051-b3cf-816f3195ad80",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0031\t同时向不同节点发起多个底层币发送交易_余额不够（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币 0031\t同时向不同节点发起多个底层币发送交易_余额不够（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 283,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "275f2b31-e669-4133-a76d-3cb9c7f821c0",
                              "parentUUID": "6ecebe37-7bf9-4051-b3cf-816f3195ad80",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0040\t同时发起多个底层币发送交易_余额不够（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币 0040\t同时发起多个底层币发送交易_余额不够（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 274,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "a22fddc0-8cce-44fc-aa74-65dacc8c680d",
                              "parentUUID": "6ecebe37-7bf9-4051-b3cf-816f3195ad80",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0041\t同时向不同节点发起多个底层币发送交易_余额不够（通过jt_signTransaction测试）\n",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币 0041\t同时向不同节点发起多个底层币发送交易_余额不够（通过jt_signTransaction测试）\n",
                              "timedOut": false,
                              "duration": 309,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "72c21d3a-edfe-4609-8e7d-bcbbdcb07e0a",
                              "parentUUID": "6ecebe37-7bf9-4051-b3cf-816f3195ad80",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "3d00a53b-1254-41ef-8c3b-0446a088e33d",
                            "57fb2a8a-eacd-43ad-acab-b61f1c681234",
                            "0f1a261d-47ea-423f-8300-4882d9563c40",
                            "275f2b31-e669-4133-a76d-3cb9c7f821c0",
                            "a22fddc0-8cce-44fc-aa74-65dacc8c680d",
                            "72c21d3a-edfe-4609-8e7d-bcbbdcb07e0a"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 1694,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "10cf1388-5538-4d9e-82d4-56833004df7c",
                          "title": "发送底层币/代币的交互性测试：代币",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币 \"before all\" hook",
                              "timedOut": false,
                              "duration": 9142,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "eafb3334-f5bc-47e5-a298-07b72bcfb757",
                              "parentUUID": "10cf1388-5538-4d9e-82d4-56833004df7c",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0050\t同时发起多个代币发送交易_余额足够（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币 0050\t同时发起多个代币发送交易_余额足够（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 268,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "2f4fe38f-28dc-4ef5-b1a9-df58738aae95",
                              "parentUUID": "10cf1388-5538-4d9e-82d4-56833004df7c",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0060\t同时发起多个代币发送交易_余额足够（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币 0060\t同时发起多个代币发送交易_余额足够（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 324,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "8e872a70-4aea-4206-93ba-dd594ceab968",
                              "parentUUID": "10cf1388-5538-4d9e-82d4-56833004df7c",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0070\t同时发起多个代币发送交易_余额不够（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币 0070\t同时发起多个代币发送交易_余额不够（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 355,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "cd28ba1f-0005-409e-b6cb-3eceaaf92e82",
                              "parentUUID": "10cf1388-5538-4d9e-82d4-56833004df7c",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0071\t同时向不同节点发起多个代币发送交易_余额不够（通过jt_sendTransaction测试）\n",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币 0071\t同时向不同节点发起多个代币发送交易_余额不够（通过jt_sendTransaction测试）\n",
                              "timedOut": false,
                              "duration": 324,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "b8d9ef05-cdc2-4ef1-bf47-b7f266720f7f",
                              "parentUUID": "10cf1388-5538-4d9e-82d4-56833004df7c",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0080\t同时发起多个代币发送交易_余额不够（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币 0080\t同时发起多个代币发送交易_余额不够（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 263,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "549a202c-d328-4a22-b6c1-99566ca5f5f4",
                              "parentUUID": "10cf1388-5538-4d9e-82d4-56833004df7c",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0081\t同时向不同节点发起多个代币发送交易_余额不够（通过jt_signTransaction测试）\n",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币 0081\t同时向不同节点发起多个代币发送交易_余额不够（通过jt_signTransaction测试）\n",
                              "timedOut": false,
                              "duration": 3488,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "81987811-736f-42e1-87a2-f071cf864e04",
                              "parentUUID": "10cf1388-5538-4d9e-82d4-56833004df7c",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "2f4fe38f-28dc-4ef5-b1a9-df58738aae95",
                            "8e872a70-4aea-4206-93ba-dd594ceab968",
                            "cd28ba1f-0005-409e-b6cb-3eceaaf92e82",
                            "b8d9ef05-cdc2-4ef1-bf47-b7f266720f7f",
                            "549a202c-d328-4a22-b6c1-99566ca5f5f4",
                            "81987811-736f-42e1-87a2-f071cf864e04"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 5022,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "47b7eec0-6354-49c2-a95a-03c78a4ba48a",
                          "title": "发送底层币/代币的交互性测试：底层币、代币混合",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币混合 \"before all\" hook",
                              "timedOut": false,
                              "duration": 16868,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "e0e6d191-46ab-41fb-b7ea-bffa8f10eac0",
                              "parentUUID": "47b7eec0-6354-49c2-a95a-03c78a4ba48a",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0090\t同时发起多个底层币、代币发送交易_余额足够（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币混合 0090\t同时发起多个底层币、代币发送交易_余额足够（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 278,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "929c30cf-3930-4ead-8e7c-9793ef08d874",
                              "parentUUID": "47b7eec0-6354-49c2-a95a-03c78a4ba48a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0091\t同时发起多个底层币、代币发送交易_余额足够（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币混合 0091\t同时发起多个底层币、代币发送交易_余额足够（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 288,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "7918b416-341b-42c5-8718-e8afc944644f",
                              "parentUUID": "47b7eec0-6354-49c2-a95a-03c78a4ba48a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0100\t同时发起多个底层币、代币发送交易_余额不够（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币混合 0100\t同时发起多个底层币、代币发送交易_余额不够（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 294,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "660fe17c-7060-4034-8e23-4bb85f8e37e9",
                              "parentUUID": "47b7eec0-6354-49c2-a95a-03c78a4ba48a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0101\t同时发起多个底层币、代币发送交易_余额不够（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币混合 0101\t同时发起多个底层币、代币发送交易_余额不够（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 359,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "ab45141d-90a9-4e99-a02c-2749412c169d",
                              "parentUUID": "47b7eec0-6354-49c2-a95a-03c78a4ba48a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0102\t同时向不同节点发起多个底层币、代币发送交易_余额不够（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币混合 0102\t同时向不同节点发起多个底层币、代币发送交易_余额不够（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 1454,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "95271875-c63b-4a3e-b674-ac851d8cc837",
                              "parentUUID": "47b7eec0-6354-49c2-a95a-03c78a4ba48a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0103\t同时向不同节点发起多个底层币、代币发送交易_余额不够（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币混合 0103\t同时向不同节点发起多个底层币、代币发送交易_余额不够（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 278,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "6370adb9-78ac-46c4-87aa-c87478591811",
                              "parentUUID": "47b7eec0-6354-49c2-a95a-03c78a4ba48a",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "929c30cf-3930-4ead-8e7c-9793ef08d874",
                            "7918b416-341b-42c5-8718-e8afc944644f",
                            "660fe17c-7060-4034-8e23-4bb85f8e37e9",
                            "ab45141d-90a9-4e99-a02c-2749412c169d",
                            "95271875-c63b-4a3e-b674-ac851d8cc837",
                            "6370adb9-78ac-46c4-87aa-c87478591811"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 2951,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "a062b175-0cdf-4f31-92dd-2098c05aebca",
                          "title": "发送底层币/代币的交互性测试：底层币混合",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币混合 \"before all\" hook",
                              "timedOut": false,
                              "duration": 5786,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "45bb078b-a7cc-4e8d-b3b3-898b9f73c3d4",
                              "parentUUID": "a062b175-0cdf-4f31-92dd-2098c05aebca",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0110\t同时发送、接收底层币测试（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币混合 0110\t同时发送、接收底层币测试（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 258,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "8b05b0f4-9a60-45e5-a2d7-5eca7c68fd8f",
                              "parentUUID": "a062b175-0cdf-4f31-92dd-2098c05aebca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0111\t同时向不同节点发送、接收底层币测试（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币混合 0111\t同时向不同节点发送、接收底层币测试（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 257,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "53d79161-8110-4533-b76c-20da7b9f8aac",
                              "parentUUID": "a062b175-0cdf-4f31-92dd-2098c05aebca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0120\t同时发送、接收底层币测试（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币混合 0120\t同时发送、接收底层币测试（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 3563,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "7fafec17-f347-41e0-bb80-3b558eeb3a08",
                              "parentUUID": "a062b175-0cdf-4f31-92dd-2098c05aebca",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0121\t同时向不同节点发送、接收底层币测试（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币混合 0121\t同时向不同节点发送、接收底层币测试（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 262,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "9ef78021-fc01-4b02-854d-f7aa991b1bb8",
                              "parentUUID": "a062b175-0cdf-4f31-92dd-2098c05aebca",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "8b05b0f4-9a60-45e5-a2d7-5eca7c68fd8f",
                            "53d79161-8110-4533-b76c-20da7b9f8aac",
                            "7fafec17-f347-41e0-bb80-3b558eeb3a08",
                            "9ef78021-fc01-4b02-854d-f7aa991b1bb8"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 4340,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "d6799a34-fd36-42ff-a4f8-ecfd1dbb484e",
                          "title": "发送底层币/代币的交互性测试：代币混合",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币混合 \"before all\" hook",
                              "timedOut": false,
                              "duration": 6688,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "f46b31c3-a45a-4612-8900-544b2e0a220b",
                              "parentUUID": "d6799a34-fd36-42ff-a4f8-ecfd1dbb484e",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0130\t同时发送、接收代币测试（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币混合 0130\t同时发送、接收代币测试（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 280,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "24945693-b829-459b-bcb2-aae8bbef6aad",
                              "parentUUID": "d6799a34-fd36-42ff-a4f8-ecfd1dbb484e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0131\t同时向不同节点发送、接收代币测试（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币混合 0131\t同时向不同节点发送、接收代币测试（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 268,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "199fc5d3-edc3-4c29-b26a-54b00df5af92",
                              "parentUUID": "d6799a34-fd36-42ff-a4f8-ecfd1dbb484e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0140\t同时发送、接收代币测试（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币混合 0140\t同时发送、接收代币测试（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 2520,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "57f0b3b5-ab6f-427e-a205-bc65aa84f155",
                              "parentUUID": "d6799a34-fd36-42ff-a4f8-ecfd1dbb484e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0141\t同时向不同节点发送、接收代币测试（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：代币混合 0141\t同时向不同节点发送、接收代币测试（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 276,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 7 to equal 6",
                                "estack": "AssertionError: expected 7 to equal 6\n    at Object.checkSubCases [as checkFunction] (test\\framework\\framework.js:1154:41)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                                "diff": "- 7\n+ 6\n"
                              },
                              "uuid": "44737ac7-c46e-42a0-9c4e-1b0007e70bbb",
                              "parentUUID": "d6799a34-fd36-42ff-a4f8-ecfd1dbb484e",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "24945693-b829-459b-bcb2-aae8bbef6aad",
                            "199fc5d3-edc3-4c29-b26a-54b00df5af92",
                            "57f0b3b5-ab6f-427e-a205-bc65aa84f155"
                          ],
                          "failures": [
                            "44737ac7-c46e-42a0-9c4e-1b0007e70bbb"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 3344,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "9bbffe15-2153-4bec-8c4a-b740ca285018",
                          "title": "发送底层币/代币的交互性测试：底层币、代币同时混合",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币同时混合 \"before all\" hook",
                              "timedOut": false,
                              "duration": 6618,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "3c5c5153-6836-4531-b1eb-14c88c090efa",
                              "parentUUID": "9bbffe15-2153-4bec-8c4a-b740ca285018",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0150\t同时发送底层币、代币测试（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币同时混合 0150\t同时发送底层币、代币测试（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 268,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "1e50121f-ce5b-467c-92c8-bddc4f8a404e",
                              "parentUUID": "9bbffe15-2153-4bec-8c4a-b740ca285018",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0151\t同时向不同节点发送底层币、代币测试（通过jt_sendTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币同时混合 0151\t同时向不同节点发送底层币、代币测试（通过jt_sendTransaction测试）",
                              "timedOut": false,
                              "duration": 270,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "15f2a02a-5bae-4153-a456-b1dbc62359e9",
                              "parentUUID": "9bbffe15-2153-4bec-8c4a-b740ca285018",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0160\t同时发送底层币、代币测试（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币同时混合 0160\t同时发送底层币、代币测试（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 2487,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "cbda5261-27b8-4c20-9446-248a1b13282a",
                              "parentUUID": "9bbffe15-2153-4bec-8c4a-b740ca285018",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0161\t同时向不同节点发送底层币、代币测试（通过jt_signTransaction测试）",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 交互性测试 发送底层币/代币的交互性测试：底层币、代币同时混合 0161\t同时向不同节点发送底层币、代币测试（通过jt_signTransaction测试）",
                              "timedOut": false,
                              "duration": 272,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "af07d27f-8a6f-4a9e-8b88-0e753a48d365",
                              "parentUUID": "9bbffe15-2153-4bec-8c4a-b740ca285018",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "1e50121f-ce5b-467c-92c8-bddc4f8a404e",
                            "15f2a02a-5bae-4153-a456-b1dbc62359e9",
                            "cbda5261-27b8-4c20-9446-248a1b13282a",
                            "af07d27f-8a6f-4a9e-8b88-0e753a48d365"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 3297,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "316dad28-cb18-4e5e-ad6b-c1f1e350c384",
                      "title": "Sequence测试: jt_sendTransaction基本测试",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction基本测试 \"before all\" hook",
                          "timedOut": false,
                          "duration": 14203,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "e9668c09-47f0-4581-9d11-d60b29e25158",
                          "parentUUID": "316dad28-cb18-4e5e-ad6b-c1f1e350c384",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0630\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+1",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction基本测试 0630\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+1",
                          "timedOut": false,
                          "duration": 71,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "65cbe574-1386-4ee1-9b9e-8f777d90ea03",
                          "parentUUID": "316dad28-cb18-4e5e-ad6b-c1f1e350c384",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0640\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+2;返回交易哈希，但是余额并没有变化；此时再发起一个sequence为n+1的交易，n+2的交易再被真正记录到链上",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction基本测试 0640\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+2;返回交易哈希，但是余额并没有变化；此时再发起一个sequence为n+1的交易，n+2的交易再被真正记录到链上",
                          "timedOut": false,
                          "duration": 214,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "5421ed1c-3f69-406c-a879-9909a9883bd9",
                          "parentUUID": "316dad28-cb18-4e5e-ad6b-c1f1e350c384",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "65cbe574-1386-4ee1-9b9e-8f777d90ea03",
                        "5421ed1c-3f69-406c-a879-9909a9883bd9"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 285,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "b50dd7e5-58b0-4e60-839b-5d6a0e0f421f",
                      "title": "Sequence测试: jt_sendTransaction无效参数测试1",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction无效参数测试1 \"before all\" hook",
                          "timedOut": false,
                          "duration": 14877,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "44c83f0b-73dd-467f-beb4-60986023bbf5",
                          "parentUUID": "b50dd7e5-58b0-4e60-839b-5d6a0e0f421f",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0650\t无效的sequence参数_01：假设发起钱包的sequence已经到了n，发起交易时，指定sequence为大于0且小于n的整数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction无效参数测试1 0650\t无效的sequence参数_01：假设发起钱包的sequence已经到了n，发起交易时，指定sequence为大于0且小于n的整数",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "74a1a088-5aae-40ef-9d59-90b237e28949",
                          "parentUUID": "b50dd7e5-58b0-4e60-839b-5d6a0e0f421f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：小数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction无效参数测试1 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：小数",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "57c0ca2f-39a0-4a8d-bc2a-ef536d4363b1",
                          "parentUUID": "b50dd7e5-58b0-4e60-839b-5d6a0e0f421f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "74a1a088-5aae-40ef-9d59-90b237e28949",
                        "57c0ca2f-39a0-4a8d-bc2a-ef536d4363b1"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "1c6b4f60-ed12-4d35-9911-59a4f5351c58",
                      "title": "Sequence测试: jt_sendTransaction无效参数测试2",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction无效参数测试2 \"before all\" hook",
                          "timedOut": false,
                          "duration": 15163,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "566bb9c3-d9f9-4ce4-a527-8f2f59ed02d0",
                          "parentUUID": "1c6b4f60-ed12-4d35-9911-59a4f5351c58",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：负数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction无效参数测试2 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：负数",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "e44011c3-7f2d-4ec4-bb43-b9bf1f964b78",
                          "parentUUID": "1c6b4f60-ed12-4d35-9911-59a4f5351c58",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：字符串",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction无效参数测试2 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：字符串",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "adb8a69c-9203-4ffd-8470-36ed35bd3cd2",
                          "parentUUID": "1c6b4f60-ed12-4d35-9911-59a4f5351c58",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "e44011c3-7f2d-4ec4-bb43-b9bf1f964b78",
                        "adb8a69c-9203-4ffd-8470-36ed35bd3cd2"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "1250e54a-4ab0-473b-85b7-1344b26cd346",
                      "title": "Sequence测试: jt_sendTransaction多交易测试1",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction多交易测试1 \"before all\" hook",
                          "timedOut": false,
                          "duration": 5440,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "7322fc80-0da8-4ff7-ab86-c71f035f2ae2",
                          "parentUUID": "1250e54a-4ab0-473b-85b7-1344b26cd346",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0670\t同时发起多个交易时指定sequence_01:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+2、…、n+m",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction多交易测试1 0670\t同时发起多个交易时指定sequence_01:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+2、…、n+m",
                          "timedOut": false,
                          "duration": 362,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "d54c4614-193c-418b-8ce4-2ead3dae6df6",
                          "parentUUID": "1250e54a-4ab0-473b-85b7-1344b26cd346",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "d54c4614-193c-418b-8ce4-2ead3dae6df6"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 362,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "8b775bb1-ab3c-4463-a12e-a6a1dee4254b",
                      "title": "Sequence测试: jt_sendTransaction多交易测试2",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction多交易测试2 \"before all\" hook",
                          "timedOut": false,
                          "duration": 15512,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "95974535-a32e-42ec-bf97-6cef0af734d3",
                          "parentUUID": "8b775bb1-ab3c-4463-a12e-a6a1dee4254b",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0680\t同时发起多个交易时指定sequence_02:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+3、n+5、…、n+2m-1",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_sendTransaction多交易测试2 0680\t同时发起多个交易时指定sequence_02:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+3、n+5、…、n+2m-1",
                          "timedOut": false,
                          "duration": 661,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "d762e668-4363-49e0-938a-a1daf72a64fb",
                          "parentUUID": "8b775bb1-ab3c-4463-a12e-a6a1dee4254b",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "d762e668-4363-49e0-938a-a1daf72a64fb"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 661,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "9759e6da-35a4-4922-8a09-bbe6ad7ffde4",
                      "title": "Sequence测试: jt_signTransaction基本测试",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction基本测试 \"before all\" hook",
                          "timedOut": false,
                          "duration": 15471,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "4ff4939d-6860-45c1-9463-1e5e4d803440",
                          "parentUUID": "9759e6da-35a4-4922-8a09-bbe6ad7ffde4",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0630\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+1",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction基本测试 0630\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+1",
                          "timedOut": false,
                          "duration": 69,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f56ccdf5-5e50-40f0-93a9-fe365ace1a69",
                          "parentUUID": "9759e6da-35a4-4922-8a09-bbe6ad7ffde4",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0640\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+2;返回交易哈希，但是余额并没有变化；此时再发起一个sequence为n+1的交易，n+2的交易再被真正记录到链上",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction基本测试 0640\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+2;返回交易哈希，但是余额并没有变化；此时再发起一个sequence为n+1的交易，n+2的交易再被真正记录到链上",
                          "timedOut": false,
                          "duration": 214,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "b07a846a-025e-4b8e-98d2-0864166dec1e",
                          "parentUUID": "9759e6da-35a4-4922-8a09-bbe6ad7ffde4",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f56ccdf5-5e50-40f0-93a9-fe365ace1a69",
                        "b07a846a-025e-4b8e-98d2-0864166dec1e"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 283,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "e66c012f-ed97-4d93-a1a4-28615fda3ea3",
                      "title": "Sequence测试: jt_signTransaction无效参数测试1",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction无效参数测试1 \"before all\" hook",
                          "timedOut": false,
                          "duration": 14945,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "28c565b4-6dd6-4e2e-a663-63061f51a165",
                          "parentUUID": "e66c012f-ed97-4d93-a1a4-28615fda3ea3",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0650\t无效的sequence参数_01：假设发起钱包的sequence已经到了n，发起交易时，指定sequence为大于0且小于n的整数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction无效参数测试1 0650\t无效的sequence参数_01：假设发起钱包的sequence已经到了n，发起交易时，指定sequence为大于0且小于n的整数",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "e166ef89-817d-4722-8555-f781d6de630c",
                          "parentUUID": "e66c012f-ed97-4d93-a1a4-28615fda3ea3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：小数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction无效参数测试1 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：小数",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "d75d1408-2e7d-4829-898e-ec9006288d6a",
                          "parentUUID": "e66c012f-ed97-4d93-a1a4-28615fda3ea3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "e166ef89-817d-4722-8555-f781d6de630c",
                        "d75d1408-2e7d-4829-898e-ec9006288d6a"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "5c436e34-f0cf-46fe-b5fd-d825c0a45cbd",
                      "title": "Sequence测试: jt_signTransaction无效参数测试2",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction无效参数测试2 \"before all\" hook",
                          "timedOut": false,
                          "duration": 14841,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "39f29741-fb78-4ecd-b486-f45c7b4c8007",
                          "parentUUID": "5c436e34-f0cf-46fe-b5fd-d825c0a45cbd",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：负数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction无效参数测试2 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：负数",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "ec4cf953-420c-4a8c-a64a-d204f7d1ccdc",
                          "parentUUID": "5c436e34-f0cf-46fe-b5fd-d825c0a45cbd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：字符串",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction无效参数测试2 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：字符串",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "3df01007-39e5-43eb-9dbf-fa11905e21b2",
                          "parentUUID": "5c436e34-f0cf-46fe-b5fd-d825c0a45cbd",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "ec4cf953-420c-4a8c-a64a-d204f7d1ccdc",
                        "3df01007-39e5-43eb-9dbf-fa11905e21b2"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "5e8a1d86-d698-43fc-83a5-4312d11b361b",
                      "title": "Sequence测试: jt_signTransaction多交易测试1",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction多交易测试1 \"before all\" hook",
                          "timedOut": false,
                          "duration": 2532,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "a6c172c5-c871-49a5-8c62-5165b363860d",
                          "parentUUID": "5e8a1d86-d698-43fc-83a5-4312d11b361b",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0670\t同时发起多个交易时指定sequence_01:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+2、…、n+m",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction多交易测试1 0670\t同时发起多个交易时指定sequence_01:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+2、…、n+m",
                          "timedOut": false,
                          "duration": 363,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "ee4bc726-089f-465c-afb5-3e069a679744",
                          "parentUUID": "5e8a1d86-d698-43fc-83a5-4312d11b361b",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "ee4bc726-089f-465c-afb5-3e069a679744"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 363,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "4b2ba25c-9a02-43fe-a64d-62eba30048c3",
                      "title": "Sequence测试: jt_signTransaction多交易测试2",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction多交易测试2 \"before all\" hook",
                          "timedOut": false,
                          "duration": 14482,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "cd84d09d-18ac-4b45-bca3-1f9566ffe4c3",
                          "parentUUID": "4b2ba25c-9a02-43fe-a64d-62eba30048c3",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0680\t同时发起多个交易时指定sequence_02:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+3、n+5、…、n+2m-1",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 Sequence测试: jt_signTransaction多交易测试2 0680\t同时发起多个交易时指定sequence_02:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+3、n+5、…、n+2m-1",
                          "timedOut": false,
                          "duration": 645,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "7cb94a34-6f5f-41e7-bc69-60e3388bf3a8",
                          "parentUUID": "4b2ba25c-9a02-43fe-a64d-62eba30048c3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "7cb94a34-6f5f-41e7-bc69-60e3388bf3a8"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 645,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "6984e9de-46fd-428c-9749-1371ee40526e",
                      "title": "测试连续发送交易",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "dd580783-d1f8-4429-a4b2-e01da04e4e2c",
                          "title": "原生币swt压力测试，分多个case执行",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试连续发送交易 原生币swt压力测试，分多个case执行 \"before all\" hook",
                              "timedOut": false,
                              "duration": 215,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "cac11793-377b-4f72-bb35-8f8589a209a6",
                              "parentUUID": "dd580783-d1f8-4429-a4b2-e01da04e4e2c",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_1",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试连续发送交易 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_1",
                              "timedOut": false,
                              "duration": 7360,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "34352cbe-8f97-4329-9f03-1aceca81dc2c",
                              "parentUUID": "dd580783-d1f8-4429-a4b2-e01da04e4e2c",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "34352cbe-8f97-4329-9f03-1aceca81dc2c"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 7360,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "d2ab5a90-05a8-4a6c-8627-3845da420d6c",
                          "title": "原生币swt压力测试，jt_sendTransaction，在一个内case执行",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试连续发送交易 原生币swt压力测试，jt_sendTransaction，在一个内case执行 \"before all\" hook",
                              "timedOut": false,
                              "duration": 1642,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "7b80a219-6b40-4cc8-85d3-2393a1e6fcd8",
                              "parentUUID": "d2ab5a90-05a8-4a6c-8627-3845da420d6c",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "9000\t交易压力测试，交易数量：1",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试连续发送交易 原生币swt压力测试，jt_sendTransaction，在一个内case执行 9000\t交易压力测试，交易数量：1",
                              "timedOut": false,
                              "duration": 69,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "9c3ab4ac-816b-4017-bf3d-f8416a546c5c",
                              "parentUUID": "d2ab5a90-05a8-4a6c-8627-3845da420d6c",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "9c3ab4ac-816b-4017-bf3d-f8416a546c5c"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 69,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "a3f98d33-6110-46c0-b36b-f8407d764196",
                          "title": "原生币swt压力测试，jt_signTransaction，在一个内case执行",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试连续发送交易 原生币swt压力测试，jt_signTransaction，在一个内case执行 \"before all\" hook",
                              "timedOut": false,
                              "duration": 4914,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "57c4bd14-5b55-494e-bac2-82d8bd09c342",
                              "parentUUID": "a3f98d33-6110-46c0-b36b-f8407d764196",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "9000\t交易压力测试，交易数量：1",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 测试连续发送交易 原生币swt压力测试，jt_signTransaction，在一个内case执行 9000\t交易压力测试，交易数量：1",
                              "timedOut": false,
                              "duration": 69,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "d369207c-e553-4a77-bc69-2cc2cd3aca01",
                              "parentUUID": "a3f98d33-6110-46c0-b36b-f8407d764196",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "d369207c-e553-4a77-bc69-2cc2cd3aca01"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 69,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "9ee99e6d-06ce-4ea8-a8ec-2a090cd40f02",
                      "title": "压力测试：发送交易，看tps",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 压力测试：发送交易，看tps \"before all\" hook",
                          "timedOut": false,
                          "duration": 565,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "983e05b2-6249-490d-bca0-bd978a92cdb1",
                          "parentUUID": "9ee99e6d-06ce-4ea8-a8ec-2a090cd40f02",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "9001\t纯交易压力测试，交易数量：27",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 压力测试：发送交易，看tps 9001\t纯交易压力测试，交易数量：27",
                          "timedOut": false,
                          "duration": 5282,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "4a73ec70-4517-4c1e-9d12-a07911f5dab3",
                          "parentUUID": "9ee99e6d-06ce-4ea8-a8ec-2a090cd40f02",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "4a73ec70-4517-4c1e-9d12-a07911f5dab3"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5282,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                      "title": "性能测试：同一账户向节点连续发送交易, memos长度为0",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为0 \"before all\" hook",
                          "timedOut": false,
                          "duration": 2939,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "06f82c48-5acc-4c59-baf2-250b88aff226",
                          "parentUUID": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t同一账户向同一节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为0 0010\t同一账户向同一节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 1360,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "7d126b13-a5fa-47b4-b8a4-9385ca88fa12",
                          "parentUUID": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t同一账户向2个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为0 0020\t同一账户向2个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 268,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "4504cf04-c891-4b0d-a182-1b77b55963a1",
                          "parentUUID": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t同一账户向3个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为0 0030\t同一账户向3个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 283,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "0268ede5-dea7-4413-9fd4-c0bbee6d7cc9",
                          "parentUUID": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t同一账户向4个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为0 0040\t同一账户向4个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 254,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "1a34a3aa-3434-4e7e-9eff-d77c7dfb16a3",
                          "parentUUID": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0050\t同一账户向5个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为0 0050\t同一账户向5个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 284,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "af2d4698-17fe-4f49-af34-da95524b428e",
                          "parentUUID": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t同一账户向同一节点连续发送交易（signTx, 不带memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为0 0010\t同一账户向同一节点连续发送交易（signTx, 不带memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 301,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "a6902c16-b4d3-4fb8-8bc0-ab58df317dad",
                          "parentUUID": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t同一账户向2个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为0 0020\t同一账户向2个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 298,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "98f6f7f9-b9d3-42dc-b623-39d9cd06ab7a",
                          "parentUUID": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t同一账户向3个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为0 0030\t同一账户向3个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 271,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "926d8983-6984-4a35-965c-7451e4d51982",
                          "parentUUID": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t同一账户向4个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为0 0040\t同一账户向4个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 305,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "553c4597-b126-455f-85aa-8811416a1a53",
                          "parentUUID": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0050\t同一账户向5个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为0 0050\t同一账户向5个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 291,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "6e62b744-d072-430c-b7c8-147c9e7022c8",
                          "parentUUID": "f62cddfa-c3c0-4c8e-a0a0-808f72dd59cf",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "7d126b13-a5fa-47b4-b8a4-9385ca88fa12",
                        "4504cf04-c891-4b0d-a182-1b77b55963a1",
                        "0268ede5-dea7-4413-9fd4-c0bbee6d7cc9",
                        "1a34a3aa-3434-4e7e-9eff-d77c7dfb16a3",
                        "af2d4698-17fe-4f49-af34-da95524b428e",
                        "a6902c16-b4d3-4fb8-8bc0-ab58df317dad",
                        "98f6f7f9-b9d3-42dc-b623-39d9cd06ab7a",
                        "926d8983-6984-4a35-965c-7451e4d51982",
                        "553c4597-b126-455f-85aa-8811416a1a53",
                        "6e62b744-d072-430c-b7c8-147c9e7022c8"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 3915,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                      "title": "性能测试：不同账户向节点连续发送交易, memos长度为0",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook for \"0060\t不同账户向同一节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11\"",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为0 \"before all\" hook for \"0060\t不同账户向同一节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11\"",
                          "timedOut": true,
                          "duration": 30002,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {
                            "message": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js)",
                            "estack": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js)",
                            "diff": null
                          },
                          "uuid": "2f770c0a-272b-45ad-a6b8-34e9d1209f7b",
                          "parentUUID": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0060\t不同账户向同一节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为0 0060\t不同账户向同一节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "ddcd2fd9-6c28-4dd4-a75c-81c5e4a510c8",
                          "parentUUID": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0070\t不同账户向2个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为0 0070\t不同账户向2个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "ce80689f-8691-4104-91ce-77f6ec90f32f",
                          "parentUUID": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0080\t不同账户向3个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为0 0080\t不同账户向3个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "03d2ef75-2fdc-481d-a9e7-a08ad2209acb",
                          "parentUUID": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0090\t不同账户向4个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为0 0090\t不同账户向4个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "2581a7d0-8396-4c6b-97ce-5f0cf03f8d2b",
                          "parentUUID": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0100\t不同账户向5个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为0 0100\t不同账户向5个不同的节点连续发送交易（sendTx, 不带memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "cebfd309-0b23-481b-b79b-3aa0c44a1fda",
                          "parentUUID": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0060\t不同账户向同一节点连续发送交易（signTx, 不带memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为0 0060\t不同账户向同一节点连续发送交易（signTx, 不带memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "e2dba78d-8912-4c42-a41d-3aa38344f60c",
                          "parentUUID": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0070\t不同账户向2个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为0 0070\t不同账户向2个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "180e9446-5ea0-454d-839a-11113f3d4792",
                          "parentUUID": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0080\t不同账户向3个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为0 0080\t不同账户向3个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "077bee3f-c771-4013-9eaf-89402d6986bf",
                          "parentUUID": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0090\t不同账户向4个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为0 0090\t不同账户向4个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "804b425e-3642-4487-b766-64120fa9268d",
                          "parentUUID": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0100\t不同账户向5个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为0 0100\t不同账户向5个不同的节点连续发送交易（signTx, 不带memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "235050d9-becf-4dd4-bc72-a842c510e694",
                          "parentUUID": "f5cff375-c20e-4da2-bbe6-f3ff78e2640e",
                          "isHook": false,
                          "skipped": true
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [
                        "ddcd2fd9-6c28-4dd4-a75c-81c5e4a510c8",
                        "ce80689f-8691-4104-91ce-77f6ec90f32f",
                        "03d2ef75-2fdc-481d-a9e7-a08ad2209acb",
                        "2581a7d0-8396-4c6b-97ce-5f0cf03f8d2b",
                        "cebfd309-0b23-481b-b79b-3aa0c44a1fda",
                        "e2dba78d-8912-4c42-a41d-3aa38344f60c",
                        "180e9446-5ea0-454d-839a-11113f3d4792",
                        "077bee3f-c771-4013-9eaf-89402d6986bf",
                        "804b425e-3642-4487-b766-64120fa9268d",
                        "235050d9-becf-4dd4-bc72-a842c510e694"
                      ],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                      "title": "性能测试：同一账户向节点连续发送交易, memos长度为8",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为8 \"before all\" hook",
                          "timedOut": false,
                          "duration": 4665,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "7f926bf5-9a49-4b11-a5c0-d4cffc6db9d2",
                          "parentUUID": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0110\t同一账户向同一节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为8 0110\t同一账户向同一节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 268,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "daa2650f-a1a8-4a14-9720-f25e78bf7ebe",
                          "parentUUID": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t同一账户向2个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为8 0110\t同一账户向2个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 295,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "ecfd56f2-5479-4e79-af6b-d9ff6059fa60",
                          "parentUUID": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t同一账户向3个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为8 0110\t同一账户向3个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 310,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "26d66a55-ae6d-4487-a08e-c9c35e306a40",
                          "parentUUID": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t同一账户向4个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为8 0110\t同一账户向4个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 288,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "377ad48b-af9b-45ef-930a-12adf6b902cb",
                          "parentUUID": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t同一账户向5个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为8 0120\t同一账户向5个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 267,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "21177ae1-e9fb-47f6-b892-ae11f47e96c4",
                          "parentUUID": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t同一账户向同一节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为8 0110\t同一账户向同一节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 600,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "dee354f4-b005-4428-934a-bd6235350214",
                          "parentUUID": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t同一账户向2个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为8 0110\t同一账户向2个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 264,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "beedae1d-d754-4c67-87d5-eb6e9e9d84b2",
                          "parentUUID": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t同一账户向3个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为8 0110\t同一账户向3个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 267,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "fb6a1c95-551a-4d3d-95df-71fde39dcb89",
                          "parentUUID": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t同一账户向4个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为8 0110\t同一账户向4个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 275,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "85c1278a-2142-45e9-8e6f-5e946666d1ae",
                          "parentUUID": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t同一账户向5个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为8 0120\t同一账户向5个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 261,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "c94e1133-5c3e-49ed-8cda-18a57e255576",
                          "parentUUID": "58d19987-0eb0-4b2b-8712-06d18d8b49fb",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "daa2650f-a1a8-4a14-9720-f25e78bf7ebe",
                        "ecfd56f2-5479-4e79-af6b-d9ff6059fa60",
                        "26d66a55-ae6d-4487-a08e-c9c35e306a40",
                        "377ad48b-af9b-45ef-930a-12adf6b902cb",
                        "21177ae1-e9fb-47f6-b892-ae11f47e96c4",
                        "dee354f4-b005-4428-934a-bd6235350214",
                        "beedae1d-d754-4c67-87d5-eb6e9e9d84b2",
                        "fb6a1c95-551a-4d3d-95df-71fde39dcb89",
                        "85c1278a-2142-45e9-8e6f-5e946666d1ae",
                        "c94e1133-5c3e-49ed-8cda-18a57e255576"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 3095,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "e4e1041a-5699-4458-8974-b09fc409bed3",
                      "title": "性能测试：不同账户向节点连续发送交易, memos长度为8",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook for \"0110\t不同账户向同一节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11\"",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为8 \"before all\" hook for \"0110\t不同账户向同一节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11\"",
                          "timedOut": true,
                          "duration": 30001,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {
                            "message": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js)",
                            "estack": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js)",
                            "diff": null
                          },
                          "uuid": "75f10a9d-1aee-41c9-b34d-90ceddac1bd5",
                          "parentUUID": "e4e1041a-5699-4458-8974-b09fc409bed3",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0110\t不同账户向同一节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为8 0110\t不同账户向同一节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "5a432fe6-feb6-4ae2-bb20-ad340c4be721",
                          "parentUUID": "e4e1041a-5699-4458-8974-b09fc409bed3",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0110\t不同账户向2个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为8 0110\t不同账户向2个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "89dc2c6f-112c-42ba-82c2-2f8054d38fa9",
                          "parentUUID": "e4e1041a-5699-4458-8974-b09fc409bed3",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0110\t不同账户向3个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为8 0110\t不同账户向3个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "21c4ddac-d3fb-49bb-983a-f1145792141a",
                          "parentUUID": "e4e1041a-5699-4458-8974-b09fc409bed3",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0110\t不同账户向4个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为8 0110\t不同账户向4个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "dbe8c872-5e80-4281-9b5a-18d4586455b4",
                          "parentUUID": "e4e1041a-5699-4458-8974-b09fc409bed3",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0120\t不同账户向5个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为8 0120\t不同账户向5个不同的节点连续发送交易（sendTx, 带8字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "85c8318d-5561-431f-997f-b4867a321a0f",
                          "parentUUID": "e4e1041a-5699-4458-8974-b09fc409bed3",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0110\t不同账户向同一节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为8 0110\t不同账户向同一节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "860a79b5-1d66-47ef-83d4-c900f958e294",
                          "parentUUID": "e4e1041a-5699-4458-8974-b09fc409bed3",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0110\t不同账户向2个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为8 0110\t不同账户向2个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "d516bbeb-33c4-4caa-8746-247912f9cbff",
                          "parentUUID": "e4e1041a-5699-4458-8974-b09fc409bed3",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0110\t不同账户向3个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为8 0110\t不同账户向3个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "bd2663d4-5143-4132-b246-e27dc53cdc30",
                          "parentUUID": "e4e1041a-5699-4458-8974-b09fc409bed3",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0110\t不同账户向4个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为8 0110\t不同账户向4个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "737757cd-2017-4905-81a1-4d0a3f44a48d",
                          "parentUUID": "e4e1041a-5699-4458-8974-b09fc409bed3",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0120\t不同账户向5个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为8 0120\t不同账户向5个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "24d3b076-ef52-4daf-837f-08b596f08f67",
                          "parentUUID": "e4e1041a-5699-4458-8974-b09fc409bed3",
                          "isHook": false,
                          "skipped": true
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [
                        "5a432fe6-feb6-4ae2-bb20-ad340c4be721",
                        "89dc2c6f-112c-42ba-82c2-2f8054d38fa9",
                        "21c4ddac-d3fb-49bb-983a-f1145792141a",
                        "dbe8c872-5e80-4281-9b5a-18d4586455b4",
                        "85c8318d-5561-431f-997f-b4867a321a0f",
                        "860a79b5-1d66-47ef-83d4-c900f958e294",
                        "d516bbeb-33c4-4caa-8746-247912f9cbff",
                        "bd2663d4-5143-4132-b246-e27dc53cdc30",
                        "737757cd-2017-4905-81a1-4d0a3f44a48d",
                        "24d3b076-ef52-4daf-837f-08b596f08f67"
                      ],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "269acf73-1c33-43a5-9453-abef28347d23",
                      "title": "性能测试：同一账户向节点连续发送交易, memos长度为64",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为64 \"before all\" hook",
                          "timedOut": false,
                          "duration": 4582,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "49782633-f4e4-4bb0-be76-c943dd7c5e00",
                          "parentUUID": "269acf73-1c33-43a5-9453-abef28347d23",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0130\t同一账户向同一节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为64 0130\t同一账户向同一节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 299,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f0df39eb-cbed-4d74-9837-27c629d6871d",
                          "parentUUID": "269acf73-1c33-43a5-9453-abef28347d23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0130\t同一账户向2个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为64 0130\t同一账户向2个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 283,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "44c45b4d-172c-479e-bc40-d9779640f94c",
                          "parentUUID": "269acf73-1c33-43a5-9453-abef28347d23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0130\t同一账户向3个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为64 0130\t同一账户向3个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 266,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "d7d82506-f892-4e4b-a7de-3b11f8e57603",
                          "parentUUID": "269acf73-1c33-43a5-9453-abef28347d23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0130\t同一账户向4个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为64 0130\t同一账户向4个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 279,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "fc5ea899-0bf2-49d6-a4ac-9dd11e9b7fef",
                          "parentUUID": "269acf73-1c33-43a5-9453-abef28347d23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0140\t同一账户向5个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为64 0140\t同一账户向5个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 262,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "25ed4acd-fffc-46a3-ba8d-3fa6b348b3a7",
                          "parentUUID": "269acf73-1c33-43a5-9453-abef28347d23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0130\t同一账户向同一节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为64 0130\t同一账户向同一节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 295,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "6e54200e-288f-4144-8bf7-1e80717c3729",
                          "parentUUID": "269acf73-1c33-43a5-9453-abef28347d23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0130\t同一账户向2个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为64 0130\t同一账户向2个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 282,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "fcbf6715-bd47-4d10-924a-1f9503bfcf61",
                          "parentUUID": "269acf73-1c33-43a5-9453-abef28347d23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0130\t同一账户向3个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为64 0130\t同一账户向3个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：2",
                          "timedOut": true,
                          "duration": 30000,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js)",
                            "estack": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js)",
                            "diff": null
                          },
                          "uuid": "d4508915-88dc-4c44-a950-fd6a65262acb",
                          "parentUUID": "269acf73-1c33-43a5-9453-abef28347d23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0130\t同一账户向4个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为64 0130\t同一账户向4个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 257,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "9c79e2fb-ac7b-4264-92ec-e2ebe18df036",
                          "parentUUID": "269acf73-1c33-43a5-9453-abef28347d23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0140\t同一账户向5个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：2",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为64 0140\t同一账户向5个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：2",
                          "timedOut": false,
                          "duration": 271,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "b38e75c9-721a-4a39-ac4a-106774399214",
                          "parentUUID": "269acf73-1c33-43a5-9453-abef28347d23",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f0df39eb-cbed-4d74-9837-27c629d6871d",
                        "44c45b4d-172c-479e-bc40-d9779640f94c",
                        "d7d82506-f892-4e4b-a7de-3b11f8e57603",
                        "fc5ea899-0bf2-49d6-a4ac-9dd11e9b7fef",
                        "25ed4acd-fffc-46a3-ba8d-3fa6b348b3a7",
                        "6e54200e-288f-4144-8bf7-1e80717c3729",
                        "fcbf6715-bd47-4d10-924a-1f9503bfcf61",
                        "9c79e2fb-ac7b-4264-92ec-e2ebe18df036",
                        "b38e75c9-721a-4a39-ac4a-106774399214"
                      ],
                      "failures": [
                        "d4508915-88dc-4c44-a950-fd6a65262acb"
                      ],
                      "pending": [],
                      "skipped": [],
                      "duration": 32494,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                      "title": "性能测试：不同账户向节点连续发送交易, memos长度为64",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook for \"0130\t不同账户向同一节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11\"",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为64 \"before all\" hook for \"0130\t不同账户向同一节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11\"",
                          "timedOut": true,
                          "duration": 30001,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {
                            "message": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js)",
                            "estack": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js)",
                            "diff": null
                          },
                          "uuid": "b2f6ea4f-6375-482d-8520-ee55340cfe4e",
                          "parentUUID": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0130\t不同账户向同一节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为64 0130\t不同账户向同一节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "a5e519d7-d67e-412e-a136-147957b95589",
                          "parentUUID": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0130\t不同账户向2个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为64 0130\t不同账户向2个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f785a32e-e4d3-4b96-adb7-744fc58b8f36",
                          "parentUUID": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0130\t不同账户向3个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为64 0130\t不同账户向3个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "04fb7e48-70d8-47a5-a6a0-042928cb249a",
                          "parentUUID": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0130\t不同账户向4个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为64 0130\t不同账户向4个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "6aa7604a-3b80-4ed3-943f-fe329378153a",
                          "parentUUID": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0140\t不同账户向5个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为64 0140\t不同账户向5个不同的节点连续发送交易（sendTx, 带64字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "84afaf7d-f4c8-42f4-9e22-c1e62565d532",
                          "parentUUID": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0130\t不同账户向同一节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为64 0130\t不同账户向同一节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "7286ecb7-d5a8-43a0-abe5-08fb59ce8741",
                          "parentUUID": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0130\t不同账户向2个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为64 0130\t不同账户向2个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "c43db758-3455-4f85-a6b1-c3e45856740d",
                          "parentUUID": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0130\t不同账户向3个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为64 0130\t不同账户向3个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "2ee8b3d1-3d7c-41e6-ad5a-f975fbb72211",
                          "parentUUID": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0130\t不同账户向4个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为64 0130\t不同账户向4个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "75841a9c-df14-4c8b-91eb-f60124638cf2",
                          "parentUUID": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "0140\t不同账户向5个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：11",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为64 0140\t不同账户向5个不同的节点连续发送交易（signTx, 带64字节memo）测试性能上限,数量：11",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "253d6ccf-6667-4aa0-8551-171a3983d0a7",
                          "parentUUID": "20c43f27-99bf-4179-b066-4cf6b7d9eff5",
                          "isHook": false,
                          "skipped": true
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [
                        "a5e519d7-d67e-412e-a136-147957b95589",
                        "f785a32e-e4d3-4b96-adb7-744fc58b8f36",
                        "04fb7e48-70d8-47a5-a6a0-042928cb249a",
                        "6aa7604a-3b80-4ed3-943f-fe329378153a",
                        "84afaf7d-f4c8-42f4-9e22-c1e62565d532",
                        "7286ecb7-d5a8-43a0-abe5-08fb59ce8741",
                        "c43db758-3455-4f85-a6b1-c3e45856740d",
                        "2ee8b3d1-3d7c-41e6-ad5a-f975fbb72211",
                        "75841a9c-df14-4c8b-91eb-f60124638cf2",
                        "253d6ccf-6667-4aa0-8551-171a3983d0a7"
                      ],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "4ace9efb-44ce-4c7a-9c91-afb344c95522",
                      "title": "性能测试：同一账户向节点连续发送交易, memos长度为512",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为512 \"before all\" hook",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "eb9139b7-f7d3-484c-b688-54356c711dc7",
                          "parentUUID": null,
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "7c40e210-a4a2-4581-8f22-7c7232edb849",
                      "title": "性能测试：不同账户向节点连续发送交易, memos长度为512",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为512 \"before all\" hook",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "a99a3e2d-a4b1-4093-895c-4e943701bf37",
                          "parentUUID": null,
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "49083bf4-61d4-4bb6-9f33-dde5928622ed",
                      "title": "性能测试：同一账户向节点连续发送交易, memos长度为4096",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为4096 \"before all\" hook",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "e3462451-39c9-444c-bc5f-59f981e2c44f",
                          "parentUUID": null,
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "de22874b-300a-4d52-82c8-0a39f86d5a5d",
                      "title": "性能测试：不同账户向节点连续发送交易, memos长度为4096",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为4096 \"before all\" hook",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "9b6d0756-24f5-4464-9f96-5ee8895704fa",
                          "parentUUID": null,
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "9efd8016-8e02-4870-8297-e39882d16c5a",
                      "title": "性能测试：同一账户向节点连续发送交易, memos长度为32768",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：同一账户向节点连续发送交易, memos长度为32768 \"before all\" hook",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "daf622fd-fe65-4123-92b8-cd926f6234b9",
                          "parentUUID": null,
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "67c8a647-f994-4702-8662-4f11cd5e8317",
                      "title": "性能测试：不同账户向节点连续发送交易, memos长度为32768",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 性能测试：不同账户向节点连续发送交易, memos长度为32768 \"before all\" hook",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "f6f05153-ccb6-4290-8c83-dc8c071a10b8",
                          "parentUUID": null,
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "caa9a0f1-0a01-4c2b-8229-a0be6f96564c",
                      "title": "快速压力测试：多帐号通过多节点连续发送交易，等response，看tps， 数量： 50",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 快速压力测试：多帐号通过多节点连续发送交易，等response，看tps， 数量： 50 \"before all\" hook",
                          "timedOut": false,
                          "duration": 10984,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "3aa88908-3f6f-4ebf-acc7-62c5d417c10a",
                          "parentUUID": "caa9a0f1-0a01-4c2b-8229-a0be6f96564c",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0120\t不同账户向5个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：50",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 快速压力测试：多帐号通过多节点连续发送交易，等response，看tps， 数量： 50 0120\t不同账户向5个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：50",
                          "timedOut": false,
                          "duration": 1522,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "1c986699-35f2-4ea6-8d67-0768ae74d89d",
                          "parentUUID": "caa9a0f1-0a01-4c2b-8229-a0be6f96564c",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "1c986699-35f2-4ea6-8d67-0768ae74d89d"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1522,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "806b0b09-d787-4bd8-a4c8-0c0198bac1f6",
                      "title": "快速压力测试：多帐号通过多节点连续发送交易，不等response，看tps， 数量： 50",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 快速压力测试：多帐号通过多节点连续发送交易，不等response，看tps， 数量： 50 \"before all\" hook",
                          "timedOut": false,
                          "duration": 46,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "c21da27c-66e2-4822-89b9-0e28adb96855",
                          "parentUUID": "806b0b09-d787-4bd8-a4c8-0c0198bac1f6",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0120\t不同账户向5个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：50",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 快速压力测试：多帐号通过多节点连续发送交易，不等response，看tps， 数量： 50 0120\t不同账户向5个不同的节点连续发送交易（signTx, 带8字节memo）测试性能上限,数量：50",
                          "timedOut": false,
                          "duration": 5131,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "7f3e9b5e-f0ad-41ed-bf29-a41fb445f92b",
                          "parentUUID": "806b0b09-d787-4bd8-a4c8-0c0198bac1f6",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "7f3e9b5e-f0ad-41ed-bf29-a41fb445f92b"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5131,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "8c4b9001-347d-498c-9a54-679c73d6b4d8",
                      "title": "用sendRaw进行性能测试_1",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 用sendRaw进行性能测试_1 \"before all\" hook",
                          "timedOut": false,
                          "duration": 6809,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "751a66e4-e7b5-4666-ac1a-261d24012ecd",
                          "parentUUID": "8c4b9001-347d-498c-9a54-679c73d6b4d8",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "1000\t性能测试，sendRaw，多个有效交易数据：10",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 用sendRaw进行性能测试_1 1000\t性能测试，sendRaw，多个有效交易数据：10",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "bcdafec4-6662-4bbe-ba89-e7a7ca0f67b8",
                          "parentUUID": "8c4b9001-347d-498c-9a54-679c73d6b4d8",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "bcdafec4-6662-4bbe-ba89-e7a7ca0f67b8"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "228e1b87-312f-4c87-8768-b40ab1b3c144",
                      "title": "用sendRaw进行性能测试_2",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 用sendRaw进行性能测试_2 \"before all\" hook",
                          "timedOut": false,
                          "duration": 7260,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "1c9b5498-ad77-43c7-bcf1-2504aeddab45",
                          "parentUUID": "228e1b87-312f-4c87-8768-b40ab1b3c144",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "1000\t性能测试，sendRaw，多个有效交易数据：10",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://121.37.216.100:9545/v1/jsonrpc 用例测试 用sendRaw进行性能测试_2 1000\t性能测试，sendRaw，多个有效交易数据：10",
                          "timedOut": false,
                          "duration": 23,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f757bd46-aebf-4f63-b70a-166530d7585f",
                          "parentUUID": "228e1b87-312f-4c87-8768-b40ab1b3c144",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f757bd46-aebf-4f63-b70a-166530d7585f"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 23,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}