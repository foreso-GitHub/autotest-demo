{
  "stats": {
    "suites": 175,
    "tests": 1048,
    "passes": 759,
    "pending": 0,
    "failures": 289,
    "start": "2020-05-26T05:40:21.908Z",
    "end": "2020-05-26T05:52:57.758Z",
    "duration": 755850,
    "testsRegistered": 1048,
    "passPercent": 72.42366412213741,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "634030a8-bf5d-4487-a73d-cb947a0e6593",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b125bfda-c88f-4383-8486-26509abce3dd",
          "title": "Jingtum测试",
          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
          "file": "\\test\\start.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c55d739f-7327-4f0a-a625-89c44b500892",
              "title": "测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc",
              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
              "file": "\\test\\start.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc \"before all\" hook",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// logger.debug('before connnect')\n// await server.connect()\n// logger.debug('after connnect')",
                  "err": {},
                  "uuid": "23e604e5-3db1-4e4a-809c-c997935be905",
                  "parentUUID": "c55d739f-7327-4f0a-a625-89c44b500892",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "1cad7a9b-aa3a-45e5-a168-c79de214523a",
                  "title": "用例测试",
                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                  "file": "\\test\\start.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "69059f6e-723a-454c-baba-de17ba1aca27",
                      "title": "测试jt_blockNumber",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_blockNumber \"before all\" hook",
                          "timedOut": false,
                          "duration": 5155,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "59167fe1-b06c-4edc-a6c7-1de1a9d2f638",
                          "parentUUID": "69059f6e-723a-454c-baba-de17ba1aca27",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t查询最新区块号：发起查询请求，等待5秒或10秒（同步时间），再次发起查询请求",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_blockNumber 0010\t查询最新区块号：发起查询请求，等待5秒或10秒（同步时间），再次发起查询请求",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "4cfd1cc2-f3a9-4d13-b272-0616ed9640d5",
                          "parentUUID": "69059f6e-723a-454c-baba-de17ba1aca27",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t查询最新区块号",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_blockNumber 0010\t查询最新区块号",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "0a5173ad-11e1-46a1-b034-88281f4e5f21",
                          "parentUUID": "69059f6e-723a-454c-baba-de17ba1aca27",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "4cfd1cc2-f3a9-4d13-b272-0616ed9640d5",
                        "0a5173ad-11e1-46a1-b034-88281f4e5f21"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 9,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                      "title": "测试jt_getBlockByNumber",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber \"before all\" hook",
                          "timedOut": false,
                          "duration": 466,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "e4414af7-5d9a-4b19-b28a-ae326797c41c",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t有效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0010\t有效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "77bb4fcd-c88f-47fc-a9ad-c0944d45b181",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块编号，需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0020\t有效区块编号，需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 28,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "ef443551-af0d-47fc-ac3f-a2fd31d69083",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t有效区块编号，需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0030\t有效区块编号，需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 4,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'error' to equal 'success'",
                            "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": "- error\n+ success\n"
                          },
                          "uuid": "bcfa340d-83c2-4cd2-af4f-614d160b56dd",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t有效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0040\t有效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 3,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'error' to equal 'success'",
                            "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": "- error\n+ success\n"
                          },
                          "uuid": "442bd2eb-42ed-49f5-8a5b-cd224dfb14c8",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0050\t有效区块编号，需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0050\t有效区块编号，需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 4,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'error' to equal 'success'",
                            "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": "- error\n+ success\n"
                          },
                          "uuid": "56e5d238-89ea-4672-bbe5-1e6367cec680",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0060\t有效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0060\t有效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 2,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'error' to equal 'success'",
                            "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": "- error\n+ success\n"
                          },
                          "uuid": "3e3ad0a5-24c6-496e-ac9f-50ac306db9b5",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0090\t有效区块编号，需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0090\t有效区块编号，需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 4,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'error' to equal 'success'",
                            "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": "- error\n+ success\n"
                          },
                          "uuid": "e9285c93-18e3-4735-bcdd-4f964868b391",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0100\t有效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0100\t有效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 2,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'error' to equal 'success'",
                            "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:198:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": "- error\n+ success\n"
                          },
                          "uuid": "06acd708-e55b-4fa5-ba45-41e1e7b10e36",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是字符串",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0110\t有效区块编号，无效Boolean参数：showFullTx是字符串",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "4093898b-b8d7-4d9b-9477-f2f8213e76cd",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是数字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0110\t有效区块编号，无效Boolean参数：showFullTx是数字",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "867c6a99-90d4-4a23-bfe6-b87de15577ee",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是空值",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0110\t有效区块编号，无效Boolean参数：showFullTx是空值",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "015e416c-754a-4d40-bd5e-6d766cac6e32",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "cb997983-988d-4e5e-a54e-0dcefa7edf48",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'can\\'t find block 99900000' to include 'ledgerNotFound'",
                            "estack": "AssertionError: expected 'can\\'t find block 99900000' to include 'ledgerNotFound'\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "299f9f66-a593-4c97-9933-faf2e4cb18ba",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 6,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-1000\": invalid syntax' to include 'invalid ledger_index'",
                            "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-1000\": invalid syntax' to include 'invalid ledger_index'\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "fe5144d5-5a7e-40ae-9aa1-277d2724542d",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByNumber 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 3,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'strconv.ParseUint: parsing \"abcdefg\": invalid syntax' to include 'invalid ledger_index'",
                            "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"abcdefg\": invalid syntax' to include 'invalid ledger_index'\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "3a4400bb-2846-47e7-9344-7b50c3f25d24",
                          "parentUUID": "2824f444-5d1d-4fb3-9d67-9fa7e32fc8de",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "77bb4fcd-c88f-47fc-a9ad-c0944d45b181",
                        "ef443551-af0d-47fc-ac3f-a2fd31d69083",
                        "4093898b-b8d7-4d9b-9477-f2f8213e76cd",
                        "867c6a99-90d4-4a23-bfe6-b87de15577ee",
                        "015e416c-754a-4d40-bd5e-6d766cac6e32",
                        "cb997983-988d-4e5e-a54e-0dcefa7edf48"
                      ],
                      "failures": [
                        "bcfa340d-83c2-4cd2-af4f-614d160b56dd",
                        "442bd2eb-42ed-49f5-8a5b-cd224dfb14c8",
                        "56e5d238-89ea-4672-bbe5-1e6367cec680",
                        "3e3ad0a5-24c6-496e-ac9f-50ac306db9b5",
                        "e9285c93-18e3-4735-bcdd-4f964868b391",
                        "06acd708-e55b-4fa5-ba45-41e1e7b10e36",
                        "299f9f66-a593-4c97-9933-faf2e4cb18ba",
                        "fe5144d5-5a7e-40ae-9aa1-277d2724542d",
                        "3a4400bb-2846-47e7-9344-7b50c3f25d24"
                      ],
                      "pending": [],
                      "skipped": [],
                      "duration": 70,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "de8eb59b-0737-4004-ad32-3ed9e221c49d",
                      "title": "测试jt_getBlockByHash",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByHash \"before all\" hook",
                          "timedOut": false,
                          "duration": 337,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "4ae8acc7-3d71-4973-9ebe-49573017ff02",
                          "parentUUID": "de8eb59b-0737-4004-ad32-3ed9e221c49d",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t有效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0010\t有效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "a841cc4f-d750-4b91-84b5-bdab6c971125",
                          "parentUUID": "de8eb59b-0737-4004-ad32-3ed9e221c49d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块编号，需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0020\t有效区块编号，需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 24,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f675ee7e-ccca-445d-be7e-d0704ec10779",
                          "parentUUID": "de8eb59b-0737-4004-ad32-3ed9e221c49d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是字符串",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0110\t有效区块编号，无效Boolean参数：showFullTx是字符串",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "bae055d7-fadc-4bb2-8d54-a5e77e60c949",
                          "parentUUID": "de8eb59b-0737-4004-ad32-3ed9e221c49d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是数字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0110\t有效区块编号，无效Boolean参数：showFullTx是数字",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "46775486-ce5c-4c2b-bbb2-2f501921c746",
                          "parentUUID": "de8eb59b-0737-4004-ad32-3ed9e221c49d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0110\t有效区块编号，无效Boolean参数：showFullTx是空值",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0110\t有效区块编号，无效Boolean参数：showFullTx是空值",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "208e5d64-f87a-4818-9cdc-9c4089077bcf",
                          "parentUUID": "de8eb59b-0737-4004-ad32-3ed9e221c49d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 4,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'NewHash256: Wrong length 9990000000' to include 'value out of range'",
                            "estack": "AssertionError: expected 'NewHash256: Wrong length 9990000000' to include 'value out of range'\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "00ec8a81-7cf0-41fb-a0fd-db3a5b388814",
                          "parentUUID": "de8eb59b-0737-4004-ad32-3ed9e221c49d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 2,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'NewHash256: Wrong length 99900000' to include 'ledgerNotFound'",
                            "estack": "AssertionError: expected 'NewHash256: Wrong length 99900000' to include 'ledgerNotFound'\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "3c0b1351-65b1-4748-97ee-87733d6ed84e",
                          "parentUUID": "de8eb59b-0737-4004-ad32-3ed9e221c49d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 2,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'encoding/hex: invalid byte: U+002D \\'-\\'' to include 'invalid ledger_index'",
                            "estack": "AssertionError: expected 'encoding/hex: invalid byte: U+002D \\'-\\'' to include 'invalid ledger_index'\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "57beae2b-83fb-4e27-bd50-678ea99b82d4",
                          "parentUUID": "de8eb59b-0737-4004-ad32-3ed9e221c49d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0120\t无效区块编号，不需要返回所有交易详情",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockByHash 0120\t无效区块编号，不需要返回所有交易详情",
                          "timedOut": false,
                          "duration": 5,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'encoding/hex: invalid byte: U+0067 \\'g\\'' to include 'invalid ledger_index'",
                            "estack": "AssertionError: expected 'encoding/hex: invalid byte: U+0067 \\'g\\'' to include 'invalid ledger_index'\n    at Object.checkBlock [as checkFunction] (test\\testCases\\tcsGetBlock.js:214:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "6202368e-22cc-40e8-8e2d-17d4ddd63e3e",
                          "parentUUID": "de8eb59b-0737-4004-ad32-3ed9e221c49d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a841cc4f-d750-4b91-84b5-bdab6c971125",
                        "f675ee7e-ccca-445d-be7e-d0704ec10779",
                        "bae055d7-fadc-4bb2-8d54-a5e77e60c949",
                        "46775486-ce5c-4c2b-bbb2-2f501921c746",
                        "208e5d64-f87a-4818-9cdc-9c4089077bcf"
                      ],
                      "failures": [
                        "00ec8a81-7cf0-41fb-a0fd-db3a5b388814",
                        "3c0b1351-65b1-4748-97ee-87733d6ed84e",
                        "57beae2b-83fb-4e27-bd50-678ea99b82d4",
                        "6202368e-22cc-40e8-8e2d-17d4ddd63e3e"
                      ],
                      "pending": [],
                      "skipped": [],
                      "duration": 49,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "8f3c1814-dcc1-4000-afd2-4a56ebf8dadd",
                      "title": "测试jt_createAccount",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_createAccount \"before all\" hook",
                          "timedOut": false,
                          "duration": 94,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "abef429f-e153-4ce7-8eba-fa721678b287",
                          "parentUUID": "8f3c1814-dcc1-4000-afd2-4a56ebf8dadd",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t创建有效的账户",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_createAccount 0010\t创建有效的账户",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "fb5c65e4-9bb5-4fe4-897f-9dc3a1427f3b",
                          "parentUUID": "8f3c1814-dcc1-4000-afd2-4a56ebf8dadd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t创建无效的账户:重复的名字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_createAccount 0020\t创建无效的账户:重复的名字",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "2b3411d2-b8b7-4156-8ed8-9523524a8c7c",
                          "parentUUID": "8f3c1814-dcc1-4000-afd2-4a56ebf8dadd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t创建无效的账户:超过长度的字符串数字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_createAccount 0020\t创建无效的账户:超过长度的字符串数字",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "a28331dd-2906-4ae0-8689-ce3ef6c37324",
                          "parentUUID": "8f3c1814-dcc1-4000-afd2-4a56ebf8dadd",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "fb5c65e4-9bb5-4fe4-897f-9dc3a1427f3b",
                        "2b3411d2-b8b7-4156-8ed8-9523524a8c7c",
                        "a28331dd-2906-4ae0-8689-ce3ef6c37324"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 10,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "01f468d3-e58a-4042-b2e0-5a9f35850520",
                      "title": "测试jt_getAccount",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "a0737095-53e3-48f9-8a27-dcbabe4ac65c",
                          "title": "测试jt_getAccount， tag为null",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null \"before all\" hook",
                              "timedOut": false,
                              "duration": 149,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "b914bb4f-b9d0-4f1b-a0ad-ab7ac89080a5",
                              "parentUUID": "a0737095-53e3-48f9-8a27-dcbabe4ac65c",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "8f4e40ea-ff96-47c4-a4a3-a9e67cf3683a",
                              "parentUUID": "a0737095-53e3-48f9-8a27-dcbabe4ac65c",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "afd42921-b554-4584-86e1-8194b360f30b",
                              "parentUUID": "a0737095-53e3-48f9-8a27-dcbabe4ac65c",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg' to include 'Account not found.'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "0e435ae8-0e14-4429-a61c-5240cc554a90",
                              "parentUUID": "a0737095-53e3-48f9-8a27-dcbabe4ac65c",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 5,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "8e86dfad-75e3-41a2-a8c7-af5af4d12f7f",
                              "parentUUID": "a0737095-53e3-48f9-8a27-dcbabe4ac65c",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "684daa1f-41c0-4105-be02-9160af66c30a",
                              "parentUUID": "a0737095-53e3-48f9-8a27-dcbabe4ac65c",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为null 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "c27f4695-06f1-4446-949c-b5724bb84a22",
                              "parentUUID": "a0737095-53e3-48f9-8a27-dcbabe4ac65c",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "8f4e40ea-ff96-47c4-a4a3-a9e67cf3683a",
                            "afd42921-b554-4584-86e1-8194b360f30b"
                          ],
                          "failures": [
                            "0e435ae8-0e14-4429-a61c-5240cc554a90",
                            "8e86dfad-75e3-41a2-a8c7-af5af4d12f7f",
                            "684daa1f-41c0-4105-be02-9160af66c30a",
                            "c27f4695-06f1-4446-949c-b5724bb84a22"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 16,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "cd3d0066-2c3d-4acd-b27a-91b3e4964574",
                          "title": "测试jt_getAccount， tag为validated",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated \"before all\" hook",
                              "timedOut": false,
                              "duration": 171,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "4db70ffd-78a1-468c-849d-b1df542ee838",
                              "parentUUID": "cd3d0066-2c3d-4acd-b27a-91b3e4964574",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "a5f4d9d9-43d4-4509-bfbe-ac23403e4763",
                              "parentUUID": "cd3d0066-2c3d-4acd-b27a-91b3e4964574",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "13755e64-bbb9-4768-ad2c-1ab8b7247139",
                              "parentUUID": "cd3d0066-2c3d-4acd-b27a-91b3e4964574",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 12,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,validated' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,validated' to include 'Account not found.'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "c72f6a0e-a2f7-45c1-9d5d-54b8d1f59e08",
                              "parentUUID": "cd3d0066-2c3d-4acd-b27a-91b3e4964574",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 8,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "fd694b8c-ca06-4055-9bba-a7e45faef768",
                              "parentUUID": "cd3d0066-2c3d-4acd-b27a-91b3e4964574",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 23,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "5a20b3e3-b929-4761-8bbb-8e5b2d5ae139",
                              "parentUUID": "cd3d0066-2c3d-4acd-b27a-91b3e4964574",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为validated 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "48556a1e-7377-493d-aef5-bf5bf5f412fd",
                              "parentUUID": "cd3d0066-2c3d-4acd-b27a-91b3e4964574",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "a5f4d9d9-43d4-4509-bfbe-ac23403e4763",
                            "13755e64-bbb9-4768-ad2c-1ab8b7247139",
                            "c72f6a0e-a2f7-45c1-9d5d-54b8d1f59e08",
                            "fd694b8c-ca06-4055-9bba-a7e45faef768",
                            "5a20b3e3-b929-4761-8bbb-8e5b2d5ae139",
                            "48556a1e-7377-493d-aef5-bf5bf5f412fd"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 60,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "1ead5075-d9dc-46ff-a821-20f2fa0ded7e",
                          "title": "测试jt_getAccount， tag为current",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current \"before all\" hook",
                              "timedOut": false,
                              "duration": 159,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "e091f6ed-b610-4a34-9d3f-915d5ffa6cf5",
                              "parentUUID": "1ead5075-d9dc-46ff-a821-20f2fa0ded7e",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "24af7227-e728-409e-a339-603e2a1b12d3",
                              "parentUUID": "1ead5075-d9dc-46ff-a821-20f2fa0ded7e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "e28c0e68-3caa-4b00-841b-15956ad37b94",
                              "parentUUID": "1ead5075-d9dc-46ff-a821-20f2fa0ded7e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,current' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,current' to include 'Account not found.'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "7b7dd9ed-6b18-40b0-b1b2-c7afb135e434",
                              "parentUUID": "1ead5075-d9dc-46ff-a821-20f2fa0ded7e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "f03b4861-56ab-441c-a4e0-14cf0f5e4083",
                              "parentUUID": "1ead5075-d9dc-46ff-a821-20f2fa0ded7e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "fe17b378-19f9-48e5-b610-42e86c230646",
                              "parentUUID": "1ead5075-d9dc-46ff-a821-20f2fa0ded7e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为current 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 4,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "837df3d4-0177-4aae-aa48-05d62cfeae9e",
                              "parentUUID": "1ead5075-d9dc-46ff-a821-20f2fa0ded7e",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "24af7227-e728-409e-a339-603e2a1b12d3",
                            "e28c0e68-3caa-4b00-841b-15956ad37b94",
                            "7b7dd9ed-6b18-40b0-b1b2-c7afb135e434",
                            "f03b4861-56ab-441c-a4e0-14cf0f5e4083",
                            "fe17b378-19f9-48e5-b610-42e86c230646",
                            "837df3d4-0177-4aae-aa48-05d62cfeae9e"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 16,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "3454c22d-5d5f-4011-bc2a-8b8f0da87243",
                          "title": "测试jt_getAccount， tag为closed",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed \"before all\" hook",
                              "timedOut": false,
                              "duration": 186,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "f12ef0e3-92a7-4ed0-947c-43a49d09c802",
                              "parentUUID": "3454c22d-5d5f-4011-bc2a-8b8f0da87243",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 6,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "ab946075-a7d4-4f80-a72e-09ed6aa83063",
                              "parentUUID": "3454c22d-5d5f-4011-bc2a-8b8f0da87243",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:112:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "4bbaa1a9-1150-4636-a6e8-b74131a3fa38",
                              "parentUUID": "3454c22d-5d5f-4011-bc2a-8b8f0da87243",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,closed' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,closed' to include 'Account not found.'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "cc06543d-c455-4145-af82-dd668baea10b",
                              "parentUUID": "3454c22d-5d5f-4011-bc2a-8b8f0da87243",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 10,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "14f35927-f562-49b2-b506-1f459afca083",
                              "parentUUID": "3454c22d-5d5f-4011-bc2a-8b8f0da87243",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 10,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "86074715-3450-448e-bbee-d31b2a5263e0",
                              "parentUUID": "3454c22d-5d5f-4011-bc2a-8b8f0da87243",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getAccount 测试jt_getAccount， tag为closed 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 10,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetAccount [as checkFunction] (test\\testCases\\tcsGetAccount.js:118:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "e73ed386-fa5a-4c93-b891-674c369cf07e",
                              "parentUUID": "3454c22d-5d5f-4011-bc2a-8b8f0da87243",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "ab946075-a7d4-4f80-a72e-09ed6aa83063",
                            "4bbaa1a9-1150-4636-a6e8-b74131a3fa38",
                            "cc06543d-c455-4145-af82-dd668baea10b",
                            "14f35927-f562-49b2-b506-1f459afca083",
                            "86074715-3450-448e-bbee-d31b2a5263e0",
                            "e73ed386-fa5a-4c93-b891-674c369cf07e"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 50,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "4c750cdd-2307-4f3e-a268-a053fbf613da",
                      "title": "测试jt_accounts",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_accounts \"before all\" hook",
                          "timedOut": false,
                          "duration": 73,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "973301bd-a68c-474b-90b5-82536cafd7ea",
                          "parentUUID": "4c750cdd-2307-4f3e-a268-a053fbf613da",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\tjt_accounts",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_accounts 0010\tjt_accounts",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "1c8d4f6e-7f10-4f9e-9329-e7deb7e81005",
                          "parentUUID": "4c750cdd-2307-4f3e-a268-a053fbf613da",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "1c8d4f6e-7f10-4f9e-9329-e7deb7e81005"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "931704a6-f4d3-40cc-bb50-45ec7c0425d1",
                      "title": "测试jt_getBalance",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "35a45fa2-d099-4df4-8a9d-6ad0d9c640fb",
                          "title": "测试jt_getBalance， Token为swtc，tag为null",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null \"before all\" hook",
                              "timedOut": false,
                              "duration": 167,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "cecfa96d-0f4e-4be3-b7bf-00224106e15a",
                              "parentUUID": "35a45fa2-d099-4df4-8a9d-6ad0d9c640fb",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "5028136f-891b-470c-9e19-a1559fef512c",
                              "parentUUID": "35a45fa2-d099-4df4-8a9d-6ad0d9c640fb",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "78c897b4-26a7-4966-8418-d86b625129dc",
                              "parentUUID": "35a45fa2-d099-4df4-8a9d-6ad0d9c640fb",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "c8bfaecf-5dab-4db9-9b8c-ec2ab97b97b5",
                              "parentUUID": "35a45fa2-d099-4df4-8a9d-6ad0d9c640fb",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "7fa3c0fa-044f-45aa-ad3d-3f3ffce9453b",
                              "parentUUID": "35a45fa2-d099-4df4-8a9d-6ad0d9c640fb",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "6c4725ae-b3ae-4af8-ab82-980b29bb374f",
                              "parentUUID": "35a45fa2-d099-4df4-8a9d-6ad0d9c640fb",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为null 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 6,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "9372f0c0-b6d6-4ede-a2a1-43c266d01eca",
                              "parentUUID": "35a45fa2-d099-4df4-8a9d-6ad0d9c640fb",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "5028136f-891b-470c-9e19-a1559fef512c",
                            "78c897b4-26a7-4966-8418-d86b625129dc"
                          ],
                          "failures": [
                            "c8bfaecf-5dab-4db9-9b8c-ec2ab97b97b5",
                            "7fa3c0fa-044f-45aa-ad3d-3f3ffce9453b",
                            "6c4725ae-b3ae-4af8-ab82-980b29bb374f",
                            "9372f0c0-b6d6-4ede-a2a1-43c266d01eca"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 19,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "4b0853c6-5d6c-43f3-bcb3-507ac7569dd1",
                          "title": "测试jt_getBalance， Token为swtc，tag为current",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current \"before all\" hook",
                              "timedOut": false,
                              "duration": 171,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "f104e03d-c0e3-4e98-8afd-04d2f8fff886",
                              "parentUUID": "4b0853c6-5d6c-43f3-bcb3-507ac7569dd1",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "bf9ec282-9837-4d83-b2df-b9b23af2b019",
                              "parentUUID": "4b0853c6-5d6c-43f3-bcb3-507ac7569dd1",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "62dc127d-d8bf-4287-9a81-c79f185f9669",
                              "parentUUID": "4b0853c6-5d6c-43f3-bcb3-507ac7569dd1",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,,current' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,,current' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "6077258e-8554-48c8-a78c-e630b0f430d7",
                              "parentUUID": "4b0853c6-5d6c-43f3-bcb3-507ac7569dd1",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "98a53302-9aef-44cb-99be-cef0758f55d1",
                              "parentUUID": "4b0853c6-5d6c-43f3-bcb3-507ac7569dd1",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 4,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "e3ebdfc3-daeb-4633-ba66-661b511e2f08",
                              "parentUUID": "4b0853c6-5d6c-43f3-bcb3-507ac7569dd1",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为current 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "8d79adae-7b8a-4c27-b932-a5aee519a1d9",
                              "parentUUID": "4b0853c6-5d6c-43f3-bcb3-507ac7569dd1",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "bf9ec282-9837-4d83-b2df-b9b23af2b019",
                            "62dc127d-d8bf-4287-9a81-c79f185f9669"
                          ],
                          "failures": [
                            "6077258e-8554-48c8-a78c-e630b0f430d7",
                            "98a53302-9aef-44cb-99be-cef0758f55d1",
                            "e3ebdfc3-daeb-4633-ba66-661b511e2f08",
                            "8d79adae-7b8a-4c27-b932-a5aee519a1d9"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 22,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "72c9cc2e-b961-4aaa-89e2-47910ef3e8cc",
                          "title": "测试jt_getBalance， Token为swtc，tag为validated",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated \"before all\" hook",
                              "timedOut": false,
                              "duration": 169,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "c7aa7c57-855b-456c-9264-2eeda9883307",
                              "parentUUID": "72c9cc2e-b961-4aaa-89e2-47910ef3e8cc",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "0da8e163-0bfa-4bd5-80f9-c736639257ea",
                              "parentUUID": "72c9cc2e-b961-4aaa-89e2-47910ef3e8cc",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "69cf782f-7a18-41b0-b949-61963c2a2431",
                              "parentUUID": "72c9cc2e-b961-4aaa-89e2-47910ef3e8cc",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,,validated' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,,validated' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "fb8ceab5-e147-4d0c-87c5-c55f445d7298",
                              "parentUUID": "72c9cc2e-b961-4aaa-89e2-47910ef3e8cc",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 5,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "8d587761-c0fd-49b3-bb0c-d4287325e6b0",
                              "parentUUID": "72c9cc2e-b961-4aaa-89e2-47910ef3e8cc",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "a02dedf7-67c1-4f4d-9c05-b87781f0cd7a",
                              "parentUUID": "72c9cc2e-b961-4aaa-89e2-47910ef3e8cc",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为validated 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "5f94dd40-7298-4ca0-a084-ea4574278f3f",
                              "parentUUID": "72c9cc2e-b961-4aaa-89e2-47910ef3e8cc",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "0da8e163-0bfa-4bd5-80f9-c736639257ea",
                            "69cf782f-7a18-41b0-b949-61963c2a2431"
                          ],
                          "failures": [
                            "fb8ceab5-e147-4d0c-87c5-c55f445d7298",
                            "8d587761-c0fd-49b3-bb0c-d4287325e6b0",
                            "a02dedf7-67c1-4f4d-9c05-b87781f0cd7a",
                            "5f94dd40-7298-4ca0-a084-ea4574278f3f"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 16,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "f948f90d-6765-4c05-893e-200415e92788",
                          "title": "测试jt_getBalance， Token为swtc，tag为closed",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed \"before all\" hook",
                              "timedOut": false,
                              "duration": 161,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "fe18280c-dfd6-463f-9416-620e393a12df",
                              "parentUUID": "f948f90d-6765-4c05-893e-200415e92788",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "cb486fa2-3c77-4271-a041-76e662845d6c",
                              "parentUUID": "f948f90d-6765-4c05-893e-200415e92788",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "6b3f183d-78e3-49bc-9529-b09eafb6a89a",
                              "parentUUID": "f948f90d-6765-4c05-893e-200415e92788",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,,closed' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,,closed' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "aa900d9e-faba-493a-96ea-09182580e22c",
                              "parentUUID": "f948f90d-6765-4c05-893e-200415e92788",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "eaa30a38-4359-48ed-b47b-8e163d4f2ba7",
                              "parentUUID": "f948f90d-6765-4c05-893e-200415e92788",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "92f4c952-8070-49db-ad4d-4f23f9345fd2",
                              "parentUUID": "f948f90d-6765-4c05-893e-200415e92788",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为closed 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "3bd824be-6ce4-4e8d-a5e4-5483d0832e67",
                              "parentUUID": "f948f90d-6765-4c05-893e-200415e92788",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "cb486fa2-3c77-4271-a041-76e662845d6c",
                            "6b3f183d-78e3-49bc-9529-b09eafb6a89a"
                          ],
                          "failures": [
                            "aa900d9e-faba-493a-96ea-09182580e22c",
                            "eaa30a38-4359-48ed-b47b-8e163d4f2ba7",
                            "92f4c952-8070-49db-ad4d-4f23f9345fd2",
                            "3bd824be-6ce4-4e8d-a5e4-5483d0832e67"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 14,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "aede3c29-64c1-4207-9a52-4b57da2b87aa",
                          "title": "测试jt_getBalance， Token为swtc，tag为4136",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为4136 \"before all\" hook",
                              "timedOut": false,
                              "duration": 165,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "98c17f5f-5ee9-47a4-a676-bc7d1f2db191",
                              "parentUUID": "aede3c29-64c1-4207-9a52-4b57da2b87aa",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为4136 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "1e49cc64-2faf-422f-8649-725ebfb6295c",
                              "parentUUID": "aede3c29-64c1-4207-9a52-4b57da2b87aa",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为4136 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "b3ba36dc-7263-4390-bb56-4415fbb11a85",
                              "parentUUID": "aede3c29-64c1-4207-9a52-4b57da2b87aa",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为4136 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,,4136' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,,4136' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "7d77e257-eb40-475b-a928-f20ab10b85e4",
                              "parentUUID": "aede3c29-64c1-4207-9a52-4b57da2b87aa",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为4136 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 6,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "b5c15944-7f17-4b07-aad6-0a798194fe22",
                              "parentUUID": "aede3c29-64c1-4207-9a52-4b57da2b87aa",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为4136 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "e49e7d13-0e64-43a3-bd0a-4492cbd827ce",
                              "parentUUID": "aede3c29-64c1-4207-9a52-4b57da2b87aa",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为4136 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 5,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "71ff45ed-c447-435d-a817-7ecf6f2d55a9",
                              "parentUUID": "aede3c29-64c1-4207-9a52-4b57da2b87aa",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "1e49cc64-2faf-422f-8649-725ebfb6295c",
                            "b3ba36dc-7263-4390-bb56-4415fbb11a85"
                          ],
                          "failures": [
                            "7d77e257-eb40-475b-a928-f20ab10b85e4",
                            "b5c15944-7f17-4b07-aad6-0a798194fe22",
                            "e49e7d13-0e64-43a3-bd0a-4492cbd827ce",
                            "71ff45ed-c447-435d-a817-7ecf6f2d55a9"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 19,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "f28e5a9d-6b59-4e66-a396-d6719912f1ac",
                          "title": "测试jt_getBalance， Token为swtc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 \"before all\" hook",
                              "timedOut": false,
                              "duration": 160,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "a2e3a80d-0fa2-4c51-af69-ebcc0db6d045",
                              "parentUUID": "f28e5a9d-6b59-4e66-a396-d6719912f1ac",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "fc6863bf-baca-4f40-a8cd-c558ccdfab3b",
                              "parentUUID": "f28e5a9d-6b59-4e66-a396-d6719912f1ac",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "0e8152c7-b43e-4f4d-8eeb-49b883085bbd",
                              "parentUUID": "f28e5a9d-6b59-4e66-a396-d6719912f1ac",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,,C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,,C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "459d57bf-6a3c-4f46-8afd-f9e229ebf4b4",
                              "parentUUID": "f28e5a9d-6b59-4e66-a396-d6719912f1ac",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "d46c5dd5-0a45-47b0-9f7f-7f5638934517",
                              "parentUUID": "f28e5a9d-6b59-4e66-a396-d6719912f1ac",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "cceb0e23-8b16-4450-9a01-bbfdf19893c8",
                              "parentUUID": "f28e5a9d-6b59-4e66-a396-d6719912f1ac",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为swtc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "fbf24d63-232c-4ed2-9011-39f12922ed5a",
                              "parentUUID": "f28e5a9d-6b59-4e66-a396-d6719912f1ac",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "fc6863bf-baca-4f40-a8cd-c558ccdfab3b",
                            "0e8152c7-b43e-4f4d-8eeb-49b883085bbd"
                          ],
                          "failures": [
                            "459d57bf-6a3c-4f46-8afd-f9e229ebf4b4",
                            "d46c5dd5-0a45-47b0-9f7f-7f5638934517",
                            "cceb0e23-8b16-4450-9a01-bbfdf19893c8",
                            "fbf24d63-232c-4ed2-9011-39f12922ed5a"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 14,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "4190f348-570e-48ac-a0a2-85f90182c77a",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为null",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null \"before all\" hook",
                              "timedOut": false,
                              "duration": 165,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "e6ea01aa-5564-4922-875d-a6c090cf7bee",
                              "parentUUID": "4190f348-570e-48ac-a0a2-85f90182c77a",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "fa691074-681a-4e10-8e2c-91a8cf7ef24c",
                              "parentUUID": "4190f348-570e-48ac-a0a2-85f90182c77a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "98ae929c-0eb0-403b-8827-151111ddd7dc",
                              "parentUUID": "4190f348-570e-48ac-a0a2-85f90182c77a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 6,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "c4bbc31b-26ba-4326-9a42-ab4ad9bd27f0",
                              "parentUUID": "4190f348-570e-48ac-a0a2-85f90182c77a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "bf58457f-5652-4efc-a142-2e78bad34773",
                              "parentUUID": "4190f348-570e-48ac-a0a2-85f90182c77a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "43072203-3b56-40bf-ae25-20b2ccaabf9b",
                              "parentUUID": "4190f348-570e-48ac-a0a2-85f90182c77a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为null 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "28a8b936-56cb-4266-b505-376ec233e957",
                              "parentUUID": "4190f348-570e-48ac-a0a2-85f90182c77a",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "fa691074-681a-4e10-8e2c-91a8cf7ef24c",
                            "98ae929c-0eb0-403b-8827-151111ddd7dc",
                            "c4bbc31b-26ba-4326-9a42-ab4ad9bd27f0",
                            "bf58457f-5652-4efc-a142-2e78bad34773",
                            "43072203-3b56-40bf-ae25-20b2ccaabf9b",
                            "28a8b936-56cb-4266-b505-376ec233e957"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 23,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "82261ddb-795f-4fc9-b64f-29ae8424b440",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为current",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current \"before all\" hook",
                              "timedOut": false,
                              "duration": 161,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "4dbc796f-15f8-417e-bdf0-98394e51cd06",
                              "parentUUID": "82261ddb-795f-4fc9-b64f-29ae8424b440",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 4,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "373e7c45-29d2-4e4d-b151-59bee62d6963",
                              "parentUUID": "82261ddb-795f-4fc9-b64f-29ae8424b440",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "1edbb51f-f2a4-4fc2-b72e-710bcb9fdccb",
                              "parentUUID": "82261ddb-795f-4fc9-b64f-29ae8424b440",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc,current' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc,current' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "eed00c40-9b0e-47fd-8950-ad0a6eaf25bd",
                              "parentUUID": "82261ddb-795f-4fc9-b64f-29ae8424b440",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "bf2925ca-75e7-4655-90b3-77e178e9f235",
                              "parentUUID": "82261ddb-795f-4fc9-b64f-29ae8424b440",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 5,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "31787f6c-23f8-4498-817f-784024ddcbd3",
                              "parentUUID": "82261ddb-795f-4fc9-b64f-29ae8424b440",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为current 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "734fffc1-3af3-458f-854a-4d4002a42414",
                              "parentUUID": "82261ddb-795f-4fc9-b64f-29ae8424b440",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "373e7c45-29d2-4e4d-b151-59bee62d6963",
                            "1edbb51f-f2a4-4fc2-b72e-710bcb9fdccb",
                            "eed00c40-9b0e-47fd-8950-ad0a6eaf25bd",
                            "bf2925ca-75e7-4655-90b3-77e178e9f235",
                            "31787f6c-23f8-4498-817f-784024ddcbd3",
                            "734fffc1-3af3-458f-854a-4d4002a42414"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 17,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "22d56bff-ceb9-449b-87f1-faf441ecfa5a",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为validated",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated \"before all\" hook",
                              "timedOut": false,
                              "duration": 160,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "9400e60b-93d9-4678-b3ae-4dc6dd04b420",
                              "parentUUID": "22d56bff-ceb9-449b-87f1-faf441ecfa5a",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "524b7b08-4430-4676-b380-d0c6cc6756a9",
                              "parentUUID": "22d56bff-ceb9-449b-87f1-faf441ecfa5a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "737345d5-aa13-4134-bc16-9e3e57d7e67d",
                              "parentUUID": "22d56bff-ceb9-449b-87f1-faf441ecfa5a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 6,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc,validated' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc,validated' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "18694834-2729-42bb-9d9a-2e74a2f7de7c",
                              "parentUUID": "22d56bff-ceb9-449b-87f1-faf441ecfa5a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "0573fd6b-114a-431f-929f-fa19453c50a5",
                              "parentUUID": "22d56bff-ceb9-449b-87f1-faf441ecfa5a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "ef82ce98-ed78-436b-9cfd-8a97334e80ba",
                              "parentUUID": "22d56bff-ceb9-449b-87f1-faf441ecfa5a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为validated 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "ec410e26-1c4a-4c59-a6ad-8f96e5821de9",
                              "parentUUID": "22d56bff-ceb9-449b-87f1-faf441ecfa5a",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "524b7b08-4430-4676-b380-d0c6cc6756a9",
                            "737345d5-aa13-4134-bc16-9e3e57d7e67d",
                            "18694834-2729-42bb-9d9a-2e74a2f7de7c",
                            "0573fd6b-114a-431f-929f-fa19453c50a5",
                            "ef82ce98-ed78-436b-9cfd-8a97334e80ba",
                            "ec410e26-1c4a-4c59-a6ad-8f96e5821de9"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 23,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "1e42307d-0413-4de7-bef3-0529b12d8fe9",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为closed",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed \"before all\" hook",
                              "timedOut": false,
                              "duration": 161,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "12c4f011-6672-4316-98e9-0256cf213796",
                              "parentUUID": "1e42307d-0413-4de7-bef3-0529b12d8fe9",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "9a110f55-b6ec-441e-9b39-2275ee93d8d2",
                              "parentUUID": "1e42307d-0413-4de7-bef3-0529b12d8fe9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "225af1de-f419-4ebf-a01c-42493ec93a6b",
                              "parentUUID": "1e42307d-0413-4de7-bef3-0529b12d8fe9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc,closed' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc,closed' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "64c28755-3496-4998-bf86-909b5e3f5989",
                              "parentUUID": "1e42307d-0413-4de7-bef3-0529b12d8fe9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "87f1352f-7696-4160-9b22-c1293397f33d",
                              "parentUUID": "1e42307d-0413-4de7-bef3-0529b12d8fe9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "0d0dee76-2e5a-465a-99ac-c668e2a7d232",
                              "parentUUID": "1e42307d-0413-4de7-bef3-0529b12d8fe9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为closed 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "6c03a243-4325-4621-90d9-3aa4c3b44d98",
                              "parentUUID": "1e42307d-0413-4de7-bef3-0529b12d8fe9",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "9a110f55-b6ec-441e-9b39-2275ee93d8d2",
                            "225af1de-f419-4ebf-a01c-42493ec93a6b",
                            "64c28755-3496-4998-bf86-909b5e3f5989",
                            "87f1352f-7696-4160-9b22-c1293397f33d",
                            "0d0dee76-2e5a-465a-99ac-c668e2a7d232",
                            "6c03a243-4325-4621-90d9-3aa4c3b44d98"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 13,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "a6d39b88-965e-4c91-b5c3-9271ecf7f8e4",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为4136",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为4136 \"before all\" hook",
                              "timedOut": false,
                              "duration": 172,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "1ad1c895-c088-4713-aa88-8d14afd45907",
                              "parentUUID": "a6d39b88-965e-4c91-b5c3-9271ecf7f8e4",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为4136 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "7c3eddca-2c01-4e8b-8c38-cfb9500e7907",
                              "parentUUID": "a6d39b88-965e-4c91-b5c3-9271ecf7f8e4",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为4136 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "1051fc30-d9ec-46a1-8456-a10ed097e24f",
                              "parentUUID": "a6d39b88-965e-4c91-b5c3-9271ecf7f8e4",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为4136 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 9,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc,4136' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc,4136' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "5db144ef-975a-4014-b1f8-220aa62eb4dd",
                              "parentUUID": "a6d39b88-965e-4c91-b5c3-9271ecf7f8e4",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为4136 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 6,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "152138e6-ea98-4ed2-a31e-c171bf7fbcea",
                              "parentUUID": "a6d39b88-965e-4c91-b5c3-9271ecf7f8e4",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为4136 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "8a3d67a2-5f39-4b61-92a3-0ba6452671d9",
                              "parentUUID": "a6d39b88-965e-4c91-b5c3-9271ecf7f8e4",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为4136 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "17a98f7e-1ae7-40cd-bbd6-d4a9a809964c",
                              "parentUUID": "a6d39b88-965e-4c91-b5c3-9271ecf7f8e4",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "7c3eddca-2c01-4e8b-8c38-cfb9500e7907",
                            "1051fc30-d9ec-46a1-8456-a10ed097e24f",
                            "5db144ef-975a-4014-b1f8-220aa62eb4dd",
                            "152138e6-ea98-4ed2-a31e-c171bf7fbcea",
                            "8a3d67a2-5f39-4b61-92a3-0ba6452671d9",
                            "17a98f7e-1ae7-40cd-bbd6-d4a9a809964c"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 29,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "5bd89915-f94f-4ff3-be45-68bbf865e28a",
                          "title": "测试jt_getBalance， Token为5e69b0cc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 \"before all\" hook",
                              "timedOut": false,
                              "duration": 151,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "8b625018-b96e-4196-8c46-3944b048aa55",
                              "parentUUID": "5bd89915-f94f-4ff3-be45-68bbf865e28a",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "e000271b-07c0-4066-8d98-a32b3e21f934",
                              "parentUUID": "5bd89915-f94f-4ff3-be45-68bbf865e28a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 5,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "d344d275-5ea9-4237-8199-4dd6d71f4285",
                              "parentUUID": "5bd89915-f94f-4ff3-be45-68bbf865e28a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc,C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0cc,C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "9367d6b9-ea1c-497a-b4d2-81b44ad480fc",
                              "parentUUID": "5bd89915-f94f-4ff3-be45-68bbf865e28a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "252a7750-7161-4cb1-abc3-7fc5a980fe1b",
                              "parentUUID": "5bd89915-f94f-4ff3-be45-68bbf865e28a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 11,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "e3a7f718-ae81-43a3-b130-187ff24918e9",
                              "parentUUID": "5bd89915-f94f-4ff3-be45-68bbf865e28a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0cc，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 12,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "b79e847a-393a-4f85-bc56-9db7e26a888d",
                              "parentUUID": "5bd89915-f94f-4ff3-be45-68bbf865e28a",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "e000271b-07c0-4066-8d98-a32b3e21f934",
                            "d344d275-5ea9-4237-8199-4dd6d71f4285",
                            "9367d6b9-ea1c-497a-b4d2-81b44ad480fc",
                            "252a7750-7161-4cb1-abc3-7fc5a980fe1b",
                            "e3a7f718-ae81-43a3-b130-187ff24918e9",
                            "b79e847a-393a-4f85-bc56-9db7e26a888d"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 36,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "e3005914-289f-40a4-8c46-7e5f6c62603e",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为null",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null \"before all\" hook",
                              "timedOut": false,
                              "duration": 160,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "6cb8df32-ab47-48ae-98e0-9858c8e5b900",
                              "parentUUID": "e3005914-289f-40a4-8c46-7e5f6c62603e",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 5,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "80962a36-653d-41f9-a8c8-48ae80cfcc84",
                              "parentUUID": "e3005914-289f-40a4-8c46-7e5f6c62603e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 5,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "e8de6a2f-4608-47b4-9e27-e3d52c0de72b",
                              "parentUUID": "e3005914-289f-40a4-8c46-7e5f6c62603e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "c3dc8495-7935-4eef-8a6d-6667ddf56428",
                              "parentUUID": "e3005914-289f-40a4-8c46-7e5f6c62603e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 6,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "cc81d01d-71e1-4994-b5dd-fb4df7538d9d",
                              "parentUUID": "e3005914-289f-40a4-8c46-7e5f6c62603e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "8a9c062f-5a6b-43f5-8472-235f5d6c7ba4",
                              "parentUUID": "e3005914-289f-40a4-8c46-7e5f6c62603e",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为null 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 5,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "d79b369b-4a3c-41ab-98f0-75d09380b224",
                              "parentUUID": "e3005914-289f-40a4-8c46-7e5f6c62603e",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "80962a36-653d-41f9-a8c8-48ae80cfcc84",
                            "e8de6a2f-4608-47b4-9e27-e3d52c0de72b",
                            "c3dc8495-7935-4eef-8a6d-6667ddf56428",
                            "cc81d01d-71e1-4994-b5dd-fb4df7538d9d",
                            "8a9c062f-5a6b-43f5-8472-235f5d6c7ba4",
                            "d79b369b-4a3c-41ab-98f0-75d09380b224"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 26,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "2141b036-c2e5-4d4d-b491-bc795186bf46",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为current",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current \"before all\" hook",
                              "timedOut": false,
                              "duration": 157,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "ef4dab54-df2e-4dd4-b3e6-f1fd86e68b38",
                              "parentUUID": "2141b036-c2e5-4d4d-b491-bc795186bf46",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "88eeee1b-03b3-485d-9bcf-62e73f0b83ab",
                              "parentUUID": "2141b036-c2e5-4d4d-b491-bc795186bf46",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "a58d19ed-3b38-41f2-b366-d91d5f861e7d",
                              "parentUUID": "2141b036-c2e5-4d4d-b491-bc795186bf46",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 1,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4,current' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4,current' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "730cb3e9-bcf5-400e-8e43-198d0046a5e2",
                              "parentUUID": "2141b036-c2e5-4d4d-b491-bc795186bf46",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 4,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "7437da25-7751-40fe-bb73-5bf79c06fd48",
                              "parentUUID": "2141b036-c2e5-4d4d-b491-bc795186bf46",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "38c3ac4f-33bf-4f3a-a07e-8a0676da8331",
                              "parentUUID": "2141b036-c2e5-4d4d-b491-bc795186bf46",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为current 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 4,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "8d249057-448d-4b24-81c6-5ce2325ed9b6",
                              "parentUUID": "2141b036-c2e5-4d4d-b491-bc795186bf46",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "88eeee1b-03b3-485d-9bcf-62e73f0b83ab",
                            "a58d19ed-3b38-41f2-b366-d91d5f861e7d",
                            "730cb3e9-bcf5-400e-8e43-198d0046a5e2",
                            "7437da25-7751-40fe-bb73-5bf79c06fd48",
                            "38c3ac4f-33bf-4f3a-a07e-8a0676da8331",
                            "8d249057-448d-4b24-81c6-5ce2325ed9b6"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 19,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "17c8735a-ec37-4d31-a3a9-d3cda79514bc",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为validated",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated \"before all\" hook",
                              "timedOut": false,
                              "duration": 172,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "03f341de-c649-4106-a791-53fadd7489d5",
                              "parentUUID": "17c8735a-ec37-4d31-a3a9-d3cda79514bc",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "d9b6912b-b50c-4a67-b0ca-fa08fae162c0",
                              "parentUUID": "17c8735a-ec37-4d31-a3a9-d3cda79514bc",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 9,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "367cd026-90a6-4a4e-bce0-90e49cc2e13e",
                              "parentUUID": "17c8735a-ec37-4d31-a3a9-d3cda79514bc",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 6,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4,validated' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4,validated' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "f314c21e-3cf2-4363-ab2c-dee3583a3b12",
                              "parentUUID": "17c8735a-ec37-4d31-a3a9-d3cda79514bc",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "9bfd9ef5-6770-4d61-9bb0-fcd0b9557cc0",
                              "parentUUID": "17c8735a-ec37-4d31-a3a9-d3cda79514bc",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 8,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "7f00f857-0654-472a-b53e-e5baa5677792",
                              "parentUUID": "17c8735a-ec37-4d31-a3a9-d3cda79514bc",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为validated 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 4,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "3de206bb-5f69-427b-9b73-a8c11327c575",
                              "parentUUID": "17c8735a-ec37-4d31-a3a9-d3cda79514bc",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "d9b6912b-b50c-4a67-b0ca-fa08fae162c0",
                            "367cd026-90a6-4a4e-bce0-90e49cc2e13e",
                            "f314c21e-3cf2-4363-ab2c-dee3583a3b12",
                            "9bfd9ef5-6770-4d61-9bb0-fcd0b9557cc0",
                            "7f00f857-0654-472a-b53e-e5baa5677792",
                            "3de206bb-5f69-427b-9b73-a8c11327c575"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 41,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "9709cafe-583c-4a2b-9d41-9178aaf3db8b",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为closed",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed \"before all\" hook",
                              "timedOut": false,
                              "duration": 194,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "c898f6f1-f953-48a0-bcb7-6af66a0fa415",
                              "parentUUID": "9709cafe-583c-4a2b-9d41-9178aaf3db8b",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 5,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "57e83c1c-c84d-41f8-9e9d-e2e3eafe5b50",
                              "parentUUID": "9709cafe-583c-4a2b-9d41-9178aaf3db8b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 9,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "a522bce7-3029-4585-87b2-4af813c155c3",
                              "parentUUID": "9709cafe-583c-4a2b-9d41-9178aaf3db8b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 9,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4,closed' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4,closed' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "928a063f-c82d-4918-a6b9-2d79e5e3fdc7",
                              "parentUUID": "9709cafe-583c-4a2b-9d41-9178aaf3db8b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 5,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "ddd75bd2-4384-4789-9343-e5dd12b43861",
                              "parentUUID": "9709cafe-583c-4a2b-9d41-9178aaf3db8b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "1b2223d2-1b75-4682-98e3-011c3f625179",
                              "parentUUID": "9709cafe-583c-4a2b-9d41-9178aaf3db8b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为closed 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 4,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "e50d6e94-6b20-4bef-9a29-7dc2463d936c",
                              "parentUUID": "9709cafe-583c-4a2b-9d41-9178aaf3db8b",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "57e83c1c-c84d-41f8-9e9d-e2e3eafe5b50",
                            "a522bce7-3029-4585-87b2-4af813c155c3",
                            "928a063f-c82d-4918-a6b9-2d79e5e3fdc7",
                            "ddd75bd2-4384-4789-9343-e5dd12b43861",
                            "1b2223d2-1b75-4682-98e3-011c3f625179",
                            "e50d6e94-6b20-4bef-9a29-7dc2463d936c"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 39,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "66cc2f88-cfbc-4956-a907-a327610618d3",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为4136",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为4136 \"before all\" hook",
                              "timedOut": false,
                              "duration": 189,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "e16c4c70-7f04-4156-b80f-577a7fb268ad",
                              "parentUUID": "66cc2f88-cfbc-4956-a907-a327610618d3",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为4136 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 15,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "20d06893-a80a-4113-bbf1-30976a2f4309",
                              "parentUUID": "66cc2f88-cfbc-4956-a907-a327610618d3",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为4136 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 9,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "a8c78759-a272-4bfc-a811-6df3ec9f9036",
                              "parentUUID": "66cc2f88-cfbc-4956-a907-a327610618d3",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为4136 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4,4136' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4,4136' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "0186e363-8391-4cc1-9a17-a4370fd22381",
                              "parentUUID": "66cc2f88-cfbc-4956-a907-a327610618d3",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为4136 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "a0e2d7f2-2170-4c4d-ba7f-3425cc1662de",
                              "parentUUID": "66cc2f88-cfbc-4956-a907-a327610618d3",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为4136 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 3,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "f4d9bbc7-3a2f-4452-b496-244f76a94749",
                              "parentUUID": "66cc2f88-cfbc-4956-a907-a327610618d3",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为4136 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 2,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "565d8d1c-76a2-447c-9dd8-7b946b739d0a",
                              "parentUUID": "66cc2f88-cfbc-4956-a907-a327610618d3",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "20d06893-a80a-4113-bbf1-30976a2f4309",
                            "a8c78759-a272-4bfc-a811-6df3ec9f9036",
                            "0186e363-8391-4cc1-9a17-a4370fd22381",
                            "a0e2d7f2-2170-4c4d-ba7f-3425cc1662de",
                            "f4d9bbc7-3a2f-4452-b496-244f76a94749",
                            "565d8d1c-76a2-447c-9dd8-7b946b739d0a"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 34,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "6131a4e4-f5e1-448e-b774-849ae2a1ecdb",
                          "title": "测试jt_getBalance， Token为5e69b0d4，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 \"before all\" hook",
                              "timedOut": false,
                              "duration": 194,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "efa68fc8-f614-49c9-9f3b-b1fe56cdb274",
                              "parentUUID": "6131a4e4-f5e1-448e-b774-849ae2a1ecdb",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t查询有效的地址_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询有效的地址_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 8,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "da25025c-9103-4e17-b468-a30b259d3dc8",
                              "parentUUID": "6131a4e4-f5e1-448e-b774-849ae2a1ecdb",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询有效的昵称_01:地址内有底层币和代币",
                              "timedOut": false,
                              "duration": 6,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'error' to equal 'success'",
                                "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:128:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": "- error\n+ success\n"
                              },
                              "uuid": "5a08afd1-0c93-4668-aeb9-79a4018f209f",
                              "parentUUID": "6131a4e4-f5e1-448e-b774-849ae2a1ecdb",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询未激活的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 7,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4,C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91' to include 'Account not found.'",
                                "estack": "AssertionError: expected 'no such account:j4tBKPidB9iEJMqdatq7rbh14nPhAbCyfg,5e69b0d4,C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91' to include 'Account not found.'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "19db95c4-67a9-4017-9a29-f482eef5733c",
                              "parentUUID": "6131a4e4-f5e1-448e-b774-849ae2a1ecdb",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询未激活的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 10,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactive_1: Bad Base58 string: inactive_1' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "9cd80619-694f-4bc1-9457-fd90ce2f8d07",
                              "parentUUID": "6131a4e4-f5e1-448e-b774-849ae2a1ecdb",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询无效的地址_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 4,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].address: Bad Base58 string: inactiveAccounts[0].address' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "124845be-ff28-4415-b8b4-bd14b7f309d0",
                              "parentUUID": "6131a4e4-f5e1-448e-b774-849ae2a1ecdb",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBalance 测试jt_getBalance， Token为5e69b0d4，tag为C0B53E636BE844AD4AD1D54391E589931A71F08D72CA7AE6E103312CB30C1D91 0010\t查询无效的昵称_01:地址内没有有底层币和代币",
                              "timedOut": false,
                              "duration": 4,
                              "state": "failed",
                              "speed": null,
                              "pass": false,
                              "fail": true,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {
                                "message": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'",
                                "estack": "AssertionError: expected 'Bad account address: inactiveAccounts[0].nickName: Bad Base58 string: inactiveAccounts[0].nickName' to include 'invalid account'\n    at Object.checkGetBalance [as checkFunction] (test\\testCases\\tcsGetBalance.js:142:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                "diff": null
                              },
                              "uuid": "4974ade2-8772-4616-9d50-7255eef64045",
                              "parentUUID": "6131a4e4-f5e1-448e-b774-849ae2a1ecdb",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [],
                          "failures": [
                            "da25025c-9103-4e17-b468-a30b259d3dc8",
                            "5a08afd1-0c93-4668-aeb9-79a4018f209f",
                            "19db95c4-67a9-4017-9a29-f482eef5733c",
                            "9cd80619-694f-4bc1-9457-fd90ce2f8d07",
                            "124845be-ff28-4415-b8b4-bd14b7f309d0",
                            "4974ade2-8772-4616-9d50-7255eef64045"
                          ],
                          "pending": [],
                          "skipped": [],
                          "duration": 39,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "8fff0b29-d345-4467-b993-7df7069961ca",
                      "title": "测试jt_getTransactionReceipt",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionReceipt \"before all\" hook",
                          "timedOut": false,
                          "duration": 112,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "0d636770-82fb-4f20-a8fd-7b081b7f244a",
                          "parentUUID": "8fff0b29-d345-4467-b993-7df7069961ca",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t有效交易哈希",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionReceipt 0010\t有效交易哈希",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "0e500c2c-566a-4bb2-8d3f-29ee97f43428",
                          "parentUUID": "8fff0b29-d345-4467-b993-7df7069961ca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易哈希：不存在的交易哈希",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionReceipt 0020\t无效交易哈希：不存在的交易哈希",
                          "timedOut": false,
                          "duration": 2,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "d496e1fb-cfb2-4788-9b76-652b6322859f",
                          "parentUUID": "8fff0b29-d345-4467-b993-7df7069961ca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易哈希：数字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionReceipt 0020\t无效交易哈希：数字",
                          "timedOut": false,
                          "duration": 6,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "98d2c6d3-0235-4deb-82e2-810ffdf07c14",
                          "parentUUID": "8fff0b29-d345-4467-b993-7df7069961ca",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易哈希：字符串乱码",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionReceipt 0020\t无效交易哈希：字符串乱码",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "f981c8d0-f5ce-4409-9b99-5ef0c72c3fba",
                          "parentUUID": "8fff0b29-d345-4467-b993-7df7069961ca",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0e500c2c-566a-4bb2-8d3f-29ee97f43428",
                        "d496e1fb-cfb2-4788-9b76-652b6322859f",
                        "98d2c6d3-0235-4deb-82e2-810ffdf07c14",
                        "f981c8d0-f5ce-4409-9b99-5ef0c72c3fba"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 15,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "bb9242f2-17ef-4ae3-b0c3-ebeb0c17f119",
                      "title": "测试jt_getTransactionByHash",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByHash \"before all\" hook",
                          "timedOut": false,
                          "duration": 234,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "5c2df276-0c8a-4e07-8b18-4045a623c12a",
                          "parentUUID": "bb9242f2-17ef-4ae3-b0c3-ebeb0c17f119",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t查询有效交易哈希-底层币",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0010\t查询有效交易哈希-底层币",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "c8e40bc8-589c-409a-a104-ad59d6a483e6",
                          "parentUUID": "bb9242f2-17ef-4ae3-b0c3-ebeb0c17f119",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t查询有效交易哈希-token",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0020\t查询有效交易哈希-token",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "fd652755-60ad-45a4-ad93-8811f702b38b",
                          "parentUUID": "bb9242f2-17ef-4ae3-b0c3-ebeb0c17f119",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t查询有效交易哈希-memos",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0030\t查询有效交易哈希-memos",
                          "timedOut": false,
                          "duration": 8,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "719dea70-6d13-4bc1-a9c3-9ce422d089e4",
                          "parentUUID": "bb9242f2-17ef-4ae3-b0c3-ebeb0c17f119",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t查询无效交易哈希:数字",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0040\t查询无效交易哈希:数字",
                          "timedOut": false,
                          "duration": 2,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'interface conversion: interface {} is float64, not string' to include 'invalid tx hash'",
                            "estack": "AssertionError: expected 'interface conversion: interface {} is float64, not string' to include 'invalid tx hash'\n    at Object.checkTransaction [as checkFunction] (test\\testCases\\tcsGetTx.js:125:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "16c5d2d0-9684-49f4-a18f-acc48ff5df5e",
                          "parentUUID": "bb9242f2-17ef-4ae3-b0c3-ebeb0c17f119",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t查询无效交易哈希:字符串",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0040\t查询无效交易哈希:字符串",
                          "timedOut": false,
                          "duration": 5,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'encoding/hex: invalid byte: U+0074 \\'t\\'' to include 'invalid tx hash'",
                            "estack": "AssertionError: expected 'encoding/hex: invalid byte: U+0074 \\'t\\'' to include 'invalid tx hash'\n    at Object.checkTransaction [as checkFunction] (test\\testCases\\tcsGetTx.js:125:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "cd84973f-cf3f-4433-9e0c-10c38f17e553",
                          "parentUUID": "bb9242f2-17ef-4ae3-b0c3-ebeb0c17f119",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t查询无效交易哈希:参数为空",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0040\t查询无效交易哈希:参数为空",
                          "timedOut": false,
                          "duration": 1,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'interface conversion: interface {} is nil, not string' to include 'invalid tx hash'",
                            "estack": "AssertionError: expected 'interface conversion: interface {} is nil, not string' to include 'invalid tx hash'\n    at Object.checkTransaction [as checkFunction] (test\\testCases\\tcsGetTx.js:125:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "adce3401-1fd8-4b31-b719-4fd8279fc404",
                          "parentUUID": "bb9242f2-17ef-4ae3-b0c3-ebeb0c17f119",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t无效交易哈希：不存在的hash",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0040\t无效交易哈希：不存在的hash",
                          "timedOut": false,
                          "duration": 3,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'can\\'t find transaction B07647D61E6F7C4683E715004E2FB236D47DB64DF92F6504B71D6A1D4469530A' to include 'Transaction not found.'",
                            "estack": "AssertionError: expected 'can\\'t find transaction B07647D61E6F7C4683E715004E2FB236D47DB64DF92F6504B71D6A1D4469530A' to include 'Transaction not found.'\n    at Object.checkTransaction [as checkFunction] (test\\testCases\\tcsGetTx.js:125:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "95ba2f45-dc62-4076-9c4c-1544519c5117",
                          "parentUUID": "bb9242f2-17ef-4ae3-b0c3-ebeb0c17f119",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0040\t无效交易哈希：hash长度超过标准",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByHash 0040\t无效交易哈希：hash长度超过标准",
                          "timedOut": false,
                          "duration": 7,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'runtime error: index out of range' to include 'invalid tx hash'",
                            "estack": "AssertionError: expected 'runtime error: index out of range' to include 'invalid tx hash'\n    at Object.checkTransaction [as checkFunction] (test\\testCases\\tcsGetTx.js:125:40)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": null
                          },
                          "uuid": "5595b48c-f97e-4b66-ac0e-ceb16ce96449",
                          "parentUUID": "bb9242f2-17ef-4ae3-b0c3-ebeb0c17f119",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c8e40bc8-589c-409a-a104-ad59d6a483e6",
                        "fd652755-60ad-45a4-ad93-8811f702b38b",
                        "719dea70-6d13-4bc1-a9c3-9ce422d089e4"
                      ],
                      "failures": [
                        "16c5d2d0-9684-49f4-a18f-acc48ff5df5e",
                        "cd84973f-cf3f-4433-9e0c-10c38f17e553",
                        "adce3401-1fd8-4b31-b719-4fd8279fc404",
                        "95ba2f45-dc62-4076-9c4c-1544519c5117",
                        "5595b48c-f97e-4b66-ac0e-ceb16ce96449"
                      ],
                      "pending": [],
                      "skipped": [],
                      "duration": 32,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "30fa42d0-97de-406b-b429-6502878161fb",
                      "title": "测试jt_getTransactionByBlockHashAndIndex",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex \"before all\" hook",
                          "timedOut": false,
                          "duration": 186,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "d5e59a80-fce4-42a5-b593-b7f02caa5026",
                          "parentUUID": "30fa42d0-97de-406b-b429-6502878161fb",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t有效区块哈希，有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0010\t有效区块哈希，有效交易索引",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "2854b866-24dc-41c8-ada2-183c126a9e08",
                          "parentUUID": "30fa42d0-97de-406b-b429-6502878161fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效区块哈希，有效交易索引:查询有效区块编号，遍历所有有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0010\t有效区块哈希，有效交易索引:查询有效区块编号，遍历所有有效交易索引",
                          "timedOut": false,
                          "duration": 1052,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "a33fec4d-92ff-4741-9254-938f5344bfe9",
                          "parentUUID": "30fa42d0-97de-406b-b429-6502878161fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块哈希，无效交易索引无效交易索引:100",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0020\t有效区块哈希，无效交易索引无效交易索引:100",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "bde342f6-3972-45b1-beff-6ea0e62be4b8",
                          "parentUUID": "30fa42d0-97de-406b-b429-6502878161fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块哈希，无效交易索引无效交易索引:负数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0020\t有效区块哈希，无效交易索引无效交易索引:负数",
                          "timedOut": false,
                          "duration": 7,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "eb027905-96c9-424c-9be4-3d751f446e7d",
                          "parentUUID": "30fa42d0-97de-406b-b429-6502878161fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块哈希，无效交易索引无效交易索引:乱码",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0020\t有效区块哈希，无效交易索引无效交易索引:乱码",
                          "timedOut": false,
                          "duration": 9,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "be6438c2-3863-47b2-b4a2-448fb0e862c5",
                          "parentUUID": "30fa42d0-97de-406b-b429-6502878161fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t无效区块哈希",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockHashAndIndex 0030\t无效区块哈希",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "667ebcb7-c7cc-4823-8267-b9392fbd7c1e",
                          "parentUUID": "30fa42d0-97de-406b-b429-6502878161fb",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "2854b866-24dc-41c8-ada2-183c126a9e08",
                        "a33fec4d-92ff-4741-9254-938f5344bfe9",
                        "bde342f6-3972-45b1-beff-6ea0e62be4b8",
                        "eb027905-96c9-424c-9be4-3d751f446e7d",
                        "be6438c2-3863-47b2-b4a2-448fb0e862c5",
                        "667ebcb7-c7cc-4823-8267-b9392fbd7c1e"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1079,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "62469386-d141-400f-866d-e5cbd5f8dfbf",
                      "title": "测试jt_getTransactionByBlockNumberAndIndex",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex \"before all\" hook",
                          "timedOut": false,
                          "duration": 349,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "a86cc33d-eeb8-4587-b6bb-7df996b33a95",
                          "parentUUID": "62469386-d141-400f-866d-e5cbd5f8dfbf",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t有效区块哈希，有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0010\t有效区块哈希，有效交易索引",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "2c5f77cc-31b8-436b-85fd-0cd1ca553aee",
                          "parentUUID": "62469386-d141-400f-866d-e5cbd5f8dfbf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效区块编号，有效交易索引:查询有效区块编号，遍历所有有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0010\t有效区块编号，有效交易索引:查询有效区块编号，遍历所有有效交易索引",
                          "timedOut": false,
                          "duration": 938,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "174df71f-e5f6-4f57-83e3-6c22b7550dd3",
                          "parentUUID": "62469386-d141-400f-866d-e5cbd5f8dfbf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效区块编号，有效交易索引:查询有效区块编号earliest，遍历所有有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0010\t有效区块编号，有效交易索引:查询有效区块编号earliest，遍历所有有效交易索引",
                          "timedOut": false,
                          "duration": 4,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'error' to equal 'success'",
                            "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkFunction (test\\testCases\\tcsGetTx.js:373:27)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": "- error\n+ success\n"
                          },
                          "uuid": "0819b376-5581-4798-b74d-7771b389851c",
                          "parentUUID": "62469386-d141-400f-866d-e5cbd5f8dfbf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效区块编号，有效交易索引:查询有效区块编号latest，遍历所有有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0010\t有效区块编号，有效交易索引:查询有效区块编号latest，遍历所有有效交易索引",
                          "timedOut": false,
                          "duration": 7,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'error' to equal 'success'",
                            "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkFunction (test\\testCases\\tcsGetTx.js:373:27)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": "- error\n+ success\n"
                          },
                          "uuid": "3b232282-0b55-40d2-bf80-7927af758660",
                          "parentUUID": "62469386-d141-400f-866d-e5cbd5f8dfbf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0010\t有效区块编号，有效交易索引:查询有效区块编号pending，遍历所有有效交易索引",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0010\t有效区块编号，有效交易索引:查询有效区块编号pending，遍历所有有效交易索引",
                          "timedOut": false,
                          "duration": 5,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {
                            "message": "AssertionError: expected 'error' to equal 'success'",
                            "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkFunction (test\\testCases\\tcsGetTx.js:373:27)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                            "diff": "- error\n+ success\n"
                          },
                          "uuid": "a91f78c7-084a-4878-8318-a16add81d6d5",
                          "parentUUID": "62469386-d141-400f-866d-e5cbd5f8dfbf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块编号，无效交易索引无效交易索引:100",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0020\t有效区块编号，无效交易索引无效交易索引:100",
                          "timedOut": false,
                          "duration": 9,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "02508a9e-51b6-4d11-9775-6ce75151d598",
                          "parentUUID": "62469386-d141-400f-866d-e5cbd5f8dfbf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块编号，无效交易索引无效交易索引:负数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0020\t有效区块编号，无效交易索引无效交易索引:负数",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "5b1f6029-9877-48d5-b946-1456480d4ca5",
                          "parentUUID": "62469386-d141-400f-866d-e5cbd5f8dfbf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t有效区块编号，无效交易索引无效交易索引:乱码",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0020\t有效区块编号，无效交易索引无效交易索引:乱码",
                          "timedOut": false,
                          "duration": 9,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "50a184c4-46e8-4c82-a7c9-bc5a5d3c5f38",
                          "parentUUID": "62469386-d141-400f-866d-e5cbd5f8dfbf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0030\t无效区块编号",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getTransactionByBlockNumberAndIndex 0030\t无效区块编号",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "2390b5a6-cc2c-4d6e-a937-5514f35ffcb0",
                          "parentUUID": "62469386-d141-400f-866d-e5cbd5f8dfbf",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "2c5f77cc-31b8-436b-85fd-0cd1ca553aee",
                        "174df71f-e5f6-4f57-83e3-6c22b7550dd3",
                        "02508a9e-51b6-4d11-9775-6ce75151d598",
                        "5b1f6029-9877-48d5-b946-1456480d4ca5",
                        "50a184c4-46e8-4c82-a7c9-bc5a5d3c5f38",
                        "2390b5a6-cc2c-4d6e-a937-5514f35ffcb0"
                      ],
                      "failures": [
                        "0819b376-5581-4798-b74d-7771b389851c",
                        "3b232282-0b55-40d2-bf80-7927af758660",
                        "a91f78c7-084a-4878-8318-a16add81d6d5"
                      ],
                      "pending": [],
                      "skipped": [],
                      "duration": 985,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "b7b78bc5-8028-44bf-b34f-d60c3bb47c8c",
                      "title": "测试jt_getBlockTransactionCountByHash",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByHash \"before all\" hook",
                          "timedOut": false,
                          "duration": 94,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "94c07c93-fa20-49a3-be0c-28a1825e327d",
                          "parentUUID": "b7b78bc5-8028-44bf-b34f-d60c3bb47c8c",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t查询有效区块哈希",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByHash 0010\t查询有效区块哈希",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "19c3bcbc-13fd-4fb4-a3b6-dada44b026de",
                          "parentUUID": "b7b78bc5-8028-44bf-b34f-d60c3bb47c8c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易哈希：不存在的hash",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByHash 0020\t无效交易哈希：不存在的hash",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "6bbf48f4-b858-4cf3-b71e-75badbf4ea1f",
                          "parentUUID": "b7b78bc5-8028-44bf-b34f-d60c3bb47c8c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易哈希：hash长度超过标准",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByHash 0020\t无效交易哈希：hash长度超过标准",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "838d762d-72a8-45b4-bbb2-78f15f1bf2d0",
                          "parentUUID": "b7b78bc5-8028-44bf-b34f-d60c3bb47c8c",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "19c3bcbc-13fd-4fb4-a3b6-dada44b026de",
                        "6bbf48f4-b858-4cf3-b71e-75badbf4ea1f",
                        "838d762d-72a8-45b4-bbb2-78f15f1bf2d0"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 13,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "5d45efa9-ef2f-4f40-9f29-49eb8b61eae3",
                      "title": "测试jt_getBlockTransactionCountByNumber",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByNumber \"before all\" hook",
                          "timedOut": false,
                          "duration": 128,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                          "err": {},
                          "uuid": "110e123e-da89-43ac-821b-0ba6f668f036",
                          "parentUUID": "5d45efa9-ef2f-4f40-9f29-49eb8b61eae3",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "0010\t查询有效区块编号",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByNumber 0010\t查询有效区块编号",
                          "timedOut": false,
                          "duration": 11,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "34e4a117-863f-4b00-9ae7-3fdc7d1d9cef",
                          "parentUUID": "5d45efa9-ef2f-4f40-9f29-49eb8b61eae3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易编号：9999999",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByNumber 0020\t无效交易编号：9999999",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "e9f86293-ed97-4491-b9c3-2ac41ba379db",
                          "parentUUID": "5d45efa9-ef2f-4f40-9f29-49eb8b61eae3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易编号：负数",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByNumber 0020\t无效交易编号：负数",
                          "timedOut": false,
                          "duration": 8,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "d7f78919-8342-4470-804b-3484b8be94a0",
                          "parentUUID": "5d45efa9-ef2f-4f40-9f29-49eb8b61eae3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "0020\t无效交易编号：乱码",
                          "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_getBlockTransactionCountByNumber 0020\t无效交易编号：乱码",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                          "err": {},
                          "uuid": "c71a30ff-8d16-4ed6-91ca-69583167eb49",
                          "parentUUID": "5d45efa9-ef2f-4f40-9f29-49eb8b61eae3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "34e4a117-863f-4b00-9ae7-3fdc7d1d9cef",
                        "e9f86293-ed97-4491-b9c3-2ac41ba379db",
                        "d7f78919-8342-4470-804b-3484b8be94a0",
                        "c71a30ff-8d16-4ed6-91ca-69583167eb49"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 27,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "d4bde9ea-f63d-4168-9250-3e6bfde93817",
                      "title": "测试jt_sendTransaction和jt_signTransaction",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "37516b24-2a79-4c0e-9de6-d96a094d999a",
                          "title": "原生币swt测试：jt_sendTransaction",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [],
                          "suites": [
                            {
                              "uuid": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                              "title": "测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 1052,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "840a95ec-2102-40c3-aa94-4f4ae9128287",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0010\t发起原生币swt有效交易_01",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0010\t发起原生币swt有效交易_01",
                                  "timedOut": false,
                                  "duration": 4176,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "5d1da301-5ec7-4d65-90f3-71f93435ce47",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0020\t发起原生币swt有效交易_02: 交易额填\"15\"等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0020\t发起原生币swt有效交易_02: 交易额填\"15\"等",
                                  "timedOut": false,
                                  "duration": 12,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'error' to equal 'success'",
                                    "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": "- error\n+ success\n"
                                  },
                                  "uuid": "f564c240-f57b-4a96-94f2-25d7289ba184",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 没有秘钥",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0030\t发起原生币swt无效交易_01: 没有秘钥",
                                  "timedOut": false,
                                  "duration": 14,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'success' to equal 'error'",
                                    "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": "- success\n+ error\n"
                                  },
                                  "uuid": "897b5370-409d-4802-8e1a-3cd8d4e8ee56",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 错误的秘钥1",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0030\t发起原生币swt无效交易_01: 错误的秘钥1",
                                  "timedOut": false,
                                  "duration": 13,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                    "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": null
                                  },
                                  "uuid": "ed259352-db77-461d-bd94-27adf8224c95",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 错误的秘钥2",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0030\t发起原生币swt无效交易_01: 错误的秘钥2",
                                  "timedOut": false,
                                  "duration": 7,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "bc2ae28c-0f4d-477d-bf89-ceb930259e79",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0040\t发起原生币swt无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0040\t发起原生币swt无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                  "timedOut": false,
                                  "duration": 14,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "c03e26fd-84b6-4259-bebd-ad0deb4fc6b0",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0050\t发起原生币swt无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0050\t发起原生币swt无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                  "timedOut": false,
                                  "duration": 13,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "49958852-e8a4-47c9-8efa-2241614d7184",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0060\t发起原生币swt无效交易_04: 交易额超过发起钱包余额",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0060\t发起原生币swt无效交易_04: 交易额超过发起钱包余额",
                                  "timedOut": false,
                                  "duration": 9,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "b8208396-96df-41e3-813e-58c11956308e",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0070\t发起原生币swt无效交易_05: 交易额为负数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0070\t发起原生币swt无效交易_05: 交易额为负数",
                                  "timedOut": false,
                                  "duration": 5,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "940e89fc-cada-4306-b6fa-dd5bbcf44c23",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0080\t发起原生币swt无效交易_06: 交易额为空",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0080\t发起原生币swt无效交易_06: 交易额为空",
                                  "timedOut": false,
                                  "duration": 9,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "0138bcae-72d0-4c90-84b9-37eb47b3e937",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0080\t发起原生币swt无效交易_06: 交易额为字符串",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0080\t发起原生币swt无效交易_06: 交易额为字符串",
                                  "timedOut": false,
                                  "duration": 8,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "f5cbb7ed-54b9-4c86-8c2e-69150242cace",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0090\t发起原生币swt无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0090\t发起原生币swt无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                  "timedOut": false,
                                  "duration": 2,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "e4eae1fe-6d09-41fb-be08-fd8b645b5cd5",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0100\t发起原生币swt无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0100\t发起原生币swt无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                  "timedOut": false,
                                  "duration": 7,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "9269a204-0118-4343-a5cd-8d59a34a4572",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0110\t发起原生币swt无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试基本交易-[币种:原生币swt] [方式:jt_sendTransaction] 0110\t发起原生币swt无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                  "timedOut": false,
                                  "duration": 3,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "fcc079d8-6282-4721-ac12-ccd7cc79a102",
                                  "parentUUID": "1abaa38b-f454-46e5-b09f-8b12616432eb",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "5d1da301-5ec7-4d65-90f3-71f93435ce47",
                                "bc2ae28c-0f4d-477d-bf89-ceb930259e79",
                                "c03e26fd-84b6-4259-bebd-ad0deb4fc6b0",
                                "49958852-e8a4-47c9-8efa-2241614d7184",
                                "b8208396-96df-41e3-813e-58c11956308e",
                                "940e89fc-cada-4306-b6fa-dd5bbcf44c23",
                                "0138bcae-72d0-4c90-84b9-37eb47b3e937",
                                "f5cbb7ed-54b9-4c86-8c2e-69150242cace",
                                "e4eae1fe-6d09-41fb-be08-fd8b645b5cd5",
                                "9269a204-0118-4343-a5cd-8d59a34a4572",
                                "fcc079d8-6282-4721-ac12-ccd7cc79a102"
                              ],
                              "failures": [
                                "f564c240-f57b-4a96-94f2-25d7289ba184",
                                "897b5370-409d-4802-8e1a-3cd8d4e8ee56",
                                "ed259352-db77-461d-bd94-27adf8224c95"
                              ],
                              "pending": [],
                              "skipped": [],
                              "duration": 4292,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "1c14b3bd-6092-4f11-a568-2cc2359d7801",
                              "title": "测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 11164,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "36196621-1556-4802-ba24-601082fa69ae",
                                  "parentUUID": "1c14b3bd-6092-4f11-a568-2cc2359d7801",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                  "timedOut": false,
                                  "duration": 45,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "7d9a6243-4cc7-4876-b06b-bffa2db66923",
                                  "parentUUID": "1c14b3bd-6092-4f11-a568-2cc2359d7801",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                  "timedOut": false,
                                  "duration": 41,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "c0c8b091-a8eb-4900-b7b1-304da383ad72",
                                  "parentUUID": "1c14b3bd-6092-4f11-a568-2cc2359d7801",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                  "timedOut": false,
                                  "duration": 39,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "3e1c8b30-bfe8-4062-8820-8c21855f7c23",
                                  "parentUUID": "1c14b3bd-6092-4f11-a568-2cc2359d7801",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                  "timedOut": false,
                                  "duration": 34,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "82741c30-43d1-4d32-9561-151dbcb336ad",
                                  "parentUUID": "1c14b3bd-6092-4f11-a568-2cc2359d7801",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                  "timedOut": false,
                                  "duration": 35,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "e6846a3a-a0b0-4b66-b902-ed02d008c102",
                                  "parentUUID": "1c14b3bd-6092-4f11-a568-2cc2359d7801",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                  "timedOut": false,
                                  "duration": 1847,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "5ae0d5d9-3a12-4bdd-8064-bc3c78c04e76",
                                  "parentUUID": "1c14b3bd-6092-4f11-a568-2cc2359d7801",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易memo-[币种:原生币swt] [方式:jt_sendTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                  "timedOut": false,
                                  "duration": 1832,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "b21b140a-871e-4479-a9e2-d0638fa41bec",
                                  "parentUUID": "1c14b3bd-6092-4f11-a568-2cc2359d7801",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "7d9a6243-4cc7-4876-b06b-bffa2db66923",
                                "c0c8b091-a8eb-4900-b7b1-304da383ad72",
                                "3e1c8b30-bfe8-4062-8820-8c21855f7c23",
                                "82741c30-43d1-4d32-9561-151dbcb336ad",
                                "e6846a3a-a0b0-4b66-b902-ed02d008c102",
                                "5ae0d5d9-3a12-4bdd-8064-bc3c78c04e76",
                                "b21b140a-871e-4479-a9e2-d0638fa41bec"
                              ],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 3873,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                              "title": "测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 819,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "02ce43af-1be2-432e-bad9-35cdcae5fd1b",
                                  "parentUUID": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                  "timedOut": false,
                                  "duration": 3189,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "19ebf72a-1cc1-47fa-8c87-a33e07791c78",
                                  "parentUUID": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0160\t发起带有效fee的交易_01: fee为null",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                  "timedOut": false,
                                  "duration": 36,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "05b6fb3d-4b53-4792-9fa1-06f3ba5cbcef",
                                  "parentUUID": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                  "timedOut": false,
                                  "duration": 43,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "57b0fb37-ebc2-456d-8446-eebd04b96197",
                                  "parentUUID": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                  "timedOut": false,
                                  "duration": 35,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "2d612396-315c-4d3c-95bf-e407baa61b4b",
                                  "parentUUID": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                  "timedOut": false,
                                  "duration": 3,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "a5ef4282-0ab4-479c-a614-58537aeb9a0f",
                                  "parentUUID": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0200\t发起带无效fee的交易_02: fee为0",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "efb15d5a-1533-45e1-bcac-eba32416d4d0",
                                  "parentUUID": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                  "timedOut": false,
                                  "duration": 1,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": null
                                  },
                                  "uuid": "59f1d87f-fd5c-4113-8d39-0f9e4eef5ffe",
                                  "parentUUID": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包原生币swt余额的整数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包原生币swt余额的整数",
                                  "timedOut": false,
                                  "duration": 5,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "c3ddce5e-aab0-49fe-8453-318ec1b871e6",
                                  "parentUUID": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                  "timedOut": false,
                                  "duration": 2,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": null
                                  },
                                  "uuid": "9865c5dd-61c5-4c51-81c0-b47596b6ccb8",
                                  "parentUUID": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_sendTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                  "timedOut": false,
                                  "duration": 2,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": null
                                  },
                                  "uuid": "70eba75c-c4f2-4462-b72a-335f43014de0",
                                  "parentUUID": "6656d83e-4ba9-4f4d-a310-449d7a59d73a",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "19ebf72a-1cc1-47fa-8c87-a33e07791c78",
                                "05b6fb3d-4b53-4792-9fa1-06f3ba5cbcef",
                                "57b0fb37-ebc2-456d-8446-eebd04b96197",
                                "2d612396-315c-4d3c-95bf-e407baa61b4b",
                                "a5ef4282-0ab4-479c-a614-58537aeb9a0f",
                                "efb15d5a-1533-45e1-bcac-eba32416d4d0",
                                "c3ddce5e-aab0-49fe-8453-318ec1b871e6"
                              ],
                              "failures": [
                                "59f1d87f-fd5c-4113-8d39-0f9e4eef5ffe",
                                "9865c5dd-61c5-4c51-81c0-b47596b6ccb8",
                                "70eba75c-c4f2-4462-b72a-335f43014de0"
                              ],
                              "pending": [],
                              "skipped": [],
                              "duration": 3317,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            }
                          ],
                          "passes": [],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 0,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "0bf7c466-3106-490e-812e-1c9e6c36bcc6",
                          "title": "原生币swt测试：jt_signTransaction",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [],
                          "suites": [
                            {
                              "uuid": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                              "title": "测试基本交易-[币种:原生币swt] [方式:jt_signTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 1104,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "b59c83a5-7290-402b-81a2-687edc79fda8",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0010\t发起原生币swt有效交易_01",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0010\t发起原生币swt有效交易_01",
                                  "timedOut": false,
                                  "duration": 4217,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "83a05682-271b-4223-a349-49c2d78943fc",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0020\t发起原生币swt有效交易_02: 交易额填\"15\"等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0020\t发起原生币swt有效交易_02: 交易额填\"15\"等",
                                  "timedOut": false,
                                  "duration": 12,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'error' to equal 'success'",
                                    "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:582:29)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": "- error\n+ success\n"
                                  },
                                  "uuid": "092f3b20-6d0e-4fc8-b7a0-a62df6877940",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 没有秘钥",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0030\t发起原生币swt无效交易_01: 没有秘钥",
                                  "timedOut": false,
                                  "duration": 7,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'success' to equal 'error'",
                                    "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": "- success\n+ error\n"
                                  },
                                  "uuid": "9f4d3c67-dda3-44a9-8a01-6e8f485ef7c1",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 错误的秘钥1",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0030\t发起原生币swt无效交易_01: 错误的秘钥1",
                                  "timedOut": false,
                                  "duration": 9,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                    "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": null
                                  },
                                  "uuid": "1cadf132-ef44-425e-8a15-cd1d5f8f38f2",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0030\t发起原生币swt无效交易_01: 错误的秘钥2",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0030\t发起原生币swt无效交易_01: 错误的秘钥2",
                                  "timedOut": false,
                                  "duration": 8,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "a66aa636-8cdc-4a47-995b-fe3363deb144",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0040\t发起原生币swt无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0040\t发起原生币swt无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                  "timedOut": false,
                                  "duration": 7,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "ea263688-724d-4ab6-ae28-2c704fd7e359",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0050\t发起原生币swt无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0050\t发起原生币swt无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                  "timedOut": false,
                                  "duration": 5,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "53034011-de34-44a7-9af0-fe387d58efaa",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0060\t发起原生币swt无效交易_04: 交易额超过发起钱包余额",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0060\t发起原生币swt无效交易_04: 交易额超过发起钱包余额",
                                  "timedOut": false,
                                  "duration": 9,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "6f83cb07-3b4b-4222-8f97-2addf6f4b87f",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0070\t发起原生币swt无效交易_05: 交易额为负数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0070\t发起原生币swt无效交易_05: 交易额为负数",
                                  "timedOut": false,
                                  "duration": 3,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "13357bb9-fa51-4656-a4c3-8523c4ffb596",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0080\t发起原生币swt无效交易_06: 交易额为空",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0080\t发起原生币swt无效交易_06: 交易额为空",
                                  "timedOut": false,
                                  "duration": 6,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "21de1e51-cd90-471f-b065-6f08d15cc7e8",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0080\t发起原生币swt无效交易_06: 交易额为字符串",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0080\t发起原生币swt无效交易_06: 交易额为字符串",
                                  "timedOut": false,
                                  "duration": 3,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "b94a6395-47c1-4691-93e3-cb6f70a9a9d5",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0090\t发起原生币swt无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0090\t发起原生币swt无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                  "timedOut": false,
                                  "duration": 3,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "2a310ef7-4381-49a7-9b7f-eed4e4c58d96",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0100\t发起原生币swt无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0100\t发起原生币swt无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                  "timedOut": false,
                                  "duration": 2,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "bb57e9dd-ebed-4e7a-b231-fc8e88eea08d",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0110\t发起原生币swt无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试基本交易-[币种:原生币swt] [方式:jt_signTransaction] 0110\t发起原生币swt无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                  "timedOut": false,
                                  "duration": 3,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "d9388e59-99ab-4902-8f49-79c258dcecf9",
                                  "parentUUID": "ee86b053-2fc3-4a69-b32b-09cf6d6407a3",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "83a05682-271b-4223-a349-49c2d78943fc",
                                "a66aa636-8cdc-4a47-995b-fe3363deb144",
                                "ea263688-724d-4ab6-ae28-2c704fd7e359",
                                "53034011-de34-44a7-9af0-fe387d58efaa",
                                "6f83cb07-3b4b-4222-8f97-2addf6f4b87f",
                                "13357bb9-fa51-4656-a4c3-8523c4ffb596",
                                "21de1e51-cd90-471f-b065-6f08d15cc7e8",
                                "b94a6395-47c1-4691-93e3-cb6f70a9a9d5",
                                "2a310ef7-4381-49a7-9b7f-eed4e4c58d96",
                                "bb57e9dd-ebed-4e7a-b231-fc8e88eea08d",
                                "d9388e59-99ab-4902-8f49-79c258dcecf9"
                              ],
                              "failures": [
                                "092f3b20-6d0e-4fc8-b7a0-a62df6877940",
                                "9f4d3c67-dda3-44a9-8a01-6e8f485ef7c1",
                                "1cadf132-ef44-425e-8a15-cd1d5f8f38f2"
                              ],
                              "pending": [],
                              "skipped": [],
                              "duration": 4294,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "d2719018-af72-453b-b236-900fe9b80c31",
                              "title": "测试交易memo-[币种:原生币swt] [方式:jt_signTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 10999,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "d310d31f-7d36-4a61-b998-15b94d49e5a6",
                                  "parentUUID": "d2719018-af72-453b-b236-900fe9b80c31",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                  "timedOut": false,
                                  "duration": 112,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "26b6f12a-5735-442d-875f-0a422555de2b",
                                  "parentUUID": "d2719018-af72-453b-b236-900fe9b80c31",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                  "timedOut": false,
                                  "duration": 67,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "5f5bc317-8483-42bf-90ae-997a8ce5ea59",
                                  "parentUUID": "d2719018-af72-453b-b236-900fe9b80c31",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                  "timedOut": false,
                                  "duration": 67,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "f6b1bf3d-e1c0-4120-bc11-321f59f22f5d",
                                  "parentUUID": "d2719018-af72-453b-b236-900fe9b80c31",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                  "timedOut": false,
                                  "duration": 71,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "14d26016-958f-4aae-9fd6-8cf96453d3b2",
                                  "parentUUID": "d2719018-af72-453b-b236-900fe9b80c31",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                  "timedOut": false,
                                  "duration": 74,
                                  "state": "passed",
                                  "speed": "medium",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "307b016a-37cd-48b9-918f-ce8e4d4495e1",
                                  "parentUUID": "d2719018-af72-453b-b236-900fe9b80c31",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                  "timedOut": false,
                                  "duration": 1821,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'error' to equal 'success'",
                                    "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": "- error\n+ success\n"
                                  },
                                  "uuid": "ff2d97dc-8ef7-4a6e-a6c5-9e8ba1af3579",
                                  "parentUUID": "d2719018-af72-453b-b236-900fe9b80c31",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易memo-[币种:原生币swt] [方式:jt_signTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                  "timedOut": false,
                                  "duration": 1797,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'error' to equal 'success'",
                                    "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": "- error\n+ success\n"
                                  },
                                  "uuid": "b6757314-2718-451c-bcea-f81d91059777",
                                  "parentUUID": "d2719018-af72-453b-b236-900fe9b80c31",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "26b6f12a-5735-442d-875f-0a422555de2b",
                                "5f5bc317-8483-42bf-90ae-997a8ce5ea59",
                                "f6b1bf3d-e1c0-4120-bc11-321f59f22f5d",
                                "14d26016-958f-4aae-9fd6-8cf96453d3b2",
                                "307b016a-37cd-48b9-918f-ce8e4d4495e1"
                              ],
                              "failures": [
                                "ff2d97dc-8ef7-4a6e-a6c5-9e8ba1af3579",
                                "b6757314-2718-451c-bcea-f81d91059777"
                              ],
                              "pending": [],
                              "skipped": [],
                              "duration": 4009,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "14c97d32-3070-4695-a41f-ee71a222adb0",
                              "title": "测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction]",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before all\" hook",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] \"before all\" hook",
                                  "timedOut": false,
                                  "duration": 1065,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                  "err": {},
                                  "uuid": "de5581ff-56cb-4c48-8dbc-63be27940ff5",
                                  "parentUUID": "14c97d32-3070-4695-a41f-ee71a222adb0",
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                  "timedOut": false,
                                  "duration": 4244,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "5e76b928-788a-47bc-af45-c8402b16bebb",
                                  "parentUUID": "14c97d32-3070-4695-a41f-ee71a222adb0",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0160\t发起带有效fee的交易_01: fee为null",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                  "timedOut": false,
                                  "duration": 116,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "0a83c8cc-1a60-4c6d-bf97-9fbb32c977dd",
                                  "parentUUID": "14c97d32-3070-4695-a41f-ee71a222adb0",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                  "timedOut": false,
                                  "duration": 94,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "70dea76f-8872-4bfe-830d-3e2ea6b4f3fc",
                                  "parentUUID": "14c97d32-3070-4695-a41f-ee71a222adb0",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                  "timedOut": false,
                                  "duration": 93,
                                  "state": "passed",
                                  "speed": "slow",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "775073a4-5a11-45e8-9e6d-d264d248d6b4",
                                  "parentUUID": "14c97d32-3070-4695-a41f-ee71a222adb0",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                  "timedOut": false,
                                  "duration": 9,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "88a0206d-bb75-4401-9831-cad6caed3b7e",
                                  "parentUUID": "14c97d32-3070-4695-a41f-ee71a222adb0",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0200\t发起带无效fee的交易_02: fee为0",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                  "timedOut": false,
                                  "duration": 9,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "d848ebaf-146f-4923-b4d7-8b625011646c",
                                  "parentUUID": "14c97d32-3070-4695-a41f-ee71a222adb0",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                  "timedOut": false,
                                  "duration": 4,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": null
                                  },
                                  "uuid": "7fcd2b87-07af-452f-8a50-369c3013d938",
                                  "parentUUID": "14c97d32-3070-4695-a41f-ee71a222adb0",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包原生币swt余额的整数",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包原生币swt余额的整数",
                                  "timedOut": false,
                                  "duration": 4,
                                  "state": "passed",
                                  "speed": "fast",
                                  "pass": true,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {},
                                  "uuid": "aab8caca-bde2-44a6-9ffe-ee360619baa6",
                                  "parentUUID": "14c97d32-3070-4695-a41f-ee71a222adb0",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                  "timedOut": false,
                                  "duration": 4,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": null
                                  },
                                  "uuid": "0ce6660d-6786-4e8b-8f28-f9869cc22ef6",
                                  "parentUUID": "14c97d32-3070-4695-a41f-ee71a222adb0",
                                  "isHook": false,
                                  "skipped": false
                                },
                                {
                                  "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                  "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 原生币swt测试：jt_signTransaction 测试交易Fee-[币种:原生币swt] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                  "timedOut": false,
                                  "duration": 4,
                                  "state": "failed",
                                  "speed": null,
                                  "pass": false,
                                  "fail": true,
                                  "pending": false,
                                  "context": null,
                                  "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                  "err": {
                                    "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                    "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                    "diff": null
                                  },
                                  "uuid": "ca2d468e-cf5f-40b6-b04c-8ff354fc5608",
                                  "parentUUID": "14c97d32-3070-4695-a41f-ee71a222adb0",
                                  "isHook": false,
                                  "skipped": false
                                }
                              ],
                              "suites": [],
                              "passes": [
                                "5e76b928-788a-47bc-af45-c8402b16bebb",
                                "0a83c8cc-1a60-4c6d-bf97-9fbb32c977dd",
                                "70dea76f-8872-4bfe-830d-3e2ea6b4f3fc",
                                "775073a4-5a11-45e8-9e6d-d264d248d6b4",
                                "88a0206d-bb75-4401-9831-cad6caed3b7e",
                                "d848ebaf-146f-4923-b4d7-8b625011646c",
                                "aab8caca-bde2-44a6-9ffe-ee360619baa6"
                              ],
                              "failures": [
                                "7fcd2b87-07af-452f-8a50-369c3013d938",
                                "0ce6660d-6786-4e8b-8f28-f9869cc22ef6",
                                "ca2d468e-cf5f-40b6-b04c-8ff354fc5608"
                              ],
                              "pending": [],
                              "skipped": [],
                              "duration": 4581,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            }
                          ],
                          "passes": [],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 0,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "b0411e2c-ba1a-4c1a-8207-55a41f48df3d",
                          "title": "代币测试：jt_sendTransaction",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [],
                          "suites": [
                            {
                              "uuid": "4c939db1-e011-4d5f-9b60-eee9095ab511",
                              "title": "标准一次性代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                  "title": "测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1034,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "58fa7550-5415-431d-aa26-6e1221ec0879",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0270\t发行标准一次性代币",
                                      "timedOut": false,
                                      "duration": 3171,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f13f763a-4d9e-4994-8d12-904f9e9774a3",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准一次性代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0290\t发行标准一次性代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bba02610-f53b-4294-8d85-60f83599a5a9",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准一次性代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0300\t发行标准一次性代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4027521c-c53a-4090-a61e-1e0548b53be8",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准一次性代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0310\t发行标准一次性代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "4d4063c4-fdfb-4458-a06d-06b19242e49f",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准一次性代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0310\t发行标准一次性代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "41daf73f-1fe9-42fa-90ae-c9d642bc30e4",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准一次性代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0320\t发行标准一次性代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "96eaf8ec-50d2-44e6-9e8a-d2349af88ae7",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0320\t发行标准一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4b270d1f-219f-4a68-a880-178bd07f4e17",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0330\t发行标准一次性代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "350c47a6-1eff-4568-bd46-e5b3aab79b3b",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0330\t发行标准一次性代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f725a7a2-472b-407f-a534-ca2a1c61626e",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0330\t发行标准一次性代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f3884df6-f7e0-460f-9b9a-a057ca1c3ff7",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 16,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6c57fd68-7909-4c7b-9af9-c19a6614ca88",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f0da2cb8-1640-4198-8f36-8645f842d6d3",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_sendTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ce0df0b0-94e1-49d6-9e4e-a880923723e9",
                                      "parentUUID": "f6233cc9-5f00-45c9-8a20-d0b4da13f06c",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "f13f763a-4d9e-4994-8d12-904f9e9774a3",
                                    "bba02610-f53b-4294-8d85-60f83599a5a9",
                                    "4027521c-c53a-4090-a61e-1e0548b53be8",
                                    "41daf73f-1fe9-42fa-90ae-c9d642bc30e4",
                                    "96eaf8ec-50d2-44e6-9e8a-d2349af88ae7",
                                    "4b270d1f-219f-4a68-a880-178bd07f4e17",
                                    "350c47a6-1eff-4568-bd46-e5b3aab79b3b",
                                    "f725a7a2-472b-407f-a534-ca2a1c61626e",
                                    "f3884df6-f7e0-460f-9b9a-a057ca1c3ff7",
                                    "6c57fd68-7909-4c7b-9af9-c19a6614ca88",
                                    "f0da2cb8-1640-4198-8f36-8645f842d6d3",
                                    "ce0df0b0-94e1-49d6-9e4e-a880923723e9"
                                  ],
                                  "failures": [
                                    "4d4063c4-fdfb-4458-a06d-06b19242e49f"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3317,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                  "title": "测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 955,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "c40b6b39-2dcc-4b9d-9fd3-7572394ab404",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准一次性代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0010\t发起标准一次性代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 4195,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "59c21c38-e764-4b00-9631-468fa03ad3f5",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0030\t发起标准一次性代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "35f34742-9895-441f-aa05-87f8b88b0bb7",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0030\t发起标准一次性代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "9c0fee5c-3ef4-40e9-8144-7c31cdb5f232",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0030\t发起标准一次性代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a6124a99-c427-4e6a-92b0-38fa9c2deca9",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0040\t发起标准一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a90cadc2-2411-4ae1-ac13-84949f123fe4",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0050\t发起标准一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "236577d3-e203-485d-a7b3-dab61074495a",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0060\t发起标准一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "53a35200-0dd3-47e7-9def-a513b6344d2a",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准一次性代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0070\t发起标准一次性代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ce076763-12f0-41b4-9df1-9d510eead68b",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准一次性代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0080\t发起标准一次性代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e23d0d70-61a7-416c-b142-9d51f084b636",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准一次性代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0080\t发起标准一次性代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "123d1ec1-d0de-4fae-bd0c-5826b23ba626",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0090\t发起标准一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "df460ad0-79cc-4a6b-aed0-cd553e7c6adf",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0100\t发起标准一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f12348f1-9d14-4db1-a7c5-beaaf6265d7e",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_sendTransaction] 0110\t发起标准一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d5627e5d-791c-4c44-bbd0-9a6d1a235901",
                                      "parentUUID": "7636eb14-6690-4d2f-8783-20b269b768dd",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "59c21c38-e764-4b00-9631-468fa03ad3f5",
                                    "a6124a99-c427-4e6a-92b0-38fa9c2deca9",
                                    "a90cadc2-2411-4ae1-ac13-84949f123fe4",
                                    "236577d3-e203-485d-a7b3-dab61074495a",
                                    "53a35200-0dd3-47e7-9def-a513b6344d2a",
                                    "ce076763-12f0-41b4-9df1-9d510eead68b",
                                    "e23d0d70-61a7-416c-b142-9d51f084b636",
                                    "123d1ec1-d0de-4fae-bd0c-5826b23ba626",
                                    "df460ad0-79cc-4a6b-aed0-cd553e7c6adf",
                                    "f12348f1-9d14-4db1-a7c5-beaaf6265d7e",
                                    "d5627e5d-791c-4c44-bbd0-9a6d1a235901"
                                  ],
                                  "failures": [
                                    "35f34742-9895-441f-aa05-87f8b88b0bb7",
                                    "9c0fee5c-3ef4-40e9-8144-7c31cdb5f232"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4241,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "061a1f58-a347-43f9-ac7a-61abc5effb1f",
                                  "title": "测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11055,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "dede248b-1a84-4c9a-819a-85ad11c28466",
                                      "parentUUID": "061a1f58-a347-43f9-ac7a-61abc5effb1f",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 51,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d3f77df5-2e64-410e-8e5f-1c24dd5a762a",
                                      "parentUUID": "061a1f58-a347-43f9-ac7a-61abc5effb1f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 57,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "aecf594e-d5f3-4c0d-9b37-7ff199c7d333",
                                      "parentUUID": "061a1f58-a347-43f9-ac7a-61abc5effb1f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 42,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "54a0e9e9-f6ce-4c55-a874-00fc4b30c003",
                                      "parentUUID": "061a1f58-a347-43f9-ac7a-61abc5effb1f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 45,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4f02f53e-4dc7-4b7a-9fe4-ec2e1572eb4e",
                                      "parentUUID": "061a1f58-a347-43f9-ac7a-61abc5effb1f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 43,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f774208e-755d-41e5-a82c-6778fb28053a",
                                      "parentUUID": "061a1f58-a347-43f9-ac7a-61abc5effb1f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1795,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "54b65791-7a60-4eae-a825-9f7ab46ec10d",
                                      "parentUUID": "061a1f58-a347-43f9-ac7a-61abc5effb1f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_sendTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1782,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a93285f9-7fec-46c7-aa19-9248e9ce5ce7",
                                      "parentUUID": "061a1f58-a347-43f9-ac7a-61abc5effb1f",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "d3f77df5-2e64-410e-8e5f-1c24dd5a762a",
                                    "aecf594e-d5f3-4c0d-9b37-7ff199c7d333",
                                    "54a0e9e9-f6ce-4c55-a874-00fc4b30c003",
                                    "4f02f53e-4dc7-4b7a-9fe4-ec2e1572eb4e",
                                    "f774208e-755d-41e5-a82c-6778fb28053a",
                                    "54b65791-7a60-4eae-a825-9f7ab46ec10d",
                                    "a93285f9-7fec-46c7-aa19-9248e9ce5ce7"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3815,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                  "title": "测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 831,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "bbf87d08-774a-41ce-8633-0f2ea59f3295",
                                      "parentUUID": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 4200,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1c251548-f650-479e-ba2d-7f42ff509ea3",
                                      "parentUUID": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 69,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f6f21d1f-f988-4829-b9d8-774f8dfe7b18",
                                      "parentUUID": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 58,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "63477194-c432-41e9-8755-6e506ee6ac09",
                                      "parentUUID": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 45,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bcba8583-20d4-49ef-ba52-75c77be6cac6",
                                      "parentUUID": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f7394c5e-e77d-4eb3-8e45-3636c442d177",
                                      "parentUUID": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "afec817a-e6a0-49f3-b16f-8baac1ddabdd",
                                      "parentUUID": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "942658f2-29b9-4449-a275-c870986e44ec",
                                      "parentUUID": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准一次性代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准一次性代币余额的整数",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "26cf3114-b8c9-4be2-a4af-fd5de632621a",
                                      "parentUUID": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "ef911a9d-caf8-4806-914c-6f601e7b2c0a",
                                      "parentUUID": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "b64f506a-4aed-4f83-a033-b0b1bc1059be",
                                      "parentUUID": "43b3a279-1779-49a6-98b5-42048f27fa02",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "1c251548-f650-479e-ba2d-7f42ff509ea3",
                                    "f6f21d1f-f988-4829-b9d8-774f8dfe7b18",
                                    "63477194-c432-41e9-8755-6e506ee6ac09",
                                    "bcba8583-20d4-49ef-ba52-75c77be6cac6",
                                    "f7394c5e-e77d-4eb3-8e45-3636c442d177",
                                    "afec817a-e6a0-49f3-b16f-8baac1ddabdd",
                                    "26cf3114-b8c9-4be2-a4af-fd5de632621a"
                                  ],
                                  "failures": [
                                    "942658f2-29b9-4449-a275-c870986e44ec",
                                    "ef911a9d-caf8-4806-914c-6f601e7b2c0a",
                                    "b64f506a-4aed-4f83-a033-b0b1bc1059be"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4418,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "ee36ead8-dd92-4e9d-a1bd-412aa9511c3a",
                                  "title": "测试增发-[币种:5eccabc9] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试增发-[币种:5eccabc9] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 110,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "9f5381c9-eaf8-4548-bc29-2d7c7535d36d",
                                      "parentUUID": "ee36ead8-dd92-4e9d-a1bd-412aa9511c3a",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试增发-[币种:5eccabc9] [方式:jt_sendTransaction] 0370\t增发可增发的代币标准一次性代币",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3c68d0ba-b3fb-4bc0-aa48-d040bf89345a",
                                      "parentUUID": "ee36ead8-dd92-4e9d-a1bd-412aa9511c3a",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "3c68d0ba-b3fb-4bc0-aa48-d040bf89345a"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "ee51e522-13f8-4926-8944-229133e150eb",
                                  "title": "测试销毁-[币种:5eccabc9] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试销毁-[币种:5eccabc9] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 286,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "8d427703-19a3-462d-b07e-eb4d15eddb1b",
                                      "parentUUID": "ee51e522-13f8-4926-8944-229133e150eb",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试销毁-[币种:5eccabc9] [方式:jt_sendTransaction] 0380\t销毁标准一次性代币",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2abe7bd5-e900-4a36-8d19-665f11bc4e1c",
                                      "parentUUID": "ee51e522-13f8-4926-8944-229133e150eb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试销毁-[币种:5eccabc9] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准一次性代币",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1808c456-9d84-4754-a61e-d29ff290dca6",
                                      "parentUUID": "ee51e522-13f8-4926-8944-229133e150eb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准一次性代币测试：jt_sendTransaction 测试销毁-[币种:5eccabc9] [方式:jt_sendTransaction] 0380\t销毁所有标准一次性代币",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8932da05-c595-433b-8f78-f88e92ea4ed9",
                                      "parentUUID": "ee51e522-13f8-4926-8944-229133e150eb",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "2abe7bd5-e900-4a36-8d19-665f11bc4e1c",
                                    "1808c456-9d84-4754-a61e-d29ff290dca6",
                                    "8932da05-c595-433b-8f78-f88e92ea4ed9"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 15,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "7afd1b7f-393b-4456-a8cf-2c7ab3a49353",
                              "title": "标准可增发代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                  "title": "测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 978,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "9db057d4-5763-46ed-acc8-3b987092ac7c",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0270\t发行标准可增发代币",
                                      "timedOut": false,
                                      "duration": 3151,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fe7dfebb-c7df-4b06-b124-7cc10fc725c5",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可增发代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0290\t发行标准可增发代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cd3fe106-84bc-400c-a657-188ac1c3fe55",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可增发代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0300\t发行标准可增发代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 17,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5bfc470c-cf62-4eb7-9742-e3e5adf24572",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0310\t发行标准可增发代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "bf839d12-c8c4-49aa-af3c-f9796ca2d88d",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0310\t发行标准可增发代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "8ea8e578-b56f-47fa-95cd-699068618a1a",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0320\t发行标准可增发代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7025b703-bada-46cd-9374-6b93279d2dc4",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0320\t发行标准可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, BB53B8790F8F7F45217C19ED59F5BB10A9DD50E20F8A4F7CBFDF40615469EF1A: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, BB53B8790F8F7F45217C19ED59F5BB10A9DD50E20F8A4F7CBFDF40615469EF1A: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "c66ee21c-1716-4e9b-bf93-fa8cad351b66",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0330\t发行标准可增发代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f5d15de4-e779-4fc0-862c-2646fa7d37ed",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0330\t发行标准可增发代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5dd3a06a-fcb7-4e4a-82fd-f53f8acca9f2",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0330\t发行标准可增发代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e27f1ebc-1424-4cac-873c-4c5e544e1c67",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "89f7ad55-0bf5-4cf8-ba71-3bae0fc0a081",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d3bca236-560c-4aab-8be6-36d64c649843",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_sendTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4d45c50b-b637-4c61-8986-83aa29dd8f03",
                                      "parentUUID": "94f0ac81-de87-489a-8201-b0cfaf38ca08",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "fe7dfebb-c7df-4b06-b124-7cc10fc725c5",
                                    "cd3fe106-84bc-400c-a657-188ac1c3fe55",
                                    "5bfc470c-cf62-4eb7-9742-e3e5adf24572",
                                    "7025b703-bada-46cd-9374-6b93279d2dc4",
                                    "f5d15de4-e779-4fc0-862c-2646fa7d37ed",
                                    "5dd3a06a-fcb7-4e4a-82fd-f53f8acca9f2",
                                    "e27f1ebc-1424-4cac-873c-4c5e544e1c67",
                                    "89f7ad55-0bf5-4cf8-ba71-3bae0fc0a081",
                                    "d3bca236-560c-4aab-8be6-36d64c649843",
                                    "4d45c50b-b637-4c61-8986-83aa29dd8f03"
                                  ],
                                  "failures": [
                                    "bf839d12-c8c4-49aa-af3c-f9796ca2d88d",
                                    "8ea8e578-b56f-47fa-95cd-699068618a1a",
                                    "c66ee21c-1716-4e9b-bf93-fa8cad351b66"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3228,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                  "title": "测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 996,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "3c459c11-de00-41fa-beb2-c0ea6a6724d6",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可增发代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0010\t发起标准可增发代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 4174,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7a41635c-efe5-43e3-a37c-71c72c64b52e",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0030\t发起标准可增发代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "6be17c81-f3cb-4dce-b0b0-3491e6861d45",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0030\t发起标准可增发代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "f1d141c2-7219-447d-be61-3b9496192cb3",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0030\t发起标准可增发代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0f52fce5-89ff-4710-b287-6bbde3bf83a9",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0040\t发起标准可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "30a54fe6-f4cf-4255-af7b-2a081cd5def7",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0050\t发起标准可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5e560ce1-5d52-4b51-b4d1-c7674fc5587f",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0060\t发起标准可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ca76bd03-629c-429e-88b1-6da643c4068a",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可增发代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0070\t发起标准可增发代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9a2a3254-87f4-43ba-86a2-ce5570d443db",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0080\t发起标准可增发代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1f827ee2-7f9c-4a2a-a3e4-2443ae7fe0fb",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0080\t发起标准可增发代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3ed3f9f7-813d-49ba-b7fa-3723547f181c",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0090\t发起标准可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f65fe980-3cf2-4a17-98dc-cc79a2c09fb9",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0100\t发起标准可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "05c6a375-6ded-4ab8-a457-557474978c63",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_sendTransaction] 0110\t发起标准可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e233890a-c20c-4e43-9d91-caea89de8c5d",
                                      "parentUUID": "c25c112a-5606-4768-beb9-2359f16f36ce",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "7a41635c-efe5-43e3-a37c-71c72c64b52e",
                                    "0f52fce5-89ff-4710-b287-6bbde3bf83a9",
                                    "30a54fe6-f4cf-4255-af7b-2a081cd5def7",
                                    "5e560ce1-5d52-4b51-b4d1-c7674fc5587f",
                                    "ca76bd03-629c-429e-88b1-6da643c4068a",
                                    "9a2a3254-87f4-43ba-86a2-ce5570d443db",
                                    "1f827ee2-7f9c-4a2a-a3e4-2443ae7fe0fb",
                                    "3ed3f9f7-813d-49ba-b7fa-3723547f181c",
                                    "f65fe980-3cf2-4a17-98dc-cc79a2c09fb9",
                                    "05c6a375-6ded-4ab8-a457-557474978c63",
                                    "e233890a-c20c-4e43-9d91-caea89de8c5d"
                                  ],
                                  "failures": [
                                    "6be17c81-f3cb-4dce-b0b0-3491e6861d45",
                                    "f1d141c2-7219-447d-be61-3b9496192cb3"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4228,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "a8adb373-321c-4ccc-b17e-1298423b8da6",
                                  "title": "测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11185,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "9b369f18-ba29-4999-89c8-e320de62acdf",
                                      "parentUUID": "a8adb373-321c-4ccc-b17e-1298423b8da6",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 46,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "916e9e1e-4295-436c-856a-1e8cd3bfb36f",
                                      "parentUUID": "a8adb373-321c-4ccc-b17e-1298423b8da6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 47,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7961c4fc-0496-4159-bcf0-b0a202c471fa",
                                      "parentUUID": "a8adb373-321c-4ccc-b17e-1298423b8da6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 56,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cd8c170c-cc29-49bb-a615-b998315ce4b2",
                                      "parentUUID": "a8adb373-321c-4ccc-b17e-1298423b8da6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 55,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "087114d7-f644-4be7-ac4f-d37812cdc05a",
                                      "parentUUID": "a8adb373-321c-4ccc-b17e-1298423b8da6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 49,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d188ddc5-10dc-4093-bb6b-140cb5e9edb6",
                                      "parentUUID": "a8adb373-321c-4ccc-b17e-1298423b8da6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1819,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3a4da0b1-c3ad-44fe-a794-9fde6a86c842",
                                      "parentUUID": "a8adb373-321c-4ccc-b17e-1298423b8da6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_sendTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1758,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "283974b1-c7f9-474b-9904-352aad2ffdcb",
                                      "parentUUID": "a8adb373-321c-4ccc-b17e-1298423b8da6",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "916e9e1e-4295-436c-856a-1e8cd3bfb36f",
                                    "7961c4fc-0496-4159-bcf0-b0a202c471fa",
                                    "cd8c170c-cc29-49bb-a615-b998315ce4b2",
                                    "087114d7-f644-4be7-ac4f-d37812cdc05a",
                                    "d188ddc5-10dc-4093-bb6b-140cb5e9edb6",
                                    "3a4da0b1-c3ad-44fe-a794-9fde6a86c842",
                                    "283974b1-c7f9-474b-9904-352aad2ffdcb"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3830,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                  "title": "测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 818,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "c44bfe83-45a1-414e-a5c6-57ab8f830330",
                                      "parentUUID": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 4208,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "44cffb05-f14a-4608-af05-31ac0aaabcf8",
                                      "parentUUID": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 60,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e3f3bd14-8999-4b3b-8397-53c9c6b4b4a8",
                                      "parentUUID": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 47,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7d9765e3-dff1-4ba5-bd23-740c0f626021",
                                      "parentUUID": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 52,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0bb276bb-f1ac-4971-8381-21989a47b9df",
                                      "parentUUID": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fb9b6585-7893-4311-bd4c-f5ee8a3d1958",
                                      "parentUUID": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fb4ddebc-070b-4c41-8bf8-1e9ea57d483c",
                                      "parentUUID": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "7505cd9d-a241-4ec3-8414-1a545c8f80b1",
                                      "parentUUID": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发代币余额的整数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9f1ba617-8442-46e2-94b5-05ff4fd3f5e7",
                                      "parentUUID": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "7b406513-0f5f-475f-aac5-7e5e8cedc2e1",
                                      "parentUUID": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "f92500f3-f65f-4261-adc2-460400223aa8",
                                      "parentUUID": "a2cad3d2-2c13-4da0-a752-e3dce9dd3a10",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "44cffb05-f14a-4608-af05-31ac0aaabcf8",
                                    "e3f3bd14-8999-4b3b-8397-53c9c6b4b4a8",
                                    "7d9765e3-dff1-4ba5-bd23-740c0f626021",
                                    "0bb276bb-f1ac-4971-8381-21989a47b9df",
                                    "fb9b6585-7893-4311-bd4c-f5ee8a3d1958",
                                    "fb4ddebc-070b-4c41-8bf8-1e9ea57d483c",
                                    "9f1ba617-8442-46e2-94b5-05ff4fd3f5e7"
                                  ],
                                  "failures": [
                                    "7505cd9d-a241-4ec3-8414-1a545c8f80b1",
                                    "7b406513-0f5f-475f-aac5-7e5e8cedc2e1",
                                    "f92500f3-f65f-4261-adc2-460400223aa8"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4413,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "28fbf087-6266-4697-9697-c57959b1f5eb",
                                  "title": "测试增发-[币种:5eccabcb] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试增发-[币种:5eccabcb] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 72,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "75f38e4a-5a68-4b44-a72b-60059f86ec12",
                                      "parentUUID": "28fbf087-6266-4697-9697-c57959b1f5eb",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试增发-[币种:5eccabcb] [方式:jt_sendTransaction] 0370\t增发可增发的代币标准可增发代币",
                                      "timedOut": false,
                                      "duration": 4173,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "adae43cc-2bb4-4495-bb6c-5857071301f4",
                                      "parentUUID": "28fbf087-6266-4697-9697-c57959b1f5eb",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "adae43cc-2bb4-4495-bb6c-5857071301f4"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4173,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c0148be0-416c-4974-a6e3-2ecad8c4bb9a",
                                  "title": "测试销毁-[币种:5eccabcb] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcb] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 315,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "eb0dda11-08a4-47c1-9ac4-6ddba4b44a48",
                                      "parentUUID": "c0148be0-416c-4974-a6e3-2ecad8c4bb9a",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcb] [方式:jt_sendTransaction] 0380\t销毁标准可增发代币",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "111e4253-0899-40b6-97ac-59f4964ed259",
                                      "parentUUID": "c0148be0-416c-4974-a6e3-2ecad8c4bb9a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcb] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可增发代币",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e173ccb3-c820-42c6-9a10-93bebb7fe797",
                                      "parentUUID": "c0148be0-416c-4974-a6e3-2ecad8c4bb9a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcb] [方式:jt_sendTransaction] 0380\t销毁所有标准可增发代币",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a719e8e4-a493-4547-9ea8-895afb0eb02f",
                                      "parentUUID": "c0148be0-416c-4974-a6e3-2ecad8c4bb9a",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "111e4253-0899-40b6-97ac-59f4964ed259",
                                    "e173ccb3-c820-42c6-9a10-93bebb7fe797",
                                    "a719e8e4-a493-4547-9ea8-895afb0eb02f"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 22,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "d87cb21c-ea56-4f09-bf81-b7ed71c4c149",
                              "title": "标准可销毁代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "70c9c708-f5ff-44e4-98db-96381363e210",
                                  "title": "测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1019,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "ae8ee78b-b397-4d48-9f7e-70bf863ab81c",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0270\t发行标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 4185,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "18733f5f-f16d-4db3-a2e2-f2a330f3f8e8",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0290\t发行标准可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "81e4a3f1-8a54-4b34-a179-9b39df1bab6a",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0300\t发行标准可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1413df4e-3f2d-460b-b282-39a36859e723",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0310\t发行标准可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "a8330801-b709-4c73-8661-bbc04fe75317",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0310\t发行标准可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b7815cf1-fab2-4dee-b5e9-828a0ed4f13e",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0320\t发行标准可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8bd8df86-444f-499d-ab16-5adab220c6e2",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0320\t发行标准可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, FB55EC4C06B081020BACD0CB9FFA03A31E31AE853CE6CDAF6C1E6702517FF272: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, FB55EC4C06B081020BACD0CB9FFA03A31E31AE853CE6CDAF6C1E6702517FF272: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "6e020ef5-5266-4ab0-a9b0-9fcb66113c7c",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7c67c559-67d6-48c1-955e-965c8c4539f1",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c50eac42-b043-450b-b2ca-2e9ea8e70fcd",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b5419230-b46a-48d6-9420-1a149618a62d",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "32b0d4a4-0165-485c-8c51-a2d2de549c42",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b1b96dd4-46ec-4147-ae41-1a8d1807ebfc",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e76693b0-dd0c-4ea4-9122-1437b0ac0829",
                                      "parentUUID": "70c9c708-f5ff-44e4-98db-96381363e210",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "18733f5f-f16d-4db3-a2e2-f2a330f3f8e8",
                                    "81e4a3f1-8a54-4b34-a179-9b39df1bab6a",
                                    "1413df4e-3f2d-460b-b282-39a36859e723",
                                    "b7815cf1-fab2-4dee-b5e9-828a0ed4f13e",
                                    "8bd8df86-444f-499d-ab16-5adab220c6e2",
                                    "7c67c559-67d6-48c1-955e-965c8c4539f1",
                                    "c50eac42-b043-450b-b2ca-2e9ea8e70fcd",
                                    "b5419230-b46a-48d6-9420-1a149618a62d",
                                    "32b0d4a4-0165-485c-8c51-a2d2de549c42",
                                    "b1b96dd4-46ec-4147-ae41-1a8d1807ebfc",
                                    "e76693b0-dd0c-4ea4-9122-1437b0ac0829"
                                  ],
                                  "failures": [
                                    "a8330801-b709-4c73-8661-bbc04fe75317",
                                    "6e020ef5-5266-4ab0-a9b0-9fcb66113c7c"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4237,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                  "title": "测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1012,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "bfdccc9e-4b7e-4841-b98f-e574c38624de",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0010\t发起标准可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 3159,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e8a55c6c-948c-44ef-b5b5-40e02390c649",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "d42b9272-30a6-4eae-8fe4-de0bea4b890e",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "8ff152d9-3ed5-42b1-bcb1-d9a684a329ab",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5f31f93c-94e1-442c-a601-00e9b3b99275",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0040\t发起标准可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "daa81819-cd86-4a30-bf88-d4630163716d",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0050\t发起标准可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "553921f6-9e59-4abb-b27d-886d873f6ad7",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0060\t发起标准可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "58ab53a4-afaf-4b94-a566-5f0da993dc80",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0070\t发起标准可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8406788f-c8a6-46b8-8aa1-82f2b064b09f",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0080\t发起标准可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4c166e3f-2604-4199-8ef3-d839188b90ae",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0080\t发起标准可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ee087726-e2fe-4549-9225-11a3995d265b",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0090\t发起标准可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "22443549-234c-415e-a678-32a5c2e98166",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0100\t发起标准可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2a91102c-7cae-41c6-9ee0-21ac667efb43",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0110\t发起标准可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "dbab6f81-c40c-4f75-8f4d-632d4c31323c",
                                      "parentUUID": "cee9eb23-df23-40ca-9a19-ef509a97e8b8",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "e8a55c6c-948c-44ef-b5b5-40e02390c649",
                                    "5f31f93c-94e1-442c-a601-00e9b3b99275",
                                    "daa81819-cd86-4a30-bf88-d4630163716d",
                                    "553921f6-9e59-4abb-b27d-886d873f6ad7",
                                    "58ab53a4-afaf-4b94-a566-5f0da993dc80",
                                    "8406788f-c8a6-46b8-8aa1-82f2b064b09f",
                                    "4c166e3f-2604-4199-8ef3-d839188b90ae",
                                    "ee087726-e2fe-4549-9225-11a3995d265b",
                                    "22443549-234c-415e-a678-32a5c2e98166",
                                    "2a91102c-7cae-41c6-9ee0-21ac667efb43",
                                    "dbab6f81-c40c-4f75-8f4d-632d4c31323c"
                                  ],
                                  "failures": [
                                    "d42b9272-30a6-4eae-8fe4-de0bea4b890e",
                                    "8ff152d9-3ed5-42b1-bcb1-d9a684a329ab"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3198,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "27d15907-4ca4-4ca3-8b8b-7f761a1a9dbf",
                                  "title": "测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11564,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "584794eb-7e00-41ab-a109-97751b02919a",
                                      "parentUUID": "27d15907-4ca4-4ca3-8b8b-7f761a1a9dbf",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 76,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6db16a38-2f4d-4e3c-bb06-ec06641b41a7",
                                      "parentUUID": "27d15907-4ca4-4ca3-8b8b-7f761a1a9dbf",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 76,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "548731e6-eb4e-4b3d-b8f9-a1221f7401aa",
                                      "parentUUID": "27d15907-4ca4-4ca3-8b8b-7f761a1a9dbf",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 89,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4f088dc0-5687-44de-b44d-6f4f636a72bb",
                                      "parentUUID": "27d15907-4ca4-4ca3-8b8b-7f761a1a9dbf",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 50,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5d622e05-2da9-4a26-824e-30d1a7a20c4c",
                                      "parentUUID": "27d15907-4ca4-4ca3-8b8b-7f761a1a9dbf",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 40,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "20f5b3b8-bdb5-4aa3-a8a4-cccf99582798",
                                      "parentUUID": "27d15907-4ca4-4ca3-8b8b-7f761a1a9dbf",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1793,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5e9e3357-5843-4ded-8f51-461a84ee0a2e",
                                      "parentUUID": "27d15907-4ca4-4ca3-8b8b-7f761a1a9dbf",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1802,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "20e0b410-bfc2-4a38-a056-2a185881ccdc",
                                      "parentUUID": "27d15907-4ca4-4ca3-8b8b-7f761a1a9dbf",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "6db16a38-2f4d-4e3c-bb06-ec06641b41a7",
                                    "548731e6-eb4e-4b3d-b8f9-a1221f7401aa",
                                    "4f088dc0-5687-44de-b44d-6f4f636a72bb",
                                    "5d622e05-2da9-4a26-824e-30d1a7a20c4c",
                                    "20f5b3b8-bdb5-4aa3-a8a4-cccf99582798",
                                    "5e9e3357-5843-4ded-8f51-461a84ee0a2e",
                                    "20e0b410-bfc2-4a38-a056-2a185881ccdc"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3926,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                  "title": "测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 917,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "5aabf1fa-3e2a-483b-b2b2-aa355199f3a0",
                                      "parentUUID": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 4208,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "72b7a3b6-c231-4380-a4c5-237d1459fb39",
                                      "parentUUID": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 67,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9bcde92d-bd8e-4cc9-92cb-22cca7897db9",
                                      "parentUUID": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 68,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6353f01b-1562-406d-81a6-fef0b6156f14",
                                      "parentUUID": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 69,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fe4d75fe-2451-4bd9-8d47-aec4db727eeb",
                                      "parentUUID": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "09084fd2-aaaf-4b3f-bb06-f53e1958f878",
                                      "parentUUID": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "557de6b5-d974-4f3f-b9f6-6e69149bc884",
                                      "parentUUID": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "05c50783-00a5-4d7d-ba2e-4c391ab922a3",
                                      "parentUUID": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1adf72f3-c22c-4be1-bbf8-006c2c3c1725",
                                      "parentUUID": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "7464e8bc-5f9d-4c22-8043-d690758e28c0",
                                      "parentUUID": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "68b7639e-fdb0-41b6-a384-d076fdea73fb",
                                      "parentUUID": "5d60d3e8-5712-4a61-9ff0-3bb65b2aa047",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "72b7a3b6-c231-4380-a4c5-237d1459fb39",
                                    "9bcde92d-bd8e-4cc9-92cb-22cca7897db9",
                                    "6353f01b-1562-406d-81a6-fef0b6156f14",
                                    "fe4d75fe-2451-4bd9-8d47-aec4db727eeb",
                                    "09084fd2-aaaf-4b3f-bb06-f53e1958f878",
                                    "557de6b5-d974-4f3f-b9f6-6e69149bc884",
                                    "1adf72f3-c22c-4be1-bbf8-006c2c3c1725"
                                  ],
                                  "failures": [
                                    "05c50783-00a5-4d7d-ba2e-4c391ab922a3",
                                    "7464e8bc-5f9d-4c22-8043-d690758e28c0",
                                    "68b7639e-fdb0-41b6-a384-d076fdea73fb"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4440,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "cfa45020-6918-414b-ae34-694960bb19ed",
                                  "title": "测试增发-[币种:5eccabcd] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试增发-[币种:5eccabcd] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 80,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "79a96d62-44bf-41e1-8021-1a3ee324b8e5",
                                      "parentUUID": "cfa45020-6918-414b-ae34-694960bb19ed",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试增发-[币种:5eccabcd] [方式:jt_sendTransaction] 0370\t增发可增发的代币标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8d54723b-d29a-44af-90b6-14182d1274ce",
                                      "parentUUID": "cfa45020-6918-414b-ae34-694960bb19ed",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "8d54723b-d29a-44af-90b6-14182d1274ce"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "60051c4a-e1e8-4b43-83e9-697db68a77dd",
                                  "title": "测试销毁-[币种:5eccabcd] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcd] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 306,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "b2772dd1-e327-4739-a604-9b52b646a28e",
                                      "parentUUID": "60051c4a-e1e8-4b43-83e9-697db68a77dd",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcd] [方式:jt_sendTransaction] 0380\t销毁标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 4223,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b04a7f67-c7ec-495b-a347-7381a4d15960",
                                      "parentUUID": "60051c4a-e1e8-4b43-83e9-697db68a77dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcd] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7f3921b3-ee4b-4764-b762-39ad5f122f94",
                                      "parentUUID": "60051c4a-e1e8-4b43-83e9-697db68a77dd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcd] [方式:jt_sendTransaction] 0380\t销毁所有标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "bbb22231-c75a-4af3-a628-aff11b135c1a",
                                      "parentUUID": "60051c4a-e1e8-4b43-83e9-697db68a77dd",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "b04a7f67-c7ec-495b-a347-7381a4d15960",
                                    "7f3921b3-ee4b-4764-b762-39ad5f122f94"
                                  ],
                                  "failures": [
                                    "bbb22231-c75a-4af3-a628-aff11b135c1a"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4249,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "a3b5af70-381b-47d6-a90f-499de7cba0ba",
                              "title": "标准可增发可销毁代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                  "title": "测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 985,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "127ab7e3-1e7c-42cf-b246-ca51e82cd110",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0270\t发行标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 4209,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c620939e-ddc7-41a5-b65f-e9f178446668",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可增发可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0290\t发行标准可增发可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 15,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "26315b36-cc49-496a-8159-fa1f19a86851",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可增发可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0300\t发行标准可增发可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "407aaaa1-7a1d-4a28-a7af-24add4f292ef",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0310\t发行标准可增发可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "693b11ff-ddc4-45b9-ade5-2b81d45aca99",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0310\t发行标准可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "5b3c7151-5948-498d-bf0f-3b8d9d823b33",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0320\t发行标准可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1fe3ef31-ab2c-4ca8-ae1a-676d76cce426",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0320\t发行标准可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, A135EEDA94186732FA244392185BC9C0A79086FB48A0FBADF0185A234EF79D31: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, A135EEDA94186732FA244392185BC9C0A79086FB48A0FBADF0185A234EF79D31: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "e5a13a3b-d6ff-4952-90af-3234733ec1b5",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "292d512d-13b5-43b0-aa21-0340f9d80878",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3b77e916-8aca-49be-b35f-bed5cb5f8642",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "43f0651b-9ef5-4749-9b47-ce73d6675ee8",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b263cef8-5c62-4b95-9ecc-164a41a1d817",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9b13d85a-1cc3-4df7-9725-dee9569c52d8",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7a2e6c76-b375-4c21-84c1-f4ea18eeade7",
                                      "parentUUID": "929f9260-85ba-42d1-9424-06d7bd8ac8ba",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "c620939e-ddc7-41a5-b65f-e9f178446668",
                                    "26315b36-cc49-496a-8159-fa1f19a86851",
                                    "407aaaa1-7a1d-4a28-a7af-24add4f292ef",
                                    "1fe3ef31-ab2c-4ca8-ae1a-676d76cce426",
                                    "292d512d-13b5-43b0-aa21-0340f9d80878",
                                    "3b77e916-8aca-49be-b35f-bed5cb5f8642",
                                    "43f0651b-9ef5-4749-9b47-ce73d6675ee8",
                                    "b263cef8-5c62-4b95-9ecc-164a41a1d817",
                                    "9b13d85a-1cc3-4df7-9725-dee9569c52d8",
                                    "7a2e6c76-b375-4c21-84c1-f4ea18eeade7"
                                  ],
                                  "failures": [
                                    "693b11ff-ddc4-45b9-ade5-2b81d45aca99",
                                    "5b3c7151-5948-498d-bf0f-3b8d9d823b33",
                                    "e5a13a3b-d6ff-4952-90af-3234733ec1b5"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4278,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                  "title": "测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 824,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "1088606a-35f1-4f91-80bc-6ed2180fb2f2",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可增发可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0010\t发起标准可增发可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 3161,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b4821ea4-12ac-497e-b5f2-727ff2af6aa4",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "8a696349-9c68-44f0-9166-1962350df4a0",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "1ceb5671-c4e3-4ef5-8538-d7a58c333e3d",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "015996aa-8de3-4c63-aa20-da91b4dbd332",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0040\t发起标准可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ef140623-b91c-4874-b570-d4da12dac0d4",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0050\t发起标准可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f7ceb0dd-3f11-4f65-9485-52c70b95ad83",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0060\t发起标准可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "71766bae-501e-4fe0-a68c-defebbd54d3a",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可增发可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0070\t发起标准可增发可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4c6ffd5c-a7c6-4c13-a361-c5e9e5016867",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0080\t发起标准可增发可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "52aa262e-ba86-4405-a30d-72b532236ab1",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0080\t发起标准可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b31da9b7-8de7-4a5f-b97c-379847d29797",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0090\t发起标准可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a4c1af61-ead1-43a9-bfb6-81466c98414b",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0100\t发起标准可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1a99847f-0dc0-464d-ba6b-b652ffa73fcd",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0110\t发起标准可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2c45dbd2-8d8c-47ae-b202-264d12dcbd48",
                                      "parentUUID": "3bf84525-db28-417d-9bc7-3a693c94918a",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "b4821ea4-12ac-497e-b5f2-727ff2af6aa4",
                                    "015996aa-8de3-4c63-aa20-da91b4dbd332",
                                    "ef140623-b91c-4874-b570-d4da12dac0d4",
                                    "f7ceb0dd-3f11-4f65-9485-52c70b95ad83",
                                    "71766bae-501e-4fe0-a68c-defebbd54d3a",
                                    "4c6ffd5c-a7c6-4c13-a361-c5e9e5016867",
                                    "52aa262e-ba86-4405-a30d-72b532236ab1",
                                    "b31da9b7-8de7-4a5f-b97c-379847d29797",
                                    "a4c1af61-ead1-43a9-bfb6-81466c98414b",
                                    "1a99847f-0dc0-464d-ba6b-b652ffa73fcd",
                                    "2c45dbd2-8d8c-47ae-b202-264d12dcbd48"
                                  ],
                                  "failures": [
                                    "8a696349-9c68-44f0-9166-1962350df4a0",
                                    "1ceb5671-c4e3-4ef5-8538-d7a58c333e3d"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3199,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "44e5cd3b-abcd-4f73-802d-dda7f63976df",
                                  "title": "测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 10960,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "110ce1b4-26fc-4e7a-a62c-e24e066a24ce",
                                      "parentUUID": "44e5cd3b-abcd-4f73-802d-dda7f63976df",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 56,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3c3802f1-3eb2-427d-b69d-f1be1531341f",
                                      "parentUUID": "44e5cd3b-abcd-4f73-802d-dda7f63976df",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 47,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2627336a-334f-4b71-af89-0573fe1d98ee",
                                      "parentUUID": "44e5cd3b-abcd-4f73-802d-dda7f63976df",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 66,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cc87bee4-23f8-452d-9dda-06a360ad081d",
                                      "parentUUID": "44e5cd3b-abcd-4f73-802d-dda7f63976df",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 50,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ed0fb37e-1977-4017-afff-6b0a55ade18d",
                                      "parentUUID": "44e5cd3b-abcd-4f73-802d-dda7f63976df",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 44,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ff8f2b85-74ad-429b-8ed9-1c9a73ed66b2",
                                      "parentUUID": "44e5cd3b-abcd-4f73-802d-dda7f63976df",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1837,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5a9d4da1-0b40-4516-8fb2-50a9fc098a8d",
                                      "parentUUID": "44e5cd3b-abcd-4f73-802d-dda7f63976df",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1790,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "aa839ecb-2e64-4ef1-9586-bf304c2bf0d0",
                                      "parentUUID": "44e5cd3b-abcd-4f73-802d-dda7f63976df",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "3c3802f1-3eb2-427d-b69d-f1be1531341f",
                                    "2627336a-334f-4b71-af89-0573fe1d98ee",
                                    "cc87bee4-23f8-452d-9dda-06a360ad081d",
                                    "ed0fb37e-1977-4017-afff-6b0a55ade18d",
                                    "ff8f2b85-74ad-429b-8ed9-1c9a73ed66b2",
                                    "5a9d4da1-0b40-4516-8fb2-50a9fc098a8d",
                                    "aa839ecb-2e64-4ef1-9586-bf304c2bf0d0"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3890,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                  "title": "测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 779,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "d969b3f1-bd2c-41f6-afeb-32862d29b3e8",
                                      "parentUUID": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 5232,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e2d4d918-f7b5-40f0-950e-fff8a5d54fc7",
                                      "parentUUID": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 60,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bf5bc2d8-45bf-4e61-8121-4e2cce48de6c",
                                      "parentUUID": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 52,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bca9a6a8-7cad-4b95-ae5a-b104ea57b79c",
                                      "parentUUID": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 40,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7c8e8f1a-7acb-46b4-a81f-810c994b69a0",
                                      "parentUUID": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c7037868-af91-4057-9750-15918d529ee2",
                                      "parentUUID": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e8ad7815-50ea-4bee-a461-db1a714379fa",
                                      "parentUUID": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "e1f4e442-0478-4277-b08f-5260b7966911",
                                      "parentUUID": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "abc1aaf0-2791-4caa-a848-23b45882058f",
                                      "parentUUID": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "550c8bc9-b6f1-4544-aa76-235bdc53df76",
                                      "parentUUID": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "a2cfe3bb-2834-4ef3-a79f-8c88074eec7b",
                                      "parentUUID": "aaa48d91-4938-41df-b877-d8cca4c682ed",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "e2d4d918-f7b5-40f0-950e-fff8a5d54fc7",
                                    "bf5bc2d8-45bf-4e61-8121-4e2cce48de6c",
                                    "bca9a6a8-7cad-4b95-ae5a-b104ea57b79c",
                                    "7c8e8f1a-7acb-46b4-a81f-810c994b69a0",
                                    "c7037868-af91-4057-9750-15918d529ee2",
                                    "e8ad7815-50ea-4bee-a461-db1a714379fa",
                                    "abc1aaf0-2791-4caa-a848-23b45882058f"
                                  ],
                                  "failures": [
                                    "e1f4e442-0478-4277-b08f-5260b7966911",
                                    "550c8bc9-b6f1-4544-aa76-235bdc53df76",
                                    "a2cfe3bb-2834-4ef3-a79f-8c88074eec7b"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5411,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "7559ae35-853f-4235-9b40-24debb9b1b71",
                                  "title": "测试增发-[币种:5eccabcf] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试增发-[币种:5eccabcf] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 83,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "58bdd62e-6a59-4e24-8637-a4ea1d2f9a62",
                                      "parentUUID": "7559ae35-853f-4235-9b40-24debb9b1b71",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试增发-[币种:5eccabcf] [方式:jt_sendTransaction] 0370\t增发可增发的代币标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 4200,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0a65b02d-cacf-40b8-a003-d909fcfc75b7",
                                      "parentUUID": "7559ae35-853f-4235-9b40-24debb9b1b71",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "0a65b02d-cacf-40b8-a003-d909fcfc75b7"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4200,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "8e6c3ab2-0e07-4971-aa57-78b19acca843",
                                  "title": "测试销毁-[币种:5eccabcf] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcf] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 307,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "7db759cd-9d45-445e-917d-ea0e59ccff7e",
                                      "parentUUID": "8e6c3ab2-0e07-4971-aa57-78b19acca843",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcf] [方式:jt_sendTransaction] 0380\t销毁标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 5074,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d091f788-40cf-4578-8053-ae7652241d90",
                                      "parentUUID": "8e6c3ab2-0e07-4971-aa57-78b19acca843",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcf] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e1c4f6f5-db69-4efb-ac02-8cd31ca2b9c2",
                                      "parentUUID": "8e6c3ab2-0e07-4971-aa57-78b19acca843",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 标准可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabcf] [方式:jt_sendTransaction] 0380\t销毁所有标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "8dd2bc38-3299-4167-b000-b645e7f950c1",
                                      "parentUUID": "8e6c3ab2-0e07-4971-aa57-78b19acca843",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "d091f788-40cf-4578-8053-ae7652241d90",
                                    "e1c4f6f5-db69-4efb-ac02-8cd31ca2b9c2"
                                  ],
                                  "failures": [
                                    "8dd2bc38-3299-4167-b000-b645e7f950c1"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5101,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "6fa95ac6-89bc-4334-9c53-476b42760a69",
                              "title": "自定Issuer一次性代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                  "title": "测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 867,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "f4b16ec9-96d5-4c9e-b083-2ab17ff9fdf6",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0270\t发行自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 4214,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1e2c850e-1ab1-4bd5-b54e-793a76e50ec6",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer一次性代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0290\t发行自定Issuer一次性代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1feb4e78-68a8-44b3-8860-31453077001c",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer一次性代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0300\t发行自定Issuer一次性代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6b7118d7-b490-4327-ab64-d12fa4dfe7da",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer一次性代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer一次性代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 15,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "ef5983d0-17fe-4d08-a941-072f5d8fa8dd",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer一次性代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer一次性代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 22,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "df813a7a-e9e7-462e-bb8d-0f9193be4223",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer一次性代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer一次性代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b45457a0-0f61-4bfb-8091-69eab3035382",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0ebc1f19-707e-4307-9ac9-428bd1e8e8a0",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "30469bbf-2b8e-484b-9e47-0de4a5d574f8",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "692dba1e-e816-452a-a7f6-ea4f436870f2",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2b985746-4a59-4950-ad4e-0f512a05df44",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8e84e045-6f69-4cba-885f-ffd2e04f51f6",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e6e3dfa9-9f15-4b24-9806-b83ed278cb96",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "14bb656c-5b5b-451c-94e4-84d1886a24a7",
                                      "parentUUID": "5cce1838-112e-4be4-87f9-ca82cff855cd",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "1e2c850e-1ab1-4bd5-b54e-793a76e50ec6",
                                    "1feb4e78-68a8-44b3-8860-31453077001c",
                                    "6b7118d7-b490-4327-ab64-d12fa4dfe7da",
                                    "df813a7a-e9e7-462e-bb8d-0f9193be4223",
                                    "b45457a0-0f61-4bfb-8091-69eab3035382",
                                    "0ebc1f19-707e-4307-9ac9-428bd1e8e8a0",
                                    "30469bbf-2b8e-484b-9e47-0de4a5d574f8",
                                    "692dba1e-e816-452a-a7f6-ea4f436870f2",
                                    "2b985746-4a59-4950-ad4e-0f512a05df44",
                                    "8e84e045-6f69-4cba-885f-ffd2e04f51f6",
                                    "e6e3dfa9-9f15-4b24-9806-b83ed278cb96",
                                    "14bb656c-5b5b-451c-94e4-84d1886a24a7"
                                  ],
                                  "failures": [
                                    "ef5983d0-17fe-4d08-a941-072f5d8fa8dd"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4313,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                  "title": "测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 870,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "023be1c8-54b4-4fe8-9c4e-e1aef6ff931d",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer一次性代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0010\t发起自定Issuer一次性代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 3157,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ad71de4b-c2e1-4703-be5d-57f0ebac8237",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "9aa72092-64a1-4a1c-b91f-eaf96d592e59",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "f04a0e7d-d376-4f89-8151-7ca0cfb5cba0",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8721d96c-5953-4fcd-8c1a-a1702897c32a",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0040\t发起自定Issuer一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e22b49f5-ae56-4db0-8ef8-54fe419dda1a",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0050\t发起自定Issuer一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c16f4c88-07a8-4385-9e6a-e395f5630fa0",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0060\t发起自定Issuer一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "24d6ef8d-b15e-4c1e-8e15-d633345f9066",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer一次性代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0070\t发起自定Issuer一次性代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a370325c-190b-4511-b555-83e74be741df",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer一次性代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer一次性代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "68cc8235-b76b-44da-8464-f71eaa48542f",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer一次性代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer一次性代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3cf20f68-d742-4f76-b892-80cb894b102e",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0090\t发起自定Issuer一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fbe69257-6244-4938-8038-4624916fd59e",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0100\t发起自定Issuer一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1215ac78-a1d1-4a3e-8295-e3535ae88a79",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0110\t发起自定Issuer一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d4d82e4d-d214-4629-8308-526c2fd40db6",
                                      "parentUUID": "d9ba033a-2c7e-4e4a-9ffd-bed8b68316f2",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "ad71de4b-c2e1-4703-be5d-57f0ebac8237",
                                    "8721d96c-5953-4fcd-8c1a-a1702897c32a",
                                    "e22b49f5-ae56-4db0-8ef8-54fe419dda1a",
                                    "c16f4c88-07a8-4385-9e6a-e395f5630fa0",
                                    "24d6ef8d-b15e-4c1e-8e15-d633345f9066",
                                    "a370325c-190b-4511-b555-83e74be741df",
                                    "68cc8235-b76b-44da-8464-f71eaa48542f",
                                    "3cf20f68-d742-4f76-b892-80cb894b102e",
                                    "fbe69257-6244-4938-8038-4624916fd59e",
                                    "1215ac78-a1d1-4a3e-8295-e3535ae88a79",
                                    "d4d82e4d-d214-4629-8308-526c2fd40db6"
                                  ],
                                  "failures": [
                                    "9aa72092-64a1-4a1c-b91f-eaf96d592e59",
                                    "f04a0e7d-d376-4f89-8151-7ca0cfb5cba0"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3218,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "43a9487d-32d7-4302-9092-591d8f07f949",
                                  "title": "测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 15000,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "5afb1697-3c06-4fb9-b145-e4dfe364fc13",
                                      "parentUUID": "43a9487d-32d7-4302-9092-591d8f07f949",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 52,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1bbe4ce7-c0c2-4b7c-8983-aaf469ea57ae",
                                      "parentUUID": "43a9487d-32d7-4302-9092-591d8f07f949",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 45,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "eb06f550-2193-443c-910a-761cbf2fece2",
                                      "parentUUID": "43a9487d-32d7-4302-9092-591d8f07f949",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 55,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "269ba6d8-88f7-4305-ad31-d8d2883651ba",
                                      "parentUUID": "43a9487d-32d7-4302-9092-591d8f07f949",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 63,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5c432b02-7601-4f18-addd-555a71dec9fe",
                                      "parentUUID": "43a9487d-32d7-4302-9092-591d8f07f949",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 70,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "57d4bf71-638c-43fe-b451-f7192a223883",
                                      "parentUUID": "43a9487d-32d7-4302-9092-591d8f07f949",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1826,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8272d18a-3011-4a80-b79d-5b1679d2ab02",
                                      "parentUUID": "43a9487d-32d7-4302-9092-591d8f07f949",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1821,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bf6499ef-0200-4034-b203-8cb17d977167",
                                      "parentUUID": "43a9487d-32d7-4302-9092-591d8f07f949",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "1bbe4ce7-c0c2-4b7c-8983-aaf469ea57ae",
                                    "eb06f550-2193-443c-910a-761cbf2fece2",
                                    "269ba6d8-88f7-4305-ad31-d8d2883651ba",
                                    "5c432b02-7601-4f18-addd-555a71dec9fe",
                                    "57d4bf71-638c-43fe-b451-f7192a223883",
                                    "8272d18a-3011-4a80-b79d-5b1679d2ab02",
                                    "bf6499ef-0200-4034-b203-8cb17d977167"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3932,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                  "title": "测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 721,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "db66e253-9575-43b6-b80e-8ad94caf28a3",
                                      "parentUUID": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 42,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9e0ff8d9-76c0-4269-82a5-660671a2c56a",
                                      "parentUUID": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 58,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b2efec87-2353-40e4-90e8-b2e3e6bd0f74",
                                      "parentUUID": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 79,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b346f033-25f2-4964-9f49-60e24c247687",
                                      "parentUUID": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 46,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "db035424-78ea-45c5-b7fb-ec8d3d0c411c",
                                      "parentUUID": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bac0c8ab-1ef9-4fc4-8df1-77af707a372d",
                                      "parentUUID": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3b978dbb-82b1-4777-b624-c707f1893472",
                                      "parentUUID": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "a19f2f1d-6072-4999-88f3-75080c5311ad",
                                      "parentUUID": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer一次性代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer一次性代币余额的整数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cd853ac5-4d3e-4d45-ab71-6065e21bd6fe",
                                      "parentUUID": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "053e0a30-b3eb-40b4-a6f2-21bffa88ee2e",
                                      "parentUUID": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "8e0959b7-6381-4e08-85d2-37ee82662919",
                                      "parentUUID": "da8fef90-bc2f-436d-a4e6-6cc9250aa5f9",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "9e0ff8d9-76c0-4269-82a5-660671a2c56a",
                                    "b2efec87-2353-40e4-90e8-b2e3e6bd0f74",
                                    "b346f033-25f2-4964-9f49-60e24c247687",
                                    "db035424-78ea-45c5-b7fb-ec8d3d0c411c",
                                    "bac0c8ab-1ef9-4fc4-8df1-77af707a372d",
                                    "3b978dbb-82b1-4777-b624-c707f1893472",
                                    "cd853ac5-4d3e-4d45-ab71-6065e21bd6fe"
                                  ],
                                  "failures": [
                                    "a19f2f1d-6072-4999-88f3-75080c5311ad",
                                    "053e0a30-b3eb-40b4-a6f2-21bffa88ee2e",
                                    "8e0959b7-6381-4e08-85d2-37ee82662919"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 246,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "62b3605d-e8a5-466a-89ca-70ed2a63a362",
                                  "title": "测试增发-[币种:5eccabd1] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试增发-[币种:5eccabd1] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 87,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "de6bbc79-9359-438c-8b13-3666c5b0a20b",
                                      "parentUUID": "62b3605d-e8a5-466a-89ca-70ed2a63a362",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试增发-[币种:5eccabd1] [方式:jt_sendTransaction] 0370\t增发可增发的代币自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cc3cb8bf-90d0-4ab1-96cd-79f261b90ede",
                                      "parentUUID": "62b3605d-e8a5-466a-89ca-70ed2a63a362",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "cc3cb8bf-90d0-4ab1-96cd-79f261b90ede"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "02eefb91-6e41-4c03-8508-a87a940b01d2",
                                  "title": "测试销毁-[币种:5eccabd1] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd1] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 305,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "1ee1dd3a-d870-40de-b8e4-ba329b4276bb",
                                      "parentUUID": "02eefb91-6e41-4c03-8508-a87a940b01d2",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd1] [方式:jt_sendTransaction] 0380\t销毁自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "baf3820f-6cb0-4843-9529-f13415d58d1d",
                                      "parentUUID": "02eefb91-6e41-4c03-8508-a87a940b01d2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd1] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "87040ea1-3c1e-42c7-a1b7-f12f6d6fa426",
                                      "parentUUID": "02eefb91-6e41-4c03-8508-a87a940b01d2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer一次性代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd1] [方式:jt_sendTransaction] 0380\t销毁所有自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c9e7310f-4507-4ef9-a365-135763aa8720",
                                      "parentUUID": "02eefb91-6e41-4c03-8508-a87a940b01d2",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "baf3820f-6cb0-4843-9529-f13415d58d1d",
                                    "87040ea1-3c1e-42c7-a1b7-f12f6d6fa426",
                                    "c9e7310f-4507-4ef9-a365-135763aa8720"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 34,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "95ed1b82-de25-4528-a5c0-d320b937dd3f",
                              "title": "自定Issuer可增发代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                  "title": "测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1018,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "7e9f0842-dfc3-4077-86e9-51a019fda153",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0270\t发行自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 4322,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "50c9db6a-af1c-4e61-a8d7-5bab2a960ced",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可增发代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0290\t发行自定Issuer可增发代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1aceb87c-a86d-49bc-a710-b2c6daccce0e",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可增发代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0300\t发行自定Issuer可增发代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a3305545-51ba-4896-97ea-e6a9eb30450e",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可增发代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "ed9b3b10-4485-4c13-b227-10c38d57b16d",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可增发代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 15,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "2f6f07ad-0236-4c56-a298-b9fd11da0b87",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可增发代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2d7452f5-7fbe-476f-be18-9d021b20a09c",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, 57AFCF2E40073C241C9E340204408B07C3D39D66903F65608F621420CC37011B: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, 57AFCF2E40073C241C9E340204408B07C3D39D66903F65608F621420CC37011B: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "90be78ed-17ad-46cd-bff6-b8b8ba6c8b76",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 18,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1494ca04-5e5d-4f7a-8a25-8c07912e115a",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8b51e877-a51a-412a-8cf1-1ffd7194d4fe",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f5b5a52f-5708-4fcf-b984-31cf50e35c77",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "02f253ea-6219-425b-a476-6cb90190af58",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ff23a28f-8240-4aed-bcc3-b7d985bee1e0",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c95529d1-7392-4aa0-a9f7-f2db61110e20",
                                      "parentUUID": "f7a6a73e-7bfc-42fe-b9ae-6a669f81d148",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "50c9db6a-af1c-4e61-a8d7-5bab2a960ced",
                                    "1aceb87c-a86d-49bc-a710-b2c6daccce0e",
                                    "a3305545-51ba-4896-97ea-e6a9eb30450e",
                                    "2d7452f5-7fbe-476f-be18-9d021b20a09c",
                                    "1494ca04-5e5d-4f7a-8a25-8c07912e115a",
                                    "8b51e877-a51a-412a-8cf1-1ffd7194d4fe",
                                    "f5b5a52f-5708-4fcf-b984-31cf50e35c77",
                                    "02f253ea-6219-425b-a476-6cb90190af58",
                                    "ff23a28f-8240-4aed-bcc3-b7d985bee1e0",
                                    "c95529d1-7392-4aa0-a9f7-f2db61110e20"
                                  ],
                                  "failures": [
                                    "ed9b3b10-4485-4c13-b227-10c38d57b16d",
                                    "2f6f07ad-0236-4c56-a298-b9fd11da0b87",
                                    "90be78ed-17ad-46cd-bff6-b8b8ba6c8b76"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4444,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                  "title": "测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1038,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "d8301b63-bbb8-44af-a37a-e2ccb3c3bb6c",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可增发代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0010\t发起自定Issuer可增发代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 3163,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "54f85c0f-78b8-4751-bcaf-5057c0c6ef61",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "ca2df7ba-b4f4-4927-8626-fd1339e4a6d8",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "de40531f-b1ae-4c0e-8ad7-519976e4a836",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5bcb87ad-882e-42aa-8535-941e42383ef7",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0040\t发起自定Issuer可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8bd47aad-20ce-481f-8180-20abb99475a5",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0050\t发起自定Issuer可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c24ee4e8-64df-47b8-9ff5-7e570903ecbf",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0060\t发起自定Issuer可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b5b67f78-eb9f-4ddd-baf7-33a90f8de805",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可增发代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0070\t发起自定Issuer可增发代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7f8811c3-772e-4ca9-b8c1-f6833982f5a3",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可增发代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8bccd6b4-fbfd-4a98-9ed7-42eb0ef79065",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可增发代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e9ebe1d2-ca3d-4400-b6ea-98ae3766e248",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0090\t发起自定Issuer可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e1506c90-bfe3-4e32-8be9-c4d69a92342e",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0100\t发起自定Issuer可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6172fad5-711f-4861-9390-2e593f21ea9e",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0110\t发起自定Issuer可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "012c965e-68ab-42ec-9457-df49180eafc2",
                                      "parentUUID": "0f6d4676-1f1e-47ea-9e62-37383b90add5",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "54f85c0f-78b8-4751-bcaf-5057c0c6ef61",
                                    "5bcb87ad-882e-42aa-8535-941e42383ef7",
                                    "8bd47aad-20ce-481f-8180-20abb99475a5",
                                    "c24ee4e8-64df-47b8-9ff5-7e570903ecbf",
                                    "b5b67f78-eb9f-4ddd-baf7-33a90f8de805",
                                    "7f8811c3-772e-4ca9-b8c1-f6833982f5a3",
                                    "8bccd6b4-fbfd-4a98-9ed7-42eb0ef79065",
                                    "e9ebe1d2-ca3d-4400-b6ea-98ae3766e248",
                                    "e1506c90-bfe3-4e32-8be9-c4d69a92342e",
                                    "6172fad5-711f-4861-9390-2e593f21ea9e",
                                    "012c965e-68ab-42ec-9457-df49180eafc2"
                                  ],
                                  "failures": [
                                    "ca2df7ba-b4f4-4927-8626-fd1339e4a6d8",
                                    "de40531f-b1ae-4c0e-8ad7-519976e4a836"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3255,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c4d08fda-43ae-4be2-835f-5026b5f8f847",
                                  "title": "测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11103,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "f91d3a12-03d7-4998-8e3e-d8d0c2576463",
                                      "parentUUID": "c4d08fda-43ae-4be2-835f-5026b5f8f847",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 78,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cc0a7c59-48ee-4afc-8e75-b63bea0a4347",
                                      "parentUUID": "c4d08fda-43ae-4be2-835f-5026b5f8f847",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 56,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e55c7ec2-4ce7-4f4c-ab0f-3ab011a7d830",
                                      "parentUUID": "c4d08fda-43ae-4be2-835f-5026b5f8f847",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 77,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "94b18f94-7ed5-4acf-b928-3a3d5e1e6fee",
                                      "parentUUID": "c4d08fda-43ae-4be2-835f-5026b5f8f847",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 80,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "98915034-71c4-4cb3-929a-a55060f3e8e5",
                                      "parentUUID": "c4d08fda-43ae-4be2-835f-5026b5f8f847",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 79,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "84316067-aee6-49cd-9431-5d351858252e",
                                      "parentUUID": "c4d08fda-43ae-4be2-835f-5026b5f8f847",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1879,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "63033319-fb43-4bbb-bb64-e12e1eb95da0",
                                      "parentUUID": "c4d08fda-43ae-4be2-835f-5026b5f8f847",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1809,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "90921f29-f5b5-4ace-baac-a92848292bfd",
                                      "parentUUID": "c4d08fda-43ae-4be2-835f-5026b5f8f847",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "cc0a7c59-48ee-4afc-8e75-b63bea0a4347",
                                    "e55c7ec2-4ce7-4f4c-ab0f-3ab011a7d830",
                                    "94b18f94-7ed5-4acf-b928-3a3d5e1e6fee",
                                    "98915034-71c4-4cb3-929a-a55060f3e8e5",
                                    "84316067-aee6-49cd-9431-5d351858252e",
                                    "63033319-fb43-4bbb-bb64-e12e1eb95da0",
                                    "90921f29-f5b5-4ace-baac-a92848292bfd"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4058,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                  "title": "测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 745,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "c619e8a6-9314-4bbb-b522-98e469f17136",
                                      "parentUUID": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 4163,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "20e9d2d1-0fca-488b-9f71-9f8e8076a4ef",
                                      "parentUUID": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 53,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a08a9f24-c2c3-4770-b621-4b0aad3f6106",
                                      "parentUUID": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 70,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "09919090-d182-4d89-b8bc-f1b77b000658",
                                      "parentUUID": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 72,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e29c3da8-35ef-4668-b48c-6a1b5fbd3020",
                                      "parentUUID": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9504e323-5c4d-42b6-bdcf-81645b0d6213",
                                      "parentUUID": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a0162a3d-6ff1-48ee-bfdf-9f77efd9f155",
                                      "parentUUID": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "c7dee135-59a2-4658-8de8-e9b8f745f912",
                                      "parentUUID": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发代币余额的整数",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cbb95c35-d34c-45cc-acdc-16ef7e3b34b6",
                                      "parentUUID": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "a0be9348-5139-4259-a8fb-9b59d0b8f5fe",
                                      "parentUUID": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "5fa83e96-94e1-42d8-8282-e0ec36f73945",
                                      "parentUUID": "913d6707-ae24-4bd9-97d2-c43eea8a8b15",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "20e9d2d1-0fca-488b-9f71-9f8e8076a4ef",
                                    "a08a9f24-c2c3-4770-b621-4b0aad3f6106",
                                    "09919090-d182-4d89-b8bc-f1b77b000658",
                                    "e29c3da8-35ef-4668-b48c-6a1b5fbd3020",
                                    "9504e323-5c4d-42b6-bdcf-81645b0d6213",
                                    "a0162a3d-6ff1-48ee-bfdf-9f77efd9f155",
                                    "cbb95c35-d34c-45cc-acdc-16ef7e3b34b6"
                                  ],
                                  "failures": [
                                    "c7dee135-59a2-4658-8de8-e9b8f745f912",
                                    "a0be9348-5139-4259-a8fb-9b59d0b8f5fe",
                                    "5fa83e96-94e1-42d8-8282-e0ec36f73945"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4437,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "2e6c51ef-d991-489d-9f3c-2ab49d5feffb",
                                  "title": "测试增发-[币种:5eccabd3] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试增发-[币种:5eccabd3] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 82,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "8301efcb-3120-4533-9481-23683d839be9",
                                      "parentUUID": "2e6c51ef-d991-489d-9f3c-2ab49d5feffb",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试增发-[币种:5eccabd3] [方式:jt_sendTransaction] 0370\t增发可增发的代币自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 4820,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a407ebe7-79d2-41b3-9374-d875e86432e2",
                                      "parentUUID": "2e6c51ef-d991-489d-9f3c-2ab49d5feffb",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "a407ebe7-79d2-41b3-9374-d875e86432e2"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4820,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "057dadc3-7720-4029-b180-05669e2e1968",
                                  "title": "测试销毁-[币种:5eccabd3] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd3] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 240,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "6acefc93-efc7-4f0d-9b9c-95d005cdaba9",
                                      "parentUUID": "057dadc3-7720-4029-b180-05669e2e1968",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd3] [方式:jt_sendTransaction] 0380\t销毁自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cdd4a33b-391d-4055-adb5-c8842ca3d39c",
                                      "parentUUID": "057dadc3-7720-4029-b180-05669e2e1968",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd3] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "641be0b5-1794-428f-8994-aa9506140504",
                                      "parentUUID": "057dadc3-7720-4029-b180-05669e2e1968",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd3] [方式:jt_sendTransaction] 0380\t销毁所有自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f5ef4965-5536-4df5-881e-2259ea0fc2c8",
                                      "parentUUID": "057dadc3-7720-4029-b180-05669e2e1968",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "cdd4a33b-391d-4055-adb5-c8842ca3d39c",
                                    "641be0b5-1794-428f-8994-aa9506140504",
                                    "f5ef4965-5536-4df5-881e-2259ea0fc2c8"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 11,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "a7e71242-f9d8-4cc1-8aa7-60a708781f70",
                              "title": "自定Issuer可销毁代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                  "title": "测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 996,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "662b520e-6d2d-4950-b8a6-30145a9fdeae",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0270\t发行自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 3176,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a914e2f7-045b-459e-89ea-0d2ecc189de7",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0290\t发行自定Issuer可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "da6e56b3-9267-4c93-854b-073821a6d96f",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0300\t发行自定Issuer可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f6569062-ddec-435d-918a-74a175572311",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "e587ce6c-f2e9-4456-93b7-209692fb866c",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "01cb38c3-e807-4a38-b7bd-3e227e727a15",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0f02b230-41c0-49a9-8ac7-f8d51d6f7d5e",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, 0D3DBA0C219B071CC5BBFF95C019C8E0506924407014A7768A4B9A221113DF16: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, 0D3DBA0C219B071CC5BBFF95C019C8E0506924407014A7768A4B9A221113DF16: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "b1976cea-67f6-4040-9ce4-15ee4c2fb1c4",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8d3c225b-c2d2-4ada-95fe-cd09d9c5f14d",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "746ebaa6-ad03-4b32-ac57-a14d3e9a0c6e",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "09714938-3cda-44a7-9d36-e556835a8c72",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "647ef593-b454-47a7-bfed-d7be79e27c52",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4f50f49f-bc0d-4fb7-a980-d531de3b0bf8",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "93414b2f-0c32-4799-8adb-0208ed040766",
                                      "parentUUID": "5214c74e-4aea-4a5c-a41d-49953c26274a",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "a914e2f7-045b-459e-89ea-0d2ecc189de7",
                                    "da6e56b3-9267-4c93-854b-073821a6d96f",
                                    "f6569062-ddec-435d-918a-74a175572311",
                                    "01cb38c3-e807-4a38-b7bd-3e227e727a15",
                                    "0f02b230-41c0-49a9-8ac7-f8d51d6f7d5e",
                                    "8d3c225b-c2d2-4ada-95fe-cd09d9c5f14d",
                                    "746ebaa6-ad03-4b32-ac57-a14d3e9a0c6e",
                                    "09714938-3cda-44a7-9d36-e556835a8c72",
                                    "647ef593-b454-47a7-bfed-d7be79e27c52",
                                    "4f50f49f-bc0d-4fb7-a980-d531de3b0bf8",
                                    "93414b2f-0c32-4799-8adb-0208ed040766"
                                  ],
                                  "failures": [
                                    "e587ce6c-f2e9-4456-93b7-209692fb866c",
                                    "b1976cea-67f6-4040-9ce4-15ee4c2fb1c4"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3232,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "2032227c-f40c-406e-992a-222b57f21b4b",
                                  "title": "测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 923,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "84d58d90-0ae7-44ae-9962-1e21064b8037",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0010\t发起自定Issuer可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 4190,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "30cfd82a-7ddc-4470-b58d-8bfda548acb9",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "ca772381-4b00-4850-ba38-a2305cf7c04f",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "95a9c553-1e9e-4fc8-8253-389fdaa0ee00",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "920e848d-cd66-46d8-9ca7-3755015a79d4",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0040\t发起自定Issuer可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c7f6d1ad-07ca-4a52-ac6a-3f5ae1378dbf",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0050\t发起自定Issuer可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 16,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a017b121-65a5-47ea-bb8c-2bb2c8ff10d8",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0060\t发起自定Issuer可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 17,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "49aae5f7-4fc8-4782-9e97-5be95a882120",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0070\t发起自定Issuer可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b6a36868-8a8a-4b19-8cb7-df39e6b63aa5",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "15de8421-5739-4d65-8826-5af2935f339e",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 15,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "10142065-f34f-4679-834c-887a0a029cc8",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0090\t发起自定Issuer可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f3a894c0-532e-4ceb-b5f0-91b354a99271",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0100\t发起自定Issuer可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5486db9d-33e3-485d-afe0-0ffb73c0e4a7",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0110\t发起自定Issuer可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d78ecb0d-1a83-4ae3-878f-657b888ba987",
                                      "parentUUID": "2032227c-f40c-406e-992a-222b57f21b4b",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "30cfd82a-7ddc-4470-b58d-8bfda548acb9",
                                    "920e848d-cd66-46d8-9ca7-3755015a79d4",
                                    "c7f6d1ad-07ca-4a52-ac6a-3f5ae1378dbf",
                                    "a017b121-65a5-47ea-bb8c-2bb2c8ff10d8",
                                    "49aae5f7-4fc8-4782-9e97-5be95a882120",
                                    "b6a36868-8a8a-4b19-8cb7-df39e6b63aa5",
                                    "15de8421-5739-4d65-8826-5af2935f339e",
                                    "10142065-f34f-4679-834c-887a0a029cc8",
                                    "f3a894c0-532e-4ceb-b5f0-91b354a99271",
                                    "5486db9d-33e3-485d-afe0-0ffb73c0e4a7",
                                    "d78ecb0d-1a83-4ae3-878f-657b888ba987"
                                  ],
                                  "failures": [
                                    "ca772381-4b00-4850-ba38-a2305cf7c04f",
                                    "95a9c553-1e9e-4fc8-8253-389fdaa0ee00"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4349,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "a5a42062-0113-4e90-8f45-4054d34096c9",
                                  "title": "测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11113,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "1528232f-394c-4130-b86c-c5ab475a0651",
                                      "parentUUID": "a5a42062-0113-4e90-8f45-4054d34096c9",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 72,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7377a282-d028-4d8f-b8f8-bf14f44bbc99",
                                      "parentUUID": "a5a42062-0113-4e90-8f45-4054d34096c9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 40,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0b604702-ccf9-4575-80e5-0643a95fb793",
                                      "parentUUID": "a5a42062-0113-4e90-8f45-4054d34096c9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 45,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7925ae7d-7b77-4639-b8ec-09aeb58d0929",
                                      "parentUUID": "a5a42062-0113-4e90-8f45-4054d34096c9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 47,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ec0caccd-e517-4815-88af-c26da0497c5d",
                                      "parentUUID": "a5a42062-0113-4e90-8f45-4054d34096c9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 59,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a9395feb-36ba-43df-b60d-8f51e7c06309",
                                      "parentUUID": "a5a42062-0113-4e90-8f45-4054d34096c9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1824,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5ac4b006-918e-4dbf-a88e-91d84367d79b",
                                      "parentUUID": "a5a42062-0113-4e90-8f45-4054d34096c9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1846,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "79b984da-494d-458d-9836-d8ca559ba382",
                                      "parentUUID": "a5a42062-0113-4e90-8f45-4054d34096c9",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "7377a282-d028-4d8f-b8f8-bf14f44bbc99",
                                    "0b604702-ccf9-4575-80e5-0643a95fb793",
                                    "7925ae7d-7b77-4639-b8ec-09aeb58d0929",
                                    "ec0caccd-e517-4815-88af-c26da0497c5d",
                                    "a9395feb-36ba-43df-b60d-8f51e7c06309",
                                    "5ac4b006-918e-4dbf-a88e-91d84367d79b",
                                    "79b984da-494d-458d-9836-d8ca559ba382"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3933,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                  "title": "测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 760,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "eaebe592-28b4-4729-8ea9-2a99bb62dd9c",
                                      "parentUUID": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 4330,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cd3b55e5-a5a9-470c-9fc8-12c2dccb58e6",
                                      "parentUUID": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 72,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e67261c9-bf2a-461f-b346-c6409e13bdc5",
                                      "parentUUID": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 54,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "68e8c601-11fd-4de2-a595-ed6319a5dff5",
                                      "parentUUID": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 51,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "23b739aa-4da9-45aa-abd0-61387d92b0a0",
                                      "parentUUID": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0a56b741-50ea-4ae6-bab8-f43ddcd0a1d6",
                                      "parentUUID": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2448bac2-8954-4bd0-b91e-7d0e96c65bed",
                                      "parentUUID": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "d391c12a-f30f-43fc-a6a7-ff04324fa109",
                                      "parentUUID": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "236ed1cd-149d-4a09-b99c-53cd7f394616",
                                      "parentUUID": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "18a7904c-7374-4876-ac13-869aff96af7c",
                                      "parentUUID": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "ff359932-e8b0-452a-859d-91d9d3b19384",
                                      "parentUUID": "54d0a49c-9e65-4917-89bd-6ba82098058c",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "cd3b55e5-a5a9-470c-9fc8-12c2dccb58e6",
                                    "e67261c9-bf2a-461f-b346-c6409e13bdc5",
                                    "68e8c601-11fd-4de2-a595-ed6319a5dff5",
                                    "23b739aa-4da9-45aa-abd0-61387d92b0a0",
                                    "0a56b741-50ea-4ae6-bab8-f43ddcd0a1d6",
                                    "2448bac2-8954-4bd0-b91e-7d0e96c65bed",
                                    "236ed1cd-149d-4a09-b99c-53cd7f394616"
                                  ],
                                  "failures": [
                                    "d391c12a-f30f-43fc-a6a7-ff04324fa109",
                                    "18a7904c-7374-4876-ac13-869aff96af7c",
                                    "ff359932-e8b0-452a-859d-91d9d3b19384"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4543,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "f2950931-424b-4156-a4e8-f5397d7745b2",
                                  "title": "测试增发-[币种:5eccabd5] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试增发-[币种:5eccabd5] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 75,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "8dbf5d7b-f66e-411b-a331-d03b7e3b915b",
                                      "parentUUID": "f2950931-424b-4156-a4e8-f5397d7745b2",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试增发-[币种:5eccabd5] [方式:jt_sendTransaction] 0370\t增发可增发的代币自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2d93e54f-234f-4e2d-b166-95ac722f7809",
                                      "parentUUID": "f2950931-424b-4156-a4e8-f5397d7745b2",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "2d93e54f-234f-4e2d-b166-95ac722f7809"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "2be72af0-1606-4eb9-b956-943a57eaddc8",
                                  "title": "测试销毁-[币种:5eccabd5] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd5] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 219,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "06148575-4d79-4f2c-85fa-edd8ff85880a",
                                      "parentUUID": "2be72af0-1606-4eb9-b956-943a57eaddc8",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd5] [方式:jt_sendTransaction] 0380\t销毁自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 4193,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "85cbac1b-18e6-4f32-bc85-b73ca5f038bb",
                                      "parentUUID": "2be72af0-1606-4eb9-b956-943a57eaddc8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd5] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7b894ce0-4e92-4c04-87dc-a51fb7a109ed",
                                      "parentUUID": "2be72af0-1606-4eb9-b956-943a57eaddc8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd5] [方式:jt_sendTransaction] 0380\t销毁所有自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "a3751c6a-c5c3-462f-8d88-f7ac8d4d1354",
                                      "parentUUID": "2be72af0-1606-4eb9-b956-943a57eaddc8",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "85cbac1b-18e6-4f32-bc85-b73ca5f038bb",
                                    "7b894ce0-4e92-4c04-87dc-a51fb7a109ed"
                                  ],
                                  "failures": [
                                    "a3751c6a-c5c3-462f-8d88-f7ac8d4d1354"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4209,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "072c7817-eed8-422c-a180-04a09e0c1841",
                              "title": "自定Issuer可增发可销毁代币测试：jt_sendTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                  "title": "测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 860,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "d5e618ef-363f-4937-a69c-693ca801715a",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0270\t发行自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 4145,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6aaf4ace-6c90-4636-b07d-6d6b697d6f39",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可增发可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0290\t发行自定Issuer可增发可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c0790b33-2ae9-4f46-acae-af0b55d4010b",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可增发可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0300\t发行自定Issuer可增发可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6d2a42f0-2b14-49a6-b50d-7ca2d9290581",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可增发可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "3dd8133f-7a06-4626-8acf-b1aaf252ef04",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0310\t发行自定Issuer可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "f03ca18d-aad9-4cbd-b787-4c04819db504",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4d3ab008-bdab-400b-8f0d-ae68929e1f7c",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, BB323080A11E0516DD4E58202129E2007E3016EA38E97CD8383C98F2CD7AC5D3: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction by jJQfV3pQjDYVKmz2shDbK3pkRfYMUCohLB, BB323080A11E0516DD4E58202129E2007E3016EA38E97CD8383C98F2CD7AC5D3: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "2d4af969-f7b7-49a9-8f2d-a4b167309db5",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "69a6a400-9f5a-4ecb-bc46-e86eea141380",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "219029a3-9ba4-4880-b6fb-8cce3c96d645",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7d2b6d12-4d1e-4fea-848b-4e32fa774d97",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4fff9fc0-946d-4cd0-a052-49804c0f62d3",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "26893433-c28a-4a39-a952-55f57e3b4750",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "548da887-a1f3-4646-960a-cd62496cc81a",
                                      "parentUUID": "07c978a9-4625-4218-8d2a-53a7f95a7c51",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "6aaf4ace-6c90-4636-b07d-6d6b697d6f39",
                                    "c0790b33-2ae9-4f46-acae-af0b55d4010b",
                                    "6d2a42f0-2b14-49a6-b50d-7ca2d9290581",
                                    "4d3ab008-bdab-400b-8f0d-ae68929e1f7c",
                                    "69a6a400-9f5a-4ecb-bc46-e86eea141380",
                                    "219029a3-9ba4-4880-b6fb-8cce3c96d645",
                                    "7d2b6d12-4d1e-4fea-848b-4e32fa774d97",
                                    "4fff9fc0-946d-4cd0-a052-49804c0f62d3",
                                    "26893433-c28a-4a39-a952-55f57e3b4750",
                                    "548da887-a1f3-4646-960a-cd62496cc81a"
                                  ],
                                  "failures": [
                                    "3dd8133f-7a06-4626-8acf-b1aaf252ef04",
                                    "f03ca18d-aad9-4cbd-b787-4c04819db504",
                                    "2d4af969-f7b7-49a9-8f2d-a4b167309db5"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4184,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                  "title": "测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 690,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "b43e809a-4dd3-42d7-b0d0-d0a8a33ec913",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可增发可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0010\t发起自定Issuer可增发可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 4150,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f4615ad8-2bdd-44bf-b8d8-ee7e21a57075",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "e7c744d6-030b-4571-8a00-a94aeb33b28d",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "93b969a9-3966-4596-a326-3c8ecfe67c46",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "70bb36e9-436d-4dca-b417-737f2645672a",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0040\t发起自定Issuer可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d77c45c3-cca1-413f-a643-c35b7e1c2570",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0050\t发起自定Issuer可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c3a6873e-001b-43ab-beed-4eeb0a897bd8",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0060\t发起自定Issuer可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4b3a5bac-c7a8-4b03-bea8-bb63cc97472e",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可增发可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0070\t发起自定Issuer可增发可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1b46e139-f2d2-4b9f-92a6-757979c6919d",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "54d393e1-d991-4f59-9148-aef669548707",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d390977e-5f14-4135-a526-8300205cc8a8",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0090\t发起自定Issuer可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a70a30d3-e432-4ac3-8dab-196bacb94fab",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0100\t发起自定Issuer可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "31e1d5e0-6e61-4ebc-84a1-2fea594ecb32",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0110\t发起自定Issuer可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "101574f7-5975-4ffb-b18e-3d38814ff6ac",
                                      "parentUUID": "32dd7494-4a16-4c64-915d-8618298c2a0f",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "f4615ad8-2bdd-44bf-b8d8-ee7e21a57075",
                                    "70bb36e9-436d-4dca-b417-737f2645672a",
                                    "d77c45c3-cca1-413f-a643-c35b7e1c2570",
                                    "c3a6873e-001b-43ab-beed-4eeb0a897bd8",
                                    "4b3a5bac-c7a8-4b03-bea8-bb63cc97472e",
                                    "1b46e139-f2d2-4b9f-92a6-757979c6919d",
                                    "54d393e1-d991-4f59-9148-aef669548707",
                                    "d390977e-5f14-4135-a526-8300205cc8a8",
                                    "a70a30d3-e432-4ac3-8dab-196bacb94fab",
                                    "31e1d5e0-6e61-4ebc-84a1-2fea594ecb32",
                                    "101574f7-5975-4ffb-b18e-3d38814ff6ac"
                                  ],
                                  "failures": [
                                    "e7c744d6-030b-4571-8a00-a94aeb33b28d",
                                    "93b969a9-3966-4596-a326-3c8ecfe67c46"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4178,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "f6706ebe-9ba2-4f3b-a06c-27b026e22a35",
                                  "title": "测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11398,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "f9d52444-1122-456f-a6a5-7f2ceda2cf8b",
                                      "parentUUID": "f6706ebe-9ba2-4f3b-a06c-27b026e22a35",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 51,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "02228017-ff32-4719-9127-dd2d9845dfb3",
                                      "parentUUID": "f6706ebe-9ba2-4f3b-a06c-27b026e22a35",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 42,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9a5fcb94-ee4f-45f4-8fb2-b91b3a853233",
                                      "parentUUID": "f6706ebe-9ba2-4f3b-a06c-27b026e22a35",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 39,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ecd2f5c9-97de-4e15-9c7d-6deff79e6458",
                                      "parentUUID": "f6706ebe-9ba2-4f3b-a06c-27b026e22a35",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 45,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ab86baba-5eb0-4daf-a837-d07a02dbaa87",
                                      "parentUUID": "f6706ebe-9ba2-4f3b-a06c-27b026e22a35",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 40,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e75f8fa2-2a4d-447f-bd7c-2b6f88a48e82",
                                      "parentUUID": "f6706ebe-9ba2-4f3b-a06c-27b026e22a35",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 2228,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "32a75fd9-d69f-4056-b1b3-2dd88025276e",
                                      "parentUUID": "f6706ebe-9ba2-4f3b-a06c-27b026e22a35",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 2171,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3c36b6bd-b7e9-4607-a095-26f5fa950282",
                                      "parentUUID": "f6706ebe-9ba2-4f3b-a06c-27b026e22a35",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "02228017-ff32-4719-9127-dd2d9845dfb3",
                                    "9a5fcb94-ee4f-45f4-8fb2-b91b3a853233",
                                    "ecd2f5c9-97de-4e15-9c7d-6deff79e6458",
                                    "ab86baba-5eb0-4daf-a837-d07a02dbaa87",
                                    "e75f8fa2-2a4d-447f-bd7c-2b6f88a48e82",
                                    "32a75fd9-d69f-4056-b1b3-2dd88025276e",
                                    "3c36b6bd-b7e9-4607-a095-26f5fa950282"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4616,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                  "title": "测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 674,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "962b4658-f1f5-44b6-b540-aeb50649ae4b",
                                      "parentUUID": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 3128,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "126e8f6f-a113-4bbb-8e35-0c109e909f8b",
                                      "parentUUID": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 56,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "54d10e35-458b-4e7e-bbab-f3d0585a6516",
                                      "parentUUID": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 37,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "900e1e46-6e04-4902-9670-68f7cc408641",
                                      "parentUUID": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 45,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "96ae9666-6220-4841-a08a-7b9aa42f597b",
                                      "parentUUID": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9b2250cb-3945-46d1-9adc-eebf1e94af07",
                                      "parentUUID": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0972c9ad-1c4f-421d-bfd8-423fefd874fc",
                                      "parentUUID": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "f628b9c4-9ba7-461a-a638-162cf6a195b1",
                                      "parentUUID": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1d395763-f09b-4286-a5bc-2cd1b0b78f2b",
                                      "parentUUID": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "9c659ffa-19b1-4d31-b1f0-db4dcf7d6760",
                                      "parentUUID": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_sendTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "e716027d-ef06-48da-8c5f-568309521e43",
                                      "parentUUID": "ba1a86d1-0f88-4d7e-ae9b-b901ac924822",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "126e8f6f-a113-4bbb-8e35-0c109e909f8b",
                                    "54d10e35-458b-4e7e-bbab-f3d0585a6516",
                                    "900e1e46-6e04-4902-9670-68f7cc408641",
                                    "96ae9666-6220-4841-a08a-7b9aa42f597b",
                                    "9b2250cb-3945-46d1-9adc-eebf1e94af07",
                                    "0972c9ad-1c4f-421d-bfd8-423fefd874fc",
                                    "1d395763-f09b-4286-a5bc-2cd1b0b78f2b"
                                  ],
                                  "failures": [
                                    "f628b9c4-9ba7-461a-a638-162cf6a195b1",
                                    "9c659ffa-19b1-4d31-b1f0-db4dcf7d6760",
                                    "e716027d-ef06-48da-8c5f-568309521e43"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3285,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "13688869-760a-4787-8a70-5d7079429560",
                                  "title": "测试增发-[币种:5eccabd7] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试增发-[币种:5eccabd7] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 95,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "664ceed1-658f-4a27-9d5e-2729ad682bf6",
                                      "parentUUID": "13688869-760a-4787-8a70-5d7079429560",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试增发-[币种:5eccabd7] [方式:jt_sendTransaction] 0370\t增发可增发的代币自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 5233,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9ca8a326-8eb7-419f-9b66-209de9d7aac6",
                                      "parentUUID": "13688869-760a-4787-8a70-5d7079429560",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "9ca8a326-8eb7-419f-9b66-209de9d7aac6"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5233,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "d438fa7d-40d5-4d71-a199-3e069e10decc",
                                  "title": "测试销毁-[币种:5eccabd7] [方式:jt_sendTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd7] [方式:jt_sendTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 253,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "5c70b7a1-fbcc-4765-b454-dcd100258541",
                                      "parentUUID": "d438fa7d-40d5-4d71-a199-3e069e10decc",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd7] [方式:jt_sendTransaction] 0380\t销毁自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 4180,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "14bd4429-76df-4fe6-993d-6802eb03c426",
                                      "parentUUID": "d438fa7d-40d5-4d71-a199-3e069e10decc",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd7] [方式:jt_sendTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ccfdf691-1e4d-4c23-81bc-2e36c10d0c07",
                                      "parentUUID": "d438fa7d-40d5-4d71-a199-3e069e10decc",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_sendTransaction 自定Issuer可增发可销毁代币测试：jt_sendTransaction 测试销毁-[币种:5eccabd7] [方式:jt_sendTransaction] 0380\t销毁所有自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSendTx [as checkFunction] (test\\framework\\framework.js:372:25)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "f2f7095d-0435-407b-84a7-8b054a0c3130",
                                      "parentUUID": "d438fa7d-40d5-4d71-a199-3e069e10decc",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "14bd4429-76df-4fe6-993d-6802eb03c426",
                                    "ccfdf691-1e4d-4c23-81bc-2e36c10d0c07"
                                  ],
                                  "failures": [
                                    "f2f7095d-0435-407b-84a7-8b054a0c3130"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4186,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            }
                          ],
                          "passes": [],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 0,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "a69383c8-7d36-4cb7-8303-8ee8453c873b",
                          "title": "代币测试：jt_signTransaction",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [],
                          "suites": [
                            {
                              "uuid": "4a7c74be-46da-42ae-a7b3-e84fcbfff22e",
                              "title": "标准一次性代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                  "title": "测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 854,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "a8293aed-eda9-4e9d-93b7-bb168818c7b7",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0270\t发行标准一次性代币",
                                      "timedOut": false,
                                      "duration": 4602,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a56f5dca-b41c-4542-85bb-57f5aa9f5733",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准一次性代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0290\t发行标准一次性代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bdfb8106-6cff-4c59-8e87-8b7049758684",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准一次性代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0300\t发行标准一次性代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2c703891-3993-4fd7-a95a-4b8f1f300001",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准一次性代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0310\t发行标准一次性代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "b34e5f43-9b9c-47d4-924b-0e8aa3f2d0b4",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准一次性代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0310\t发行标准一次性代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "33305705-275f-4279-87b5-10cb8c744733",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准一次性代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0320\t发行标准一次性代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "35f9c9b6-68b0-46f0-b4b3-aed31d3dbdb6",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0320\t发行标准一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "dfc19a38-631b-4ef7-be2f-409d2bb3a087",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0330\t发行标准一次性代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5a1068d7-8b24-488f-9cc4-2e55cce5a32c",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0330\t发行标准一次性代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5ec8c071-c2c1-4afa-9e69-1200b05ada29",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准一次性代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0330\t发行标准一次性代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "03c86e98-ad53-4461-92c7-d41dd38710e1",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0908096b-6f4f-4431-962d-094533a2e48b",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "25c3b5c1-ac48-456a-8a79-eeb89c429c4b",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准一次性代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试创建token-[币种:标准一次性代币] [方式:jt_signTransaction] 0340\t发行标准一次性代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b581fc7f-5efe-48cb-aada-150f178d1b0b",
                                      "parentUUID": "45f50ead-7e9e-4451-9d9e-fbbc84904690",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "a56f5dca-b41c-4542-85bb-57f5aa9f5733",
                                    "bdfb8106-6cff-4c59-8e87-8b7049758684",
                                    "2c703891-3993-4fd7-a95a-4b8f1f300001",
                                    "33305705-275f-4279-87b5-10cb8c744733",
                                    "35f9c9b6-68b0-46f0-b4b3-aed31d3dbdb6",
                                    "dfc19a38-631b-4ef7-be2f-409d2bb3a087",
                                    "5a1068d7-8b24-488f-9cc4-2e55cce5a32c",
                                    "5ec8c071-c2c1-4afa-9e69-1200b05ada29",
                                    "03c86e98-ad53-4461-92c7-d41dd38710e1",
                                    "0908096b-6f4f-4431-962d-094533a2e48b",
                                    "25c3b5c1-ac48-456a-8a79-eeb89c429c4b",
                                    "b581fc7f-5efe-48cb-aada-150f178d1b0b"
                                  ],
                                  "failures": [
                                    "b34e5f43-9b9c-47d4-924b-0e8aa3f2d0b4"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4680,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                  "title": "测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 780,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "edeef49d-3b5e-43de-922a-e1bc08079a7b",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准一次性代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0010\t发起标准一次性代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 4163,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "acaa8b69-9c56-49ae-985f-2d9d5e459c3f",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0030\t发起标准一次性代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "a82fa41a-a6e7-4dac-8af2-1dea31703c7c",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0030\t发起标准一次性代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "14e4a901-21b6-4203-8909-66968fcbdf35",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准一次性代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0030\t发起标准一次性代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "58cdec69-f2fa-461f-a031-09c76e71d923",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0040\t发起标准一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5caff0ec-f103-4eed-a697-80ead7465aca",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0050\t发起标准一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8304d932-9821-46ca-8b03-1e0cf4cf0b9d",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0060\t发起标准一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5973b83c-289b-4501-b5b4-0d514de6082d",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准一次性代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0070\t发起标准一次性代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e6262016-d19e-45aa-938f-b455e0f6169e",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准一次性代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0080\t发起标准一次性代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "92c75ec1-3368-40c7-98ae-aee7625170f1",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准一次性代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0080\t发起标准一次性代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0c78256c-b4d3-425f-b9ba-638c8b51208c",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0090\t发起标准一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fcd38571-5f58-4ee7-9cd0-9e8d9e7bf2b0",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0100\t发起标准一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7dd5e00b-7db5-4399-b8af-d8a83360c568",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试基本交易-[币种:标准一次性代币] [方式:jt_signTransaction] 0110\t发起标准一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "74fbcffb-3f7e-4499-a9f6-f093b383929b",
                                      "parentUUID": "5b704d36-dccf-4ecb-a87c-973e25c64899",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "acaa8b69-9c56-49ae-985f-2d9d5e459c3f",
                                    "58cdec69-f2fa-461f-a031-09c76e71d923",
                                    "5caff0ec-f103-4eed-a697-80ead7465aca",
                                    "8304d932-9821-46ca-8b03-1e0cf4cf0b9d",
                                    "5973b83c-289b-4501-b5b4-0d514de6082d",
                                    "e6262016-d19e-45aa-938f-b455e0f6169e",
                                    "92c75ec1-3368-40c7-98ae-aee7625170f1",
                                    "0c78256c-b4d3-425f-b9ba-638c8b51208c",
                                    "fcd38571-5f58-4ee7-9cd0-9e8d9e7bf2b0",
                                    "7dd5e00b-7db5-4399-b8af-d8a83360c568",
                                    "74fbcffb-3f7e-4499-a9f6-f093b383929b"
                                  ],
                                  "failures": [
                                    "a82fa41a-a6e7-4dac-8af2-1dea31703c7c",
                                    "14e4a901-21b6-4203-8909-66968fcbdf35"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4196,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "67c2ab3d-69a2-4f70-877e-1e9bb12507e2",
                                  "title": "测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11951,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "15b8707e-bed7-433d-9cbe-90dc4c481f74",
                                      "parentUUID": "67c2ab3d-69a2-4f70-877e-1e9bb12507e2",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 101,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d4f58277-8118-4485-b94c-11044959a288",
                                      "parentUUID": "67c2ab3d-69a2-4f70-877e-1e9bb12507e2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 104,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3fd55677-129a-47e0-b2a6-8467013939a4",
                                      "parentUUID": "67c2ab3d-69a2-4f70-877e-1e9bb12507e2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 93,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f2baafe8-99d8-4641-b6c9-15fda1ee1458",
                                      "parentUUID": "67c2ab3d-69a2-4f70-877e-1e9bb12507e2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 108,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a906bbe6-e850-4343-aaac-d36bd332ad2f",
                                      "parentUUID": "67c2ab3d-69a2-4f70-877e-1e9bb12507e2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 93,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a4acfa15-14e4-4877-81f7-bd1241ea496a",
                                      "parentUUID": "67c2ab3d-69a2-4f70-877e-1e9bb12507e2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1419,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "2632d8bb-0ba0-44ec-9d45-ee06901b3f77",
                                      "parentUUID": "67c2ab3d-69a2-4f70-877e-1e9bb12507e2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易memo-[币种:标准一次性代币] [方式:jt_signTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1410,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "e3bb4117-4a37-4bc3-b62b-db5717f21586",
                                      "parentUUID": "67c2ab3d-69a2-4f70-877e-1e9bb12507e2",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "d4f58277-8118-4485-b94c-11044959a288",
                                    "3fd55677-129a-47e0-b2a6-8467013939a4",
                                    "f2baafe8-99d8-4641-b6c9-15fda1ee1458",
                                    "a906bbe6-e850-4343-aaac-d36bd332ad2f",
                                    "a4acfa15-14e4-4877-81f7-bd1241ea496a"
                                  ],
                                  "failures": [
                                    "2632d8bb-0ba0-44ec-9d45-ee06901b3f77",
                                    "e3bb4117-4a37-4bc3-b62b-db5717f21586"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3328,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                  "title": "测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 781,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "ab8f89d4-bb4e-4581-a160-c02b118ea0f4",
                                      "parentUUID": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 4211,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "aaecca12-7812-4910-93c4-545074861dce",
                                      "parentUUID": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 85,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7f4450ed-7580-4e3b-8952-a10af5729dac",
                                      "parentUUID": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 77,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "eb1c0707-998e-40b9-bfa9-27b4d33f3eba",
                                      "parentUUID": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 78,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "60a48f95-f7be-4c88-8ba9-5828fd9e2626",
                                      "parentUUID": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d87ed5f9-62e1-498f-ad3c-d9078b8d8a9d",
                                      "parentUUID": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "50c28f70-b6e4-4632-840f-aa60937fde83",
                                      "parentUUID": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "615c6dbc-57ac-46ce-a91d-1d058ecb4f7b",
                                      "parentUUID": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准一次性代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准一次性代币余额的整数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8fe97037-5045-4d8e-b451-b8d266bea5c8",
                                      "parentUUID": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "618c9adf-5878-4c0a-a02f-b287150833ad",
                                      "parentUUID": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试交易Fee-[币种:标准一次性代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "863061e3-78e1-4d34-a4c9-424df26c8ce9",
                                      "parentUUID": "174ee11c-faa9-42a5-a14f-c0fcec3ccfda",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "aaecca12-7812-4910-93c4-545074861dce",
                                    "7f4450ed-7580-4e3b-8952-a10af5729dac",
                                    "eb1c0707-998e-40b9-bfa9-27b4d33f3eba",
                                    "60a48f95-f7be-4c88-8ba9-5828fd9e2626",
                                    "d87ed5f9-62e1-498f-ad3c-d9078b8d8a9d",
                                    "50c28f70-b6e4-4632-840f-aa60937fde83",
                                    "8fe97037-5045-4d8e-b451-b8d266bea5c8"
                                  ],
                                  "failures": [
                                    "615c6dbc-57ac-46ce-a91d-1d058ecb4f7b",
                                    "618c9adf-5878-4c0a-a02f-b287150833ad",
                                    "863061e3-78e1-4d34-a4c9-424df26c8ce9"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4467,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "4a716e00-df44-4aa3-9ead-d2746961c855",
                                  "title": "测试增发-[币种:5eccabd9] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试增发-[币种:5eccabd9] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 92,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "c9855138-bda6-4977-aa47-d4b52cd46171",
                                      "parentUUID": "4a716e00-df44-4aa3-9ead-d2746961c855",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试增发-[币种:5eccabd9] [方式:jt_signTransaction] 0370\t增发可增发的代币标准一次性代币",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d14be25e-2767-4e35-82be-118b7ade1095",
                                      "parentUUID": "4a716e00-df44-4aa3-9ead-d2746961c855",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "d14be25e-2767-4e35-82be-118b7ade1095"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "e08d805e-4890-4bf2-ba0a-7b6fd66158b5",
                                  "title": "测试销毁-[币种:5eccabd9] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试销毁-[币种:5eccabd9] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 297,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "319ee54c-885c-40f4-9689-8f46779754ea",
                                      "parentUUID": "e08d805e-4890-4bf2-ba0a-7b6fd66158b5",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试销毁-[币种:5eccabd9] [方式:jt_signTransaction] 0380\t销毁标准一次性代币",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "21a162b9-55fc-4d3a-9912-03b451e411b0",
                                      "parentUUID": "e08d805e-4890-4bf2-ba0a-7b6fd66158b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试销毁-[币种:5eccabd9] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准一次性代币",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1371a205-1eea-44c5-ac7c-439353679bdc",
                                      "parentUUID": "e08d805e-4890-4bf2-ba0a-7b6fd66158b5",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准一次性代币测试：jt_signTransaction 测试销毁-[币种:5eccabd9] [方式:jt_signTransaction] 0380\t销毁所有标准一次性代币",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8213d54d-34c7-468b-817d-1cb2e54e690a",
                                      "parentUUID": "e08d805e-4890-4bf2-ba0a-7b6fd66158b5",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "21a162b9-55fc-4d3a-9912-03b451e411b0",
                                    "1371a205-1eea-44c5-ac7c-439353679bdc",
                                    "8213d54d-34c7-468b-817d-1cb2e54e690a"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 30,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "edaca7a7-affc-487c-a9cc-f96a30a23746",
                              "title": "标准可增发代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                  "title": "测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 790,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "041a07c5-49ca-458e-93fb-6f810fa6dedd",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0270\t发行标准可增发代币",
                                      "timedOut": false,
                                      "duration": 3168,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e3d5e0f2-b3d3-4055-860f-1b87b59e164d",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可增发代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0290\t发行标准可增发代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9a0e6d0d-3cea-4470-b6d1-66658858622f",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可增发代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0300\t发行标准可增发代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1f8c6144-39de-492f-8d74-9cfd371639f9",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0310\t发行标准可增发代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "3ea9c41f-7d85-424f-844b-0fc5f91ee4a1",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0310\t发行标准可增发代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:582:29)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "5cf0a8be-f44f-4826-9ad0-9d76e020077d",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0320\t发行标准可增发代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7ba89c29-5457-488f-9126-59ab27f8fb3f",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0320\t发行标准可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction blob 120001228001000024000008ec68400000000000000a6cd6e316a9e9a40e8000000000000035646639636466300000000000000000000000000000000000000000000000000000732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af774473045022100c4a4dcf0a27036c1f0fde2d0e3bba559c1e816b89e4cd4c0c86970eb7bb346770220237ce0e5d450a502c7dd8e69bdb7138d9cb4b76120aef61e42f3cf0e2afabe978114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363433041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction blob 120001228001000024000008ec68400000000000000a6cd6e316a9e9a40e8000000000000035646639636466300000000000000000000000000000000000000000000000000000732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af774473045022100c4a4dcf0a27036c1f0fde2d0e3bba559c1e816b89e4cd4c0c86970eb7bb346770220237ce0e5d450a502c7dd8e69bdb7138d9cb4b76120aef61e42f3cf0e2afabe978114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363433041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:582:29)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "51f65615-8f2b-4e24-a6e9-277e96e6a777",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0330\t发行标准可增发代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b4d3be5c-a690-470c-99e6-c64ef6238c8f",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0330\t发行标准可增发代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "279529c7-5ee4-4559-95b8-6fbe722fdff8",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0330\t发行标准可增发代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4315d383-9f87-45e0-88dc-f78eb297cb3e",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cf8a1bf2-974a-4ecb-bc13-f0a76c8d1aab",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5035e8db-8a2a-4595-b566-273d545e46e6",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试创建token-[币种:标准可增发代币] [方式:jt_signTransaction] 0340\t发行标准可增发代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ece721d9-75f4-4d69-a617-38c331139ed0",
                                      "parentUUID": "164846cb-ca31-4853-89b2-5f3c81449afa",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "e3d5e0f2-b3d3-4055-860f-1b87b59e164d",
                                    "9a0e6d0d-3cea-4470-b6d1-66658858622f",
                                    "1f8c6144-39de-492f-8d74-9cfd371639f9",
                                    "7ba89c29-5457-488f-9126-59ab27f8fb3f",
                                    "b4d3be5c-a690-470c-99e6-c64ef6238c8f",
                                    "279529c7-5ee4-4559-95b8-6fbe722fdff8",
                                    "4315d383-9f87-45e0-88dc-f78eb297cb3e",
                                    "cf8a1bf2-974a-4ecb-bc13-f0a76c8d1aab",
                                    "5035e8db-8a2a-4595-b566-273d545e46e6",
                                    "ece721d9-75f4-4d69-a617-38c331139ed0"
                                  ],
                                  "failures": [
                                    "3ea9c41f-7d85-424f-844b-0fc5f91ee4a1",
                                    "5cf0a8be-f44f-4826-9ad0-9d76e020077d",
                                    "51f65615-8f2b-4e24-a6e9-277e96e6a777"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3201,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "468a4ced-0066-4197-a534-8531ec310aab",
                                  "title": "测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 856,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "d92aed17-ec38-449d-9f8e-2de54d7c4d62",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可增发代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0010\t发起标准可增发代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 4191,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0f1ed6f6-93ef-474f-a5cf-1ea8c8722ba6",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0030\t发起标准可增发代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "c3e75563-5ce5-4571-8b87-a1bf9f329ff1",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0030\t发起标准可增发代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "cf0958dd-f1ea-4157-a9ad-dc227848b258",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0030\t发起标准可增发代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cce9d198-c649-4c1a-8a82-454e462fd7d3",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0040\t发起标准可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7b0cebf8-9851-4c12-b1d1-4a89a9754524",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0050\t发起标准可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bef855f1-e0bd-4450-839b-2118b12a4a2f",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0060\t发起标准可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ac8a22b9-a0fa-4169-802e-159decbbf55b",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可增发代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0070\t发起标准可增发代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f6e5c539-6c80-46dd-b2a9-0f43cc61d858",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0080\t发起标准可增发代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3ae2d24c-1871-4fd8-b6ba-ead07ecce68c",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0080\t发起标准可增发代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "39518423-115b-4bfa-a3a1-28afada74632",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0090\t发起标准可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4840ca42-3aa4-4387-b5a4-4deedef2031b",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0100\t发起标准可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7abd3d30-6900-45b9-be72-cccae6b4d088",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发代币] [方式:jt_signTransaction] 0110\t发起标准可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "877d1be0-a412-4ebe-9b8f-c55f39148cca",
                                      "parentUUID": "468a4ced-0066-4197-a534-8531ec310aab",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "0f1ed6f6-93ef-474f-a5cf-1ea8c8722ba6",
                                    "cce9d198-c649-4c1a-8a82-454e462fd7d3",
                                    "7b0cebf8-9851-4c12-b1d1-4a89a9754524",
                                    "bef855f1-e0bd-4450-839b-2118b12a4a2f",
                                    "ac8a22b9-a0fa-4169-802e-159decbbf55b",
                                    "f6e5c539-6c80-46dd-b2a9-0f43cc61d858",
                                    "3ae2d24c-1871-4fd8-b6ba-ead07ecce68c",
                                    "39518423-115b-4bfa-a3a1-28afada74632",
                                    "4840ca42-3aa4-4387-b5a4-4deedef2031b",
                                    "7abd3d30-6900-45b9-be72-cccae6b4d088",
                                    "877d1be0-a412-4ebe-9b8f-c55f39148cca"
                                  ],
                                  "failures": [
                                    "c3e75563-5ce5-4571-8b87-a1bf9f329ff1",
                                    "cf0958dd-f1ea-4157-a9ad-dc227848b258"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4266,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "8f981834-0850-4cb1-bcda-baa347b68088",
                                  "title": "测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 9609,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "01b67326-e761-489b-bc5f-4f117e18ce00",
                                      "parentUUID": "8f981834-0850-4cb1-bcda-baa347b68088",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 97,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "403cbd91-b1f8-4f9b-b9a2-3b12954a7856",
                                      "parentUUID": "8f981834-0850-4cb1-bcda-baa347b68088",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 70,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1f397be7-1070-4244-b59d-854be3c79143",
                                      "parentUUID": "8f981834-0850-4cb1-bcda-baa347b68088",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 76,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "84d5cf31-7a9d-4cfa-bac9-599bb8ba7593",
                                      "parentUUID": "8f981834-0850-4cb1-bcda-baa347b68088",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 69,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "db8b1229-5d6b-4399-9359-6189d24bc7b4",
                                      "parentUUID": "8f981834-0850-4cb1-bcda-baa347b68088",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 90,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1aa42305-1b12-416f-b713-94ff10e1cfe4",
                                      "parentUUID": "8f981834-0850-4cb1-bcda-baa347b68088",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1461,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "d61cd428-3786-4296-8150-a759acbafd30",
                                      "parentUUID": "8f981834-0850-4cb1-bcda-baa347b68088",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发代币] [方式:jt_signTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1413,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "5881af90-6013-46fa-bce8-a0b120b3e624",
                                      "parentUUID": "8f981834-0850-4cb1-bcda-baa347b68088",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "403cbd91-b1f8-4f9b-b9a2-3b12954a7856",
                                    "1f397be7-1070-4244-b59d-854be3c79143",
                                    "84d5cf31-7a9d-4cfa-bac9-599bb8ba7593",
                                    "db8b1229-5d6b-4399-9359-6189d24bc7b4",
                                    "1aa42305-1b12-416f-b713-94ff10e1cfe4"
                                  ],
                                  "failures": [
                                    "d61cd428-3786-4296-8150-a759acbafd30",
                                    "5881af90-6013-46fa-bce8-a0b120b3e624"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3276,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                  "title": "测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 945,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "f41c1516-28f1-4293-825e-657a6833ff78",
                                      "parentUUID": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 1123,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0b066bc2-8588-4f8f-811e-a5ddf9634cba",
                                      "parentUUID": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 81,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a1136b07-e037-4faf-9d64-108c26de0552",
                                      "parentUUID": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 70,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "840fdf4d-5fc7-4b00-9764-36dff7efbb1e",
                                      "parentUUID": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 77,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1f229623-2cb6-46bf-989a-cde7357f1b93",
                                      "parentUUID": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "77b4cb60-0b27-4e55-818a-4fb7c508667c",
                                      "parentUUID": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "378a61ac-6505-42c9-b2d4-e58dae768790",
                                      "parentUUID": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "edc95d7e-c8a9-4939-abeb-f2a832bf53be",
                                      "parentUUID": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发代币余额的整数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e55278f8-a44c-43e3-a187-4f4f48b5a538",
                                      "parentUUID": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "f8499950-80c5-4480-a2b6-cfc2785cefd8",
                                      "parentUUID": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "852337ec-60db-4e94-8a2b-9cefa0647ca0",
                                      "parentUUID": "de0c6a50-adf7-4ea8-a7c9-2345b256276b",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "0b066bc2-8588-4f8f-811e-a5ddf9634cba",
                                    "a1136b07-e037-4faf-9d64-108c26de0552",
                                    "840fdf4d-5fc7-4b00-9764-36dff7efbb1e",
                                    "1f229623-2cb6-46bf-989a-cde7357f1b93",
                                    "77b4cb60-0b27-4e55-818a-4fb7c508667c",
                                    "378a61ac-6505-42c9-b2d4-e58dae768790",
                                    "e55278f8-a44c-43e3-a187-4f4f48b5a538"
                                  ],
                                  "failures": [
                                    "edc95d7e-c8a9-4939-abeb-f2a832bf53be",
                                    "f8499950-80c5-4480-a2b6-cfc2785cefd8",
                                    "852337ec-60db-4e94-8a2b-9cefa0647ca0"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 1364,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "1a035c2f-945f-47cd-b7cd-333085faf974",
                                  "title": "测试增发-[币种:5eccabdb] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试增发-[币种:5eccabdb] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 95,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "2349eb16-5860-4940-b29c-5db2f553f62c",
                                      "parentUUID": "1a035c2f-945f-47cd-b7cd-333085faf974",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试增发-[币种:5eccabdb] [方式:jt_signTransaction] 0370\t增发可增发的代币标准可增发代币",
                                      "timedOut": false,
                                      "duration": 4213,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6ac9133b-6900-41ac-97cf-565cd4d2bb1d",
                                      "parentUUID": "1a035c2f-945f-47cd-b7cd-333085faf974",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "6ac9133b-6900-41ac-97cf-565cd4d2bb1d"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4213,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "d9585441-2c44-4e3d-8f8e-b7db18ead391",
                                  "title": "测试销毁-[币种:5eccabdb] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试销毁-[币种:5eccabdb] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 358,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "6a17b547-79e2-41de-b55f-7604d694483f",
                                      "parentUUID": "d9585441-2c44-4e3d-8f8e-b7db18ead391",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试销毁-[币种:5eccabdb] [方式:jt_signTransaction] 0380\t销毁标准可增发代币",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9cc5b9d6-4619-4312-b94d-5096dd229724",
                                      "parentUUID": "d9585441-2c44-4e3d-8f8e-b7db18ead391",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试销毁-[币种:5eccabdb] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可增发代币",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6e8c4b50-9d9b-4c21-8add-b839d7491e7e",
                                      "parentUUID": "d9585441-2c44-4e3d-8f8e-b7db18ead391",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发代币测试：jt_signTransaction 测试销毁-[币种:5eccabdb] [方式:jt_signTransaction] 0380\t销毁所有标准可增发代币",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2abfb939-2d4b-4be2-b1ce-ae245ba94b3f",
                                      "parentUUID": "d9585441-2c44-4e3d-8f8e-b7db18ead391",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "9cc5b9d6-4619-4312-b94d-5096dd229724",
                                    "6e8c4b50-9d9b-4c21-8add-b839d7491e7e",
                                    "2abfb939-2d4b-4be2-b1ce-ae245ba94b3f"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 31,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "b6fb7e6d-dc2d-4ba3-9636-75f4c96cfa80",
                              "title": "标准可销毁代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                  "title": "测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 902,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "6993bc8b-be50-4508-8036-534685607cf0",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0270\t发行标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 4201,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3389a5b2-397e-4e93-9f45-f220a5fd7e78",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0290\t发行标准可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1c11c499-5b92-4d44-9d07-4c98fe47d914",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0300\t发行标准可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8464a768-2f87-4f62-bca3-672d8e12a2ff",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0310\t发行标准可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "3d9f0429-c2f5-40a0-b224-ed00905cd009",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0310\t发行标准可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 15,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fd48aafc-0d04-4e00-b934-ca8a8ee93545",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0320\t发行标准可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2c9d5526-4d4f-4872-81cd-c6f066848d1b",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0320\t发行标准可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction blob 120001228002000024000008f868400000000000000a6cd6e316a9e9a40e8000000000000035646639636466300000000000000000000000000000000000000000000000000000732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af774473045022100e9d1bbbdd954a2e3f05faa9989894f31e4e2baad7b3293c00949c0abd9945eb602200f5856f1e427bf9dc27128e1b93d69ca9414a42416189dee796dd7e42090d2ee8114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363435041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction blob 120001228002000024000008f868400000000000000a6cd6e316a9e9a40e8000000000000035646639636466300000000000000000000000000000000000000000000000000000732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af774473045022100e9d1bbbdd954a2e3f05faa9989894f31e4e2baad7b3293c00949c0abd9945eb602200f5856f1e427bf9dc27128e1b93d69ca9414a42416189dee796dd7e42090d2ee8114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363435041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:582:29)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "30f20779-5b75-445b-af88-fec0849ea28b",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "272be430-9f12-4786-84a1-8b5f6b2e8f04",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f2c609ed-0412-4344-bf10-6dfdaf0cbae3",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5e6a9304-af77-4d23-8a82-e042dcde4163",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2d20caf5-1209-45d9-9b10-3ce68e422b68",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "12c4bcbd-c20c-42df-8f37-60fc118d0937",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fbd0fee0-2ab5-4cfb-a9ce-53b8ab221c73",
                                      "parentUUID": "4ca4c1de-d4ee-4bad-84d9-209ffdee774c",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "3389a5b2-397e-4e93-9f45-f220a5fd7e78",
                                    "1c11c499-5b92-4d44-9d07-4c98fe47d914",
                                    "8464a768-2f87-4f62-bca3-672d8e12a2ff",
                                    "fd48aafc-0d04-4e00-b934-ca8a8ee93545",
                                    "2c9d5526-4d4f-4872-81cd-c6f066848d1b",
                                    "272be430-9f12-4786-84a1-8b5f6b2e8f04",
                                    "f2c609ed-0412-4344-bf10-6dfdaf0cbae3",
                                    "5e6a9304-af77-4d23-8a82-e042dcde4163",
                                    "2d20caf5-1209-45d9-9b10-3ce68e422b68",
                                    "12c4bcbd-c20c-42df-8f37-60fc118d0937",
                                    "fbd0fee0-2ab5-4cfb-a9ce-53b8ab221c73"
                                  ],
                                  "failures": [
                                    "3d9f0429-c2f5-40a0-b224-ed00905cd009",
                                    "30f20779-5b75-445b-af88-fec0849ea28b"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4308,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                  "title": "测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 869,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "ffa7a26b-91e9-41b7-af27-c2d6b1c54539",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0010\t发起标准可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 3237,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f4298791-a962-42d2-830b-eef6c2624117",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "d0b59d5b-11ad-438a-9121-04735572ec37",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "39943da1-e324-4781-bc8d-79762de7162e",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "65f9e4ae-9db2-4a76-8a44-8e4f5aace0e9",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0040\t发起标准可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8b5adf0a-e995-4cfe-9921-ccccf34b73a0",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0050\t发起标准可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "17dd5a34-b103-4c95-ab00-09ac27f99e44",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0060\t发起标准可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "517e294f-0e77-4dcc-867e-e66f52980182",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0070\t发起标准可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "59636f5e-5b2a-4991-87c0-1c2aba7bc943",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0080\t发起标准可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5fc3a2a8-d053-42e6-9eaa-d2512451c3ae",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0080\t发起标准可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a393b951-d6fb-478e-b77d-b55cba27045e",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0090\t发起标准可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "12b89df6-291a-4660-8757-ee431765c85e",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0100\t发起标准可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c6f31cd4-b044-4111-ad8e-4264a5ea3324",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可销毁代币] [方式:jt_signTransaction] 0110\t发起标准可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "31727cc3-1057-420e-a114-b741e7eee7d3",
                                      "parentUUID": "1c179d1d-7da7-449f-838a-9eb9b72b9cd8",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "f4298791-a962-42d2-830b-eef6c2624117",
                                    "65f9e4ae-9db2-4a76-8a44-8e4f5aace0e9",
                                    "8b5adf0a-e995-4cfe-9921-ccccf34b73a0",
                                    "17dd5a34-b103-4c95-ab00-09ac27f99e44",
                                    "517e294f-0e77-4dcc-867e-e66f52980182",
                                    "59636f5e-5b2a-4991-87c0-1c2aba7bc943",
                                    "5fc3a2a8-d053-42e6-9eaa-d2512451c3ae",
                                    "a393b951-d6fb-478e-b77d-b55cba27045e",
                                    "12b89df6-291a-4660-8757-ee431765c85e",
                                    "c6f31cd4-b044-4111-ad8e-4264a5ea3324",
                                    "31727cc3-1057-420e-a114-b741e7eee7d3"
                                  ],
                                  "failures": [
                                    "d0b59d5b-11ad-438a-9121-04735572ec37",
                                    "39943da1-e324-4781-bc8d-79762de7162e"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3282,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "e70f08db-65f9-4a1e-a04b-dc10000e2dcb",
                                  "title": "测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11481,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "f4df117e-e18d-4398-b250-be8f0fca565f",
                                      "parentUUID": "e70f08db-65f9-4a1e-a04b-dc10000e2dcb",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 137,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d12be474-72be-49e8-bec2-2c9d73dabdd7",
                                      "parentUUID": "e70f08db-65f9-4a1e-a04b-dc10000e2dcb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 150,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8d8540da-835d-421a-9386-a6433767a0fc",
                                      "parentUUID": "e70f08db-65f9-4a1e-a04b-dc10000e2dcb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 123,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9816ca59-c306-41ca-82a9-62d1961d82e1",
                                      "parentUUID": "e70f08db-65f9-4a1e-a04b-dc10000e2dcb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 93,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b3b5f6f5-6659-417e-848f-c13a3cd00979",
                                      "parentUUID": "e70f08db-65f9-4a1e-a04b-dc10000e2dcb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 79,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f73a00a0-360f-4ed5-9bed-a661471d4802",
                                      "parentUUID": "e70f08db-65f9-4a1e-a04b-dc10000e2dcb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1819,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "4a0ed20c-baae-4b62-afd5-537a84ba6f85",
                                      "parentUUID": "e70f08db-65f9-4a1e-a04b-dc10000e2dcb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可销毁代币] [方式:jt_signTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1795,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "a1dfb537-c36c-4aa7-95ba-4cef2106b845",
                                      "parentUUID": "e70f08db-65f9-4a1e-a04b-dc10000e2dcb",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "d12be474-72be-49e8-bec2-2c9d73dabdd7",
                                    "8d8540da-835d-421a-9386-a6433767a0fc",
                                    "9816ca59-c306-41ca-82a9-62d1961d82e1",
                                    "b3b5f6f5-6659-417e-848f-c13a3cd00979",
                                    "f73a00a0-360f-4ed5-9bed-a661471d4802"
                                  ],
                                  "failures": [
                                    "4a0ed20c-baae-4b62-afd5-537a84ba6f85",
                                    "a1dfb537-c36c-4aa7-95ba-4cef2106b845"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4196,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                  "title": "测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1067,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "398ad37b-e8f4-4623-8dbe-a6903b27408c",
                                      "parentUUID": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 3211,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "66d94d34-6df8-4748-a76c-ed6862c0e749",
                                      "parentUUID": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 91,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "527205f3-3712-4e29-8122-05f4b33ebf31",
                                      "parentUUID": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 85,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b2e3674a-d287-43ba-897e-11a4c223f77a",
                                      "parentUUID": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 109,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "94a2457f-ab2e-43f4-b8d5-057f006ec045",
                                      "parentUUID": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d946ca81-bd49-45bb-9810-8fc9940e86d5",
                                      "parentUUID": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "33cd6d3a-c1e6-443a-a0b4-d5c46627cf6c",
                                      "parentUUID": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "3293c8a6-1149-4101-8a9f-4bd4e5a6ee90",
                                      "parentUUID": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3468a137-a516-4224-b605-b40c011bafbf",
                                      "parentUUID": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "37565c1d-ae57-4c8b-94c4-05af3b1d05b2",
                                      "parentUUID": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可销毁代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "0080713d-8087-45a2-aed4-32a0869405cc",
                                      "parentUUID": "e22a512f-fdc2-484e-9e23-dc5fbb9d1cc6",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "66d94d34-6df8-4748-a76c-ed6862c0e749",
                                    "527205f3-3712-4e29-8122-05f4b33ebf31",
                                    "b2e3674a-d287-43ba-897e-11a4c223f77a",
                                    "94a2457f-ab2e-43f4-b8d5-057f006ec045",
                                    "d946ca81-bd49-45bb-9810-8fc9940e86d5",
                                    "33cd6d3a-c1e6-443a-a0b4-d5c46627cf6c",
                                    "3468a137-a516-4224-b605-b40c011bafbf"
                                  ],
                                  "failures": [
                                    "3293c8a6-1149-4101-8a9f-4bd4e5a6ee90",
                                    "37565c1d-ae57-4c8b-94c4-05af3b1d05b2",
                                    "0080713d-8087-45a2-aed4-32a0869405cc"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3558,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "3a6a801b-bc3a-4d27-8066-8346fdb0f630",
                                  "title": "测试增发-[币种:5eccabdd] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试增发-[币种:5eccabdd] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 112,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "70db47f1-2025-4830-9b4e-47210fe83bbe",
                                      "parentUUID": "3a6a801b-bc3a-4d27-8066-8346fdb0f630",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试增发-[币种:5eccabdd] [方式:jt_signTransaction] 0370\t增发可增发的代币标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 16,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c2890f1d-0248-4daa-941e-fd22718d835c",
                                      "parentUUID": "3a6a801b-bc3a-4d27-8066-8346fdb0f630",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "c2890f1d-0248-4daa-941e-fd22718d835c"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 16,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "3432b169-9768-45a7-a877-3e38cba35f3b",
                                  "title": "测试销毁-[币种:5eccabdd] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabdd] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 405,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "bd631dc7-cd59-4b7e-9701-30578a90b442",
                                      "parentUUID": "3432b169-9768-45a7-a877-3e38cba35f3b",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabdd] [方式:jt_signTransaction] 0380\t销毁标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 4248,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8e9a7e25-6b0e-4ab2-8efa-86ef65d07dea",
                                      "parentUUID": "3432b169-9768-45a7-a877-3e38cba35f3b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabdd] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e3d1054a-35f3-4356-a4f1-255ab61bd736",
                                      "parentUUID": "3432b169-9768-45a7-a877-3e38cba35f3b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabdd] [方式:jt_signTransaction] 0380\t销毁所有标准可销毁代币",
                                      "timedOut": false,
                                      "duration": 108,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "257b24b9-be4b-49c9-8e6a-b98d8af312dc",
                                      "parentUUID": "3432b169-9768-45a7-a877-3e38cba35f3b",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "8e9a7e25-6b0e-4ab2-8efa-86ef65d07dea",
                                    "e3d1054a-35f3-4356-a4f1-255ab61bd736",
                                    "257b24b9-be4b-49c9-8e6a-b98d8af312dc"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4370,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "ea58bf35-337f-421e-9b52-aefad02befbf",
                              "title": "标准可增发可销毁代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                  "title": "测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1011,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "07f7bdaf-2330-49bf-a201-cf488e139b7d",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0270\t发行标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 4277,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "adca25eb-0b3d-4da9-a6cc-9c867684a525",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行标准可增发可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0290\t发行标准可增发可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 17,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d619068a-eab7-4a40-b44b-38d6b6247843",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行标准可增发可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0300\t发行标准可增发可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b6ce8b46-3eae-4ab3-883b-09543ea8ea86",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0310\t发行标准可增发可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "fed89426-88a6-4959-a2ae-193b065304bc",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行标准可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0310\t发行标准可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:582:29)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "d217301b-c13a-47b1-a230-f37ff30d4484",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0320\t发行标准可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3e44a94e-7500-48d0-803c-5f075e4e23a5",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行标准可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0320\t发行标准可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction blob 1200012280030000240000090668400000000000000a6cd6e316a9e9a40e8000000000000035646639636466300000000000000000000000000000000000000000000000000000732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af77446304402205b9d2b1b1a8e6dd27f8fd1bbe6ab68751750e70c384811b610e7751c0d5c2c1b02201718a429182c537c1f2e9205711ddc33a25ee17eaf5d34a50206e9c9d03fb65f8114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363437041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction blob 1200012280030000240000090668400000000000000a6cd6e316a9e9a40e8000000000000035646639636466300000000000000000000000000000000000000000000000000000732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af77446304402205b9d2b1b1a8e6dd27f8fd1bbe6ab68751750e70c384811b610e7751c0d5c2c1b02201718a429182c537c1f2e9205711ddc33a25ee17eaf5d34a50206e9c9d03fb65f8114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363437041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:582:29)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "220579c5-641e-4559-a65f-dde082e6d78d",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "028f18ba-1b84-4b39-9df0-ca7251444b53",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "afaffa8b-811a-46ca-86c1-7c54de964329",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行标准可增发可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行标准可增发可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ea86c61d-f200-43c6-87dd-f881688ab4c2",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7c62584a-ccee-4cc8-8e42-8d9cd17ddb3c",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e322f4ba-7356-41c8-a08b-f9599ee7fff1",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行标准可增发可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行标准可增发可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f2c3ad2e-b953-447e-b944-a22da3392e08",
                                      "parentUUID": "390a9e32-6a48-45fc-bcc3-892c908a5f44",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "adca25eb-0b3d-4da9-a6cc-9c867684a525",
                                    "d619068a-eab7-4a40-b44b-38d6b6247843",
                                    "b6ce8b46-3eae-4ab3-883b-09543ea8ea86",
                                    "3e44a94e-7500-48d0-803c-5f075e4e23a5",
                                    "028f18ba-1b84-4b39-9df0-ca7251444b53",
                                    "afaffa8b-811a-46ca-86c1-7c54de964329",
                                    "ea86c61d-f200-43c6-87dd-f881688ab4c2",
                                    "7c62584a-ccee-4cc8-8e42-8d9cd17ddb3c",
                                    "e322f4ba-7356-41c8-a08b-f9599ee7fff1",
                                    "f2c3ad2e-b953-447e-b944-a22da3392e08"
                                  ],
                                  "failures": [
                                    "fed89426-88a6-4959-a2ae-193b065304bc",
                                    "d217301b-c13a-47b1-a230-f37ff30d4484",
                                    "220579c5-641e-4559-a65f-dde082e6d78d"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4345,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                  "title": "测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1031,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "b01a0330-b6f6-4035-88a2-b9055874a223",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起标准可增发可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0010\t发起标准可增发可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 4175,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3dd439b8-2434-408b-9f2b-9a2e291342a0",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "7e375198-51b2-4a48-9f71-f8404f15eb35",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "2b00b77f-3cf5-43d8-b903-d40325ac0c59",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起标准可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "10a03240-145b-4a5c-a27f-1d112016ec41",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起标准可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0040\t发起标准可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 15,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1f8540f4-b56a-40a0-8e5f-d0b496dc3a88",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起标准可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0050\t发起标准可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 32,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "026b716e-54bd-4e38-88c8-5c34f5094490",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起标准可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0060\t发起标准可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 21,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8f8a25de-8a45-4680-aca6-55c2b118f115",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起标准可增发可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0070\t发起标准可增发可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4d586634-825c-447b-84b5-3f0c11c6fdcf",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0080\t发起标准可增发可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a601020f-547d-4f47-9e10-f51e951e6645",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起标准可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0080\t发起标准可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "837daef3-ccf7-4c67-ae8c-cceaeeeb781e",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起标准可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0090\t发起标准可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2c8fe7e4-22fb-4b75-8356-8906a8bfac87",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起标准可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0100\t发起标准可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "38f33fe9-06fd-4223-805c-92ef0e81106a",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起标准可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0110\t发起标准可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "478d41c2-3e38-4753-a1dc-131c62145053",
                                      "parentUUID": "881fe00f-4c0c-4165-b5f0-4e9a83811e0a",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "3dd439b8-2434-408b-9f2b-9a2e291342a0",
                                    "10a03240-145b-4a5c-a27f-1d112016ec41",
                                    "1f8540f4-b56a-40a0-8e5f-d0b496dc3a88",
                                    "026b716e-54bd-4e38-88c8-5c34f5094490",
                                    "8f8a25de-8a45-4680-aca6-55c2b118f115",
                                    "4d586634-825c-447b-84b5-3f0c11c6fdcf",
                                    "a601020f-547d-4f47-9e10-f51e951e6645",
                                    "837daef3-ccf7-4c67-ae8c-cceaeeeb781e",
                                    "2c8fe7e4-22fb-4b75-8356-8906a8bfac87",
                                    "38f33fe9-06fd-4223-805c-92ef0e81106a",
                                    "478d41c2-3e38-4753-a1dc-131c62145053"
                                  ],
                                  "failures": [
                                    "7e375198-51b2-4a48-9f71-f8404f15eb35",
                                    "2b00b77f-3cf5-43d8-b903-d40325ac0c59"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4310,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "241a10ec-0f8b-4966-a57b-ee43670fbf0c",
                                  "title": "测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11236,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "61434a61-98d1-41c2-8bcb-44439f283b07",
                                      "parentUUID": "241a10ec-0f8b-4966-a57b-ee43670fbf0c",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 138,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5bb8b93d-b8ff-4918-8a25-ae7554acc670",
                                      "parentUUID": "241a10ec-0f8b-4966-a57b-ee43670fbf0c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 86,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6e32906b-be23-45a8-a8d1-1755f8cec2d7",
                                      "parentUUID": "241a10ec-0f8b-4966-a57b-ee43670fbf0c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 103,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e37008e5-b1e5-4e62-9996-d2c3c9054775",
                                      "parentUUID": "241a10ec-0f8b-4966-a57b-ee43670fbf0c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 125,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3e7245aa-d160-42a5-887a-b5ac6c9cd025",
                                      "parentUUID": "241a10ec-0f8b-4966-a57b-ee43670fbf0c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 107,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1cd1cbc7-3d53-400c-a720-623d525f4219",
                                      "parentUUID": "241a10ec-0f8b-4966-a57b-ee43670fbf0c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1834,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "58eee161-15eb-44af-8a50-e77faa4a4856",
                                      "parentUUID": "241a10ec-0f8b-4966-a57b-ee43670fbf0c",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1807,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "a31daf21-075f-4d93-9604-e4cd2cf36b4d",
                                      "parentUUID": "241a10ec-0f8b-4966-a57b-ee43670fbf0c",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "5bb8b93d-b8ff-4918-8a25-ae7554acc670",
                                    "6e32906b-be23-45a8-a8d1-1755f8cec2d7",
                                    "e37008e5-b1e5-4e62-9996-d2c3c9054775",
                                    "3e7245aa-d160-42a5-887a-b5ac6c9cd025",
                                    "1cd1cbc7-3d53-400c-a720-623d525f4219"
                                  ],
                                  "failures": [
                                    "58eee161-15eb-44af-8a50-e77faa4a4856",
                                    "a31daf21-075f-4d93-9604-e4cd2cf36b4d"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4200,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "428e0706-5476-4ea4-adad-e324b074b314",
                                  "title": "测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1174,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "fcf42aba-e254-4073-b5c7-a83749588839",
                                      "parentUUID": "428e0706-5476-4ea4-adad-e324b074b314",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 3251,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "eb2d960d-fb5a-4943-83f7-bd72cd9f84da",
                                      "parentUUID": "428e0706-5476-4ea4-adad-e324b074b314",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 103,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d385dcf9-397c-4cc8-8c85-9fecce34444d",
                                      "parentUUID": "428e0706-5476-4ea4-adad-e324b074b314",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 124,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a30d4bea-8595-4743-97be-8facfc7e826f",
                                      "parentUUID": "428e0706-5476-4ea4-adad-e324b074b314",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 113,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "879a2965-1019-4f0b-b4de-641a3a3ea371",
                                      "parentUUID": "428e0706-5476-4ea4-adad-e324b074b314",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "18d84c7d-f57d-41f3-84ea-54bffd873b78",
                                      "parentUUID": "428e0706-5476-4ea4-adad-e324b074b314",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "522cd155-69df-428d-b8c0-77d2149893c7",
                                      "parentUUID": "428e0706-5476-4ea4-adad-e324b074b314",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "3e5ff152-05a9-42a1-8a74-4aa605cb0182",
                                      "parentUUID": "428e0706-5476-4ea4-adad-e324b074b314",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包标准可增发可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 15,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "64822e0b-ccc9-4be5-b704-1181f35bd07d",
                                      "parentUUID": "428e0706-5476-4ea4-adad-e324b074b314",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "a2b3e1e6-7ca1-42eb-b21e-ce8c5ba874ba",
                                      "parentUUID": "428e0706-5476-4ea4-adad-e324b074b314",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:标准可增发可销毁代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "2be1e154-6791-4965-a5f4-2731367ece54",
                                      "parentUUID": "428e0706-5476-4ea4-adad-e324b074b314",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "eb2d960d-fb5a-4943-83f7-bd72cd9f84da",
                                    "d385dcf9-397c-4cc8-8c85-9fecce34444d",
                                    "a30d4bea-8595-4743-97be-8facfc7e826f",
                                    "879a2965-1019-4f0b-b4de-641a3a3ea371",
                                    "18d84c7d-f57d-41f3-84ea-54bffd873b78",
                                    "522cd155-69df-428d-b8c0-77d2149893c7",
                                    "64822e0b-ccc9-4be5-b704-1181f35bd07d"
                                  ],
                                  "failures": [
                                    "3e5ff152-05a9-42a1-8a74-4aa605cb0182",
                                    "a2b3e1e6-7ca1-42eb-b21e-ce8c5ba874ba",
                                    "2be1e154-6791-4965-a5f4-2731367ece54"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3663,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "2acab421-c721-4877-b72a-a9efc214e1ed",
                                  "title": "测试增发-[币种:5eccabdf] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试增发-[币种:5eccabdf] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 118,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "89fe4bf1-709f-4cc7-8ae0-8b080f65f9e6",
                                      "parentUUID": "2acab421-c721-4877-b72a-a9efc214e1ed",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试增发-[币种:5eccabdf] [方式:jt_signTransaction] 0370\t增发可增发的代币标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 4217,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "24b40245-dcf9-49d5-8e7a-1ac96041cc96",
                                      "parentUUID": "2acab421-c721-4877-b72a-a9efc214e1ed",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "24b40245-dcf9-49d5-8e7a-1ac96041cc96"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4217,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "2c5bae38-8536-4f19-8233-34d26150f2d7",
                                  "title": "测试销毁-[币种:5eccabdf] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabdf] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 331,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "1e31a412-570d-4fcc-9c43-06ee0d250674",
                                      "parentUUID": "2c5bae38-8536-4f19-8233-34d26150f2d7",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabdf] [方式:jt_signTransaction] 0380\t销毁标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 4579,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0924ffc6-e9ca-4a47-babe-9d1acef81ce2",
                                      "parentUUID": "2c5bae38-8536-4f19-8233-34d26150f2d7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabdf] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7c8d76d1-54ba-4f3f-9fb1-7bde5c763b71",
                                      "parentUUID": "2c5bae38-8536-4f19-8233-34d26150f2d7",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有标准可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 标准可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabdf] [方式:jt_signTransaction] 0380\t销毁所有标准可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 96,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ec527669-3fb6-43ce-9dc0-43a00c61c581",
                                      "parentUUID": "2c5bae38-8536-4f19-8233-34d26150f2d7",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "0924ffc6-e9ca-4a47-babe-9d1acef81ce2",
                                    "7c8d76d1-54ba-4f3f-9fb1-7bde5c763b71",
                                    "ec527669-3fb6-43ce-9dc0-43a00c61c581"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4680,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "4d735a32-0236-4784-ab91-43ff8faba042",
                              "title": "自定Issuer一次性代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                  "title": "测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1061,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "fb19093b-3a9c-4598-b0ee-6970db6cb4da",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0270\t发行自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 3211,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7d6124e6-3671-416c-a9c4-0adb9b9440a3",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer一次性代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0290\t发行自定Issuer一次性代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "90ca0d5e-44ff-46fa-928c-2228043da466",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer一次性代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0300\t发行自定Issuer一次性代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6bc16af9-6c46-4e85-bd64-5a0a5b2653e5",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer一次性代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0310\t发行自定Issuer一次性代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "78ffe660-3e32-433c-ae82-f4eb7df467c5",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer一次性代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0310\t发行自定Issuer一次性代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ca8eaf47-ec23-4102-8dcb-8e19e55ecdaf",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer一次性代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0320\t发行自定Issuer一次性代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5883cce1-de6d-4783-91a6-c081532355de",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0320\t发行自定Issuer一次性代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b766e1ec-7b4b-4905-a68f-d086a664c1e0",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "744b6c44-4f5e-4941-a005-fd5aa9d89d4c",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6637d541-8f25-4714-b078-c2dea3bedc30",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer一次性代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0330\t发行自定Issuer一次性代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1439e63d-2138-4eba-aef8-74fb8b8a3753",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "99396721-4c66-43d8-b75d-988993d1e46c",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3b0c1677-5276-4eec-9f79-998d99fd5be3",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer一次性代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0340\t发行自定Issuer一次性代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5cd0dda5-6341-4203-b47c-f2b8067f04b5",
                                      "parentUUID": "efa16671-eb49-40c6-95e3-3688a69184b6",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "7d6124e6-3671-416c-a9c4-0adb9b9440a3",
                                    "90ca0d5e-44ff-46fa-928c-2228043da466",
                                    "6bc16af9-6c46-4e85-bd64-5a0a5b2653e5",
                                    "ca8eaf47-ec23-4102-8dcb-8e19e55ecdaf",
                                    "5883cce1-de6d-4783-91a6-c081532355de",
                                    "b766e1ec-7b4b-4905-a68f-d086a664c1e0",
                                    "744b6c44-4f5e-4941-a005-fd5aa9d89d4c",
                                    "6637d541-8f25-4714-b078-c2dea3bedc30",
                                    "1439e63d-2138-4eba-aef8-74fb8b8a3753",
                                    "99396721-4c66-43d8-b75d-988993d1e46c",
                                    "3b0c1677-5276-4eec-9f79-998d99fd5be3",
                                    "5cd0dda5-6341-4203-b47c-f2b8067f04b5"
                                  ],
                                  "failures": [
                                    "78ffe660-3e32-433c-ae82-f4eb7df467c5"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3287,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                  "title": "测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 910,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "1e86dd60-2884-42ad-978e-2885ef806814",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer一次性代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0010\t发起自定Issuer一次性代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 4228,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c327fa5b-ab2c-4446-b6ac-04065240b37c",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "ccecaf44-94c2-466a-a814-065a493168dc",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "dbd85386-0af3-43ea-9123-df3eeabbe9ad",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0030\t发起自定Issuer一次性代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4ef0eb73-28cf-4c46-afd0-d2671197e9c9",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0040\t发起自定Issuer一次性代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b67755b5-1bcb-40dd-b80c-96bac23d9396",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0050\t发起自定Issuer一次性代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0c36b3de-e321-40d9-927b-e983720fe486",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0060\t发起自定Issuer一次性代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f990fb30-d9bb-4afb-8473-f28214132eab",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer一次性代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0070\t发起自定Issuer一次性代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ed4112c4-4d9d-4a5a-8c60-25071e47a97f",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer一次性代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0080\t发起自定Issuer一次性代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "42ec4257-fdca-4431-919e-29edc14f6695",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer一次性代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0080\t发起自定Issuer一次性代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0a259176-90dc-473e-987a-a4175029c362",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0090\t发起自定Issuer一次性代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "bd1b5d93-3ca8-4a2f-8486-f84f19fe295e",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0100\t发起自定Issuer一次性代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "35993dfd-263c-4b38-ad64-cad21bff29f3",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0110\t发起自定Issuer一次性代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "689faa9d-95a8-4db1-8ce3-f32ecc5365c0",
                                      "parentUUID": "40bd101a-e6ed-4b68-b96d-50171f59b616",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "c327fa5b-ab2c-4446-b6ac-04065240b37c",
                                    "4ef0eb73-28cf-4c46-afd0-d2671197e9c9",
                                    "b67755b5-1bcb-40dd-b80c-96bac23d9396",
                                    "0c36b3de-e321-40d9-927b-e983720fe486",
                                    "f990fb30-d9bb-4afb-8473-f28214132eab",
                                    "ed4112c4-4d9d-4a5a-8c60-25071e47a97f",
                                    "42ec4257-fdca-4431-919e-29edc14f6695",
                                    "0a259176-90dc-473e-987a-a4175029c362",
                                    "bd1b5d93-3ca8-4a2f-8486-f84f19fe295e",
                                    "35993dfd-263c-4b38-ad64-cad21bff29f3",
                                    "689faa9d-95a8-4db1-8ce3-f32ecc5365c0"
                                  ],
                                  "failures": [
                                    "ccecaf44-94c2-466a-a814-065a493168dc",
                                    "dbd85386-0af3-43ea-9123-df3eeabbe9ad"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4300,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c2c59224-b64c-4760-8126-ace00cba3b93",
                                  "title": "测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11389,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "d5c37f3b-444f-4ec3-b35f-5a9bed6f5632",
                                      "parentUUID": "c2c59224-b64c-4760-8126-ace00cba3b93",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 122,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "add105f5-8cbd-4ac6-a9de-ebd0e1627c6b",
                                      "parentUUID": "c2c59224-b64c-4760-8126-ace00cba3b93",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 115,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d5b1e4c8-5269-4e23-becb-27141b9ca045",
                                      "parentUUID": "c2c59224-b64c-4760-8126-ace00cba3b93",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 104,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9011a99a-bdd7-42d8-a0e9-09308f3912d0",
                                      "parentUUID": "c2c59224-b64c-4760-8126-ace00cba3b93",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 99,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "698d7f11-166f-4a1e-9c6e-92b0814bec8b",
                                      "parentUUID": "c2c59224-b64c-4760-8126-ace00cba3b93",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 107,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e04654ed-d4a0-4900-8063-949b04e30fc8",
                                      "parentUUID": "c2c59224-b64c-4760-8126-ace00cba3b93",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1858,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "cb83cd60-1a93-446a-9662-90fea5556cd7",
                                      "parentUUID": "c2c59224-b64c-4760-8126-ace00cba3b93",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1774,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "63614f44-3610-4cbf-8bd2-08098d8322b2",
                                      "parentUUID": "c2c59224-b64c-4760-8126-ace00cba3b93",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "add105f5-8cbd-4ac6-a9de-ebd0e1627c6b",
                                    "d5b1e4c8-5269-4e23-becb-27141b9ca045",
                                    "9011a99a-bdd7-42d8-a0e9-09308f3912d0",
                                    "698d7f11-166f-4a1e-9c6e-92b0814bec8b",
                                    "e04654ed-d4a0-4900-8063-949b04e30fc8"
                                  ],
                                  "failures": [
                                    "cb83cd60-1a93-446a-9662-90fea5556cd7",
                                    "63614f44-3610-4cbf-8bd2-08098d8322b2"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4179,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                  "title": "测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1206,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "611c5098-dd8f-45cc-a2fb-778520ef3b7c",
                                      "parentUUID": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 3677,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a7e3bcf1-1aa7-428a-92b1-b4c5348a4212",
                                      "parentUUID": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 84,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e26bf2c7-9a62-40a8-93ed-98662326a97c",
                                      "parentUUID": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 121,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2dfc703e-24a9-49c6-b722-a84115da43ad",
                                      "parentUUID": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 76,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ac5d78d4-dfa8-4ee2-b8f9-9530b04cafa3",
                                      "parentUUID": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c90631ba-787e-4207-ac18-f3c93ca7dc65",
                                      "parentUUID": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "5370f9d7-083d-44f9-96c5-3a4f4b9116da",
                                      "parentUUID": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "02bd8a91-bf7c-4f1d-991c-bc22e8970946",
                                      "parentUUID": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer一次性代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer一次性代币余额的整数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "69f3f1e8-fd3d-4589-b723-8acaa981c060",
                                      "parentUUID": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "d4f076a7-e4ba-4612-a6e8-f3f0299a733f",
                                      "parentUUID": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer一次性代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "7d4b602d-a333-4ddf-9085-805513ea5a83",
                                      "parentUUID": "b7951894-97a5-4223-9dcc-1fc727b074b2",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "a7e3bcf1-1aa7-428a-92b1-b4c5348a4212",
                                    "e26bf2c7-9a62-40a8-93ed-98662326a97c",
                                    "2dfc703e-24a9-49c6-b722-a84115da43ad",
                                    "ac5d78d4-dfa8-4ee2-b8f9-9530b04cafa3",
                                    "c90631ba-787e-4207-ac18-f3c93ca7dc65",
                                    "5370f9d7-083d-44f9-96c5-3a4f4b9116da",
                                    "69f3f1e8-fd3d-4589-b723-8acaa981c060"
                                  ],
                                  "failures": [
                                    "02bd8a91-bf7c-4f1d-991c-bc22e8970946",
                                    "d4f076a7-e4ba-4612-a6e8-f3f0299a733f",
                                    "7d4b602d-a333-4ddf-9085-805513ea5a83"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3973,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "9e81f15c-ed55-4f74-81b9-0e7a4e8ef4ce",
                                  "title": "测试增发-[币种:5eccabe1] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试增发-[币种:5eccabe1] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 112,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "093506e7-a4b4-42c2-8481-3a50cbb90309",
                                      "parentUUID": "9e81f15c-ed55-4f74-81b9-0e7a4e8ef4ce",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试增发-[币种:5eccabe1] [方式:jt_signTransaction] 0370\t增发可增发的代币自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "fc3196f2-fffe-498f-b7dd-9c9c6030717c",
                                      "parentUUID": "9e81f15c-ed55-4f74-81b9-0e7a4e8ef4ce",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "fc3196f2-fffe-498f-b7dd-9c9c6030717c"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 10,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "fd7eebf2-cf50-4ad1-b4eb-646982dfd22a",
                                  "title": "测试销毁-[币种:5eccabe1] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试销毁-[币种:5eccabe1] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 380,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "3cbf7e1e-80b6-40a5-9789-af9a843b2db1",
                                      "parentUUID": "fd7eebf2-cf50-4ad1-b4eb-646982dfd22a",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试销毁-[币种:5eccabe1] [方式:jt_signTransaction] 0380\t销毁自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b4eb46a0-358e-412b-9235-59215f9bf728",
                                      "parentUUID": "fd7eebf2-cf50-4ad1-b4eb-646982dfd22a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试销毁-[币种:5eccabe1] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ad94ba5f-0111-4503-bae4-5ade7fb387ca",
                                      "parentUUID": "fd7eebf2-cf50-4ad1-b4eb-646982dfd22a",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer一次性代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer一次性代币测试：jt_signTransaction 测试销毁-[币种:5eccabe1] [方式:jt_signTransaction] 0380\t销毁所有自定Issuer一次性代币",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "699bdf5e-0b9f-4bc4-9f69-cc7e3c77a5bd",
                                      "parentUUID": "fd7eebf2-cf50-4ad1-b4eb-646982dfd22a",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "b4eb46a0-358e-412b-9235-59215f9bf728",
                                    "ad94ba5f-0111-4503-bae4-5ade7fb387ca",
                                    "699bdf5e-0b9f-4bc4-9f69-cc7e3c77a5bd"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 38,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "069f63e5-75cb-422d-94c8-1ed6d6a8b321",
                              "title": "自定Issuer可增发代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                  "title": "测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 963,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "7d469e24-ae30-47a1-9667-67e4a0b7b529",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0270\t发行自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 3208,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "eab88e8f-f70c-4479-965f-de0249d58080",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可增发代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0290\t发行自定Issuer可增发代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ce94c874-bd57-4460-b126-00ca2760f1ce",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可增发代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0300\t发行自定Issuer可增发代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "275e14e5-6880-4523-b66f-8435f0caca85",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可增发代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "933473f0-6c33-4b8d-a3d0-41c54abe188c",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可增发代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:582:29)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "052ca7da-b3a3-4404-810c-732069ebbc72",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可增发代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cec12f93-afbb-4a05-89ad-e4759f2d6068",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可增发代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction blob 1200012280010000240000092068400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000bed91e649cee69f64b76868db59763b0e3c3a8d7732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af7744630440220228c3c2a75ec745759bd2234d81958619c201d23f8ee2448c1de64cbfe732e6302202ab71c26bab17c45604bf471e8d5b3e877af1adf45094a24ef3bf51224803ee58114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363531041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction blob 1200012280010000240000092068400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000bed91e649cee69f64b76868db59763b0e3c3a8d7732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af7744630440220228c3c2a75ec745759bd2234d81958619c201d23f8ee2448c1de64cbfe732e6302202ab71c26bab17c45604bf471e8d5b3e877af1adf45094a24ef3bf51224803ee58114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363531041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:582:29)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "6aa80d1d-51b2-45fb-a9bb-c5a34c15fd5c",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e85d61d5-3e5f-4f33-838c-e22aa2fccbe5",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c4a24932-a690-4f67-9a5b-9677cae53121",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f0093062-6468-4657-9007-b3fcfdbfb0be",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "be4043e0-1aab-4900-a433-2152ac8d5d74",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4cdd91a3-4abe-4b39-9c9f-18f41c848984",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8353993b-4a52-4184-af75-2eea43349877",
                                      "parentUUID": "58955b91-1b36-4da3-a22b-0f1322e41abb",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "eab88e8f-f70c-4479-965f-de0249d58080",
                                    "ce94c874-bd57-4460-b126-00ca2760f1ce",
                                    "275e14e5-6880-4523-b66f-8435f0caca85",
                                    "cec12f93-afbb-4a05-89ad-e4759f2d6068",
                                    "e85d61d5-3e5f-4f33-838c-e22aa2fccbe5",
                                    "c4a24932-a690-4f67-9a5b-9677cae53121",
                                    "f0093062-6468-4657-9007-b3fcfdbfb0be",
                                    "be4043e0-1aab-4900-a433-2152ac8d5d74",
                                    "4cdd91a3-4abe-4b39-9c9f-18f41c848984",
                                    "8353993b-4a52-4184-af75-2eea43349877"
                                  ],
                                  "failures": [
                                    "933473f0-6c33-4b8d-a3d0-41c54abe188c",
                                    "052ca7da-b3a3-4404-810c-732069ebbc72",
                                    "6aa80d1d-51b2-45fb-a9bb-c5a34c15fd5c"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3297,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                  "title": "测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 843,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "b59e22cd-2d01-49e0-8ee8-318e795e8330",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可增发代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0010\t发起自定Issuer可增发代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 4229,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1927243b-0479-467c-b3b8-91a2d70b16da",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "400ec160-861d-4b5d-8454-1834380ea1aa",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "e68b02c2-a47a-441d-9486-b81b5a91641f",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "3e604d57-ffaa-4cc6-b4dc-d0740f00c6eb",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0040\t发起自定Issuer可增发代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9b9c22e1-c0c1-4774-893c-875c4e4bbe0f",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0050\t发起自定Issuer可增发代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "574dfad5-ac4f-4aff-8782-0aeb51f0b73f",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0060\t发起自定Issuer可增发代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c951e7ba-0e60-4de8-b80b-bff2e17076df",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可增发代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0070\t发起自定Issuer可增发代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2b7fc8ed-82dd-495a-9aa5-2082b1b1a263",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可增发代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f4cde345-90e3-477e-8a21-5007f13c3831",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可增发代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b40bc296-9c6d-401f-9c9e-0f14cc6cdcad",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0090\t发起自定Issuer可增发代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "961403fe-5538-4e09-9616-7a34f2ba9c49",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0100\t发起自定Issuer可增发代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ac720a10-2855-44aa-b8bf-b70898876bee",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0110\t发起自定Issuer可增发代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a7f8d3b9-f15a-444e-841e-a27e253b6509",
                                      "parentUUID": "8e9263a0-bb6d-4677-bf9e-2c4ec384a3fb",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "1927243b-0479-467c-b3b8-91a2d70b16da",
                                    "3e604d57-ffaa-4cc6-b4dc-d0740f00c6eb",
                                    "9b9c22e1-c0c1-4774-893c-875c4e4bbe0f",
                                    "574dfad5-ac4f-4aff-8782-0aeb51f0b73f",
                                    "c951e7ba-0e60-4de8-b80b-bff2e17076df",
                                    "2b7fc8ed-82dd-495a-9aa5-2082b1b1a263",
                                    "f4cde345-90e3-477e-8a21-5007f13c3831",
                                    "b40bc296-9c6d-401f-9c9e-0f14cc6cdcad",
                                    "961403fe-5538-4e09-9616-7a34f2ba9c49",
                                    "ac720a10-2855-44aa-b8bf-b70898876bee",
                                    "a7f8d3b9-f15a-444e-841e-a27e253b6509"
                                  ],
                                  "failures": [
                                    "400ec160-861d-4b5d-8454-1834380ea1aa",
                                    "e68b02c2-a47a-441d-9486-b81b5a91641f"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4279,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "3729030c-e59b-463b-a1ce-3c9aa71185db",
                                  "title": "测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11285,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "bb8bb4b6-e144-4387-ab16-c96152f4cc1c",
                                      "parentUUID": "3729030c-e59b-463b-a1ce-3c9aa71185db",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 71,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c727801e-f9d3-46eb-bf27-3f8e67e7f048",
                                      "parentUUID": "3729030c-e59b-463b-a1ce-3c9aa71185db",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 95,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "17e2e12a-3bd5-4ac0-9aaf-e8b30561b2d8",
                                      "parentUUID": "3729030c-e59b-463b-a1ce-3c9aa71185db",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 140,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "52d6e9c8-a502-40f6-8e76-0cf562d55733",
                                      "parentUUID": "3729030c-e59b-463b-a1ce-3c9aa71185db",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 109,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d0cfd683-2952-48e5-98de-e9627431cf20",
                                      "parentUUID": "3729030c-e59b-463b-a1ce-3c9aa71185db",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 93,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6e03173d-cc11-4c6a-a90c-6d8c766ad636",
                                      "parentUUID": "3729030c-e59b-463b-a1ce-3c9aa71185db",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1842,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "9e752573-6bd7-4827-8394-eafae42cd176",
                                      "parentUUID": "3729030c-e59b-463b-a1ce-3c9aa71185db",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 2032,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "2411fb8d-007a-46fd-965a-95457e5a2f7a",
                                      "parentUUID": "3729030c-e59b-463b-a1ce-3c9aa71185db",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "c727801e-f9d3-46eb-bf27-3f8e67e7f048",
                                    "17e2e12a-3bd5-4ac0-9aaf-e8b30561b2d8",
                                    "52d6e9c8-a502-40f6-8e76-0cf562d55733",
                                    "d0cfd683-2952-48e5-98de-e9627431cf20",
                                    "6e03173d-cc11-4c6a-a90c-6d8c766ad636"
                                  ],
                                  "failures": [
                                    "9e752573-6bd7-4827-8394-eafae42cd176",
                                    "2411fb8d-007a-46fd-965a-95457e5a2f7a"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4382,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                  "title": "测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 929,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "c9061435-0e02-4191-b191-293bed8e69ed",
                                      "parentUUID": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 3366,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a52c7abc-50ff-4ddb-9e8b-91bbfecd75b2",
                                      "parentUUID": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 86,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c2610f6a-d577-4ac2-8287-9e8a56d2112b",
                                      "parentUUID": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 91,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7642304d-2813-4433-a675-013ebc265044",
                                      "parentUUID": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 100,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1858ecbe-4bac-480c-9274-d8f74b7eec0e",
                                      "parentUUID": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "9e0829c9-cb1f-4ed0-8d41-57646311daa8",
                                      "parentUUID": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e33fe268-31d0-4c69-b4fc-fa9fcf52e9c8",
                                      "parentUUID": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "38975085-36fb-4a01-bd58-2f11634620d5",
                                      "parentUUID": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发代币余额的整数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "935213a1-72cd-4371-9dd0-3798a898fbca",
                                      "parentUUID": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "0c9d3653-9804-40f0-a647-5ee7ec8dfc09",
                                      "parentUUID": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "ec151068-d7cd-4365-8a03-c9d1ab63242b",
                                      "parentUUID": "72c90515-a5d2-4aff-a93b-99bc2a97d76d",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "a52c7abc-50ff-4ddb-9e8b-91bbfecd75b2",
                                    "c2610f6a-d577-4ac2-8287-9e8a56d2112b",
                                    "7642304d-2813-4433-a675-013ebc265044",
                                    "1858ecbe-4bac-480c-9274-d8f74b7eec0e",
                                    "9e0829c9-cb1f-4ed0-8d41-57646311daa8",
                                    "e33fe268-31d0-4c69-b4fc-fa9fcf52e9c8",
                                    "935213a1-72cd-4371-9dd0-3798a898fbca"
                                  ],
                                  "failures": [
                                    "38975085-36fb-4a01-bd58-2f11634620d5",
                                    "0c9d3653-9804-40f0-a647-5ee7ec8dfc09",
                                    "ec151068-d7cd-4365-8a03-c9d1ab63242b"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3662,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "a095be58-62d3-428a-94af-e579f1d94219",
                                  "title": "测试增发-[币种:5eccabe3] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试增发-[币种:5eccabe3] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 123,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "112347ec-54cb-44fb-9012-0d5136d75d5b",
                                      "parentUUID": "a095be58-62d3-428a-94af-e579f1d94219",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试增发-[币种:5eccabe3] [方式:jt_signTransaction] 0370\t增发可增发的代币自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 4238,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a279a9ed-f523-47a8-8266-8e41ca944abf",
                                      "parentUUID": "a095be58-62d3-428a-94af-e579f1d94219",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "a279a9ed-f523-47a8-8266-8e41ca944abf"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4238,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "38f66c2f-637d-4e15-8d7e-3cdfb1ff676e",
                                  "title": "测试销毁-[币种:5eccabe3] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试销毁-[币种:5eccabe3] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 371,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "47de7713-fcbe-4164-943a-05aa4c32ed28",
                                      "parentUUID": "38f66c2f-637d-4e15-8d7e-3cdfb1ff676e",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试销毁-[币种:5eccabe3] [方式:jt_signTransaction] 0380\t销毁自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "536b6c94-60c2-481c-8dfc-bd6cbf73dd4f",
                                      "parentUUID": "38f66c2f-637d-4e15-8d7e-3cdfb1ff676e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试销毁-[币种:5eccabe3] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ec646c23-8550-4cb4-9378-53d40f539b4b",
                                      "parentUUID": "38f66c2f-637d-4e15-8d7e-3cdfb1ff676e",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可增发代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发代币测试：jt_signTransaction 测试销毁-[币种:5eccabe3] [方式:jt_signTransaction] 0380\t销毁所有自定Issuer可增发代币",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c5cf86d6-c509-413d-9c92-5e95ce3c2090",
                                      "parentUUID": "38f66c2f-637d-4e15-8d7e-3cdfb1ff676e",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "536b6c94-60c2-481c-8dfc-bd6cbf73dd4f",
                                    "ec646c23-8550-4cb4-9378-53d40f539b4b",
                                    "c5cf86d6-c509-413d-9c92-5e95ce3c2090"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 22,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "a5babe2d-4849-491c-90ef-93cefcce229f",
                              "title": "自定Issuer可销毁代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                  "title": "测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 997,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "5c5df72f-768e-49b0-bee0-705ab99304b7",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0270\t发行自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 3200,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "16f34444-61f2-467c-8d2f-4966f18adafb",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0290\t发行自定Issuer可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "70a34d45-1ff1-444b-9490-981cdf16cdfb",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0300\t发行自定Issuer可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a48854c6-fb6e-418a-b59a-2749cdd0dbaa",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "9a435b70-1dbc-4cc9-9581-49cb63b3a3fc",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d637d015-b14e-4d61-94e6-55aa1e1cbc38",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0f701dbb-5a85-4641-88d7-922db326961d",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction blob 1200012280020000240000092c68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000bed91e649cee69f64b76868db59763b0e3c3a8d7732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af77447304502210098b85f3baf32dd91deebd560ea60b88bec5adcccb5fbbfbebcbad66854a22a9e0220616241891aa9e3418db749bd0ed4008909c10107cb0216212384f3074a66e2ac8114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363533041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction blob 1200012280020000240000092c68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000bed91e649cee69f64b76868db59763b0e3c3a8d7732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af77447304502210098b85f3baf32dd91deebd560ea60b88bec5adcccb5fbbfbebcbad66854a22a9e0220616241891aa9e3418db749bd0ed4008909c10107cb0216212384f3074a66e2ac8114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363533041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:582:29)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "3a497742-f9e8-44d6-b4d3-f21903585d4f",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "37e51b8c-6337-4c19-abfb-32090c3df102",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "67626bbf-88d0-49a5-b54d-9291c3e25679",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ee718978-1099-471b-9aea-3b693c8ca9fb",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "eb5d83d7-86f6-4ba6-abcb-892a4e272191",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d1ff13e9-0f6d-49f8-b90b-63aa0d0d5b24",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6869bbed-7268-4092-b5bc-2e812e28ddf4",
                                      "parentUUID": "10a73694-2d0b-4902-9c06-9ab15ed13a1b",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "16f34444-61f2-467c-8d2f-4966f18adafb",
                                    "70a34d45-1ff1-444b-9490-981cdf16cdfb",
                                    "a48854c6-fb6e-418a-b59a-2749cdd0dbaa",
                                    "d637d015-b14e-4d61-94e6-55aa1e1cbc38",
                                    "0f701dbb-5a85-4641-88d7-922db326961d",
                                    "37e51b8c-6337-4c19-abfb-32090c3df102",
                                    "67626bbf-88d0-49a5-b54d-9291c3e25679",
                                    "ee718978-1099-471b-9aea-3b693c8ca9fb",
                                    "eb5d83d7-86f6-4ba6-abcb-892a4e272191",
                                    "d1ff13e9-0f6d-49f8-b90b-63aa0d0d5b24",
                                    "6869bbed-7268-4092-b5bc-2e812e28ddf4"
                                  ],
                                  "failures": [
                                    "9a435b70-1dbc-4cc9-9581-49cb63b3a3fc",
                                    "3a497742-f9e8-44d6-b4d3-f21903585d4f"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3278,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                  "title": "测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 924,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "9b6d0ded-13e2-4f79-9f87-1d58c0cd1275",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0010\t发起自定Issuer可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 4248,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "199b8d87-c043-4358-bb66-4b8693e68606",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "1bfa04c8-cdc4-4aa3-9f78-9f96381bd338",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 14,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "4872515d-219b-4cab-b72b-0e416ea9d8bd",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b1ec07a5-8ef0-457d-86d1-b2f631701814",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0040\t发起自定Issuer可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c4ef847f-3abf-499f-bc46-c8e405de5643",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0050\t发起自定Issuer可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a8fec345-c919-4881-bc1d-7d521e1c948e",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0060\t发起自定Issuer可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a73f4a35-26e0-4568-95a4-58bac724a5d8",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0070\t发起自定Issuer可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 10,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "986f3907-7212-4566-af13-26d7bdf8e87c",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a80a929e-a6e7-428f-b51c-de34902f9016",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "2e9379a2-4028-4d0f-96d5-cd2d57f8f150",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0090\t发起自定Issuer可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a7d3473e-9ea2-460c-a677-1d903d49871c",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0100\t发起自定Issuer可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b7b7b505-9ef2-418d-a040-c29a3bb9a5d3",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0110\t发起自定Issuer可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e7936eba-22d4-4af1-8844-e4573e402b25",
                                      "parentUUID": "c06c3283-c513-4d86-b417-3d5fc1f6cfea",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "199b8d87-c043-4358-bb66-4b8693e68606",
                                    "b1ec07a5-8ef0-457d-86d1-b2f631701814",
                                    "c4ef847f-3abf-499f-bc46-c8e405de5643",
                                    "a8fec345-c919-4881-bc1d-7d521e1c948e",
                                    "a73f4a35-26e0-4568-95a4-58bac724a5d8",
                                    "986f3907-7212-4566-af13-26d7bdf8e87c",
                                    "a80a929e-a6e7-428f-b51c-de34902f9016",
                                    "2e9379a2-4028-4d0f-96d5-cd2d57f8f150",
                                    "a7d3473e-9ea2-460c-a677-1d903d49871c",
                                    "b7b7b505-9ef2-418d-a040-c29a3bb9a5d3",
                                    "e7936eba-22d4-4af1-8844-e4573e402b25"
                                  ],
                                  "failures": [
                                    "1bfa04c8-cdc4-4aa3-9f78-9f96381bd338",
                                    "4872515d-219b-4cab-b72b-0e416ea9d8bd"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4347,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "6c8914cf-e412-43a1-9e35-a1ef3bcb00f9",
                                  "title": "测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11305,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "b984afe6-2390-4967-8a29-bc430a977d66",
                                      "parentUUID": "6c8914cf-e412-43a1-9e35-a1ef3bcb00f9",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 82,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "438e9c54-f48c-4f78-9782-34047e555fd7",
                                      "parentUUID": "6c8914cf-e412-43a1-9e35-a1ef3bcb00f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 79,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "55da71f5-b384-43dc-ae72-832126ab3d78",
                                      "parentUUID": "6c8914cf-e412-43a1-9e35-a1ef3bcb00f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 82,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "802271b8-3f41-4bf3-b5c0-51c1fc8a1270",
                                      "parentUUID": "6c8914cf-e412-43a1-9e35-a1ef3bcb00f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 74,
                                      "state": "passed",
                                      "speed": "medium",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f2188b83-1a39-4dd0-be4d-747e06479240",
                                      "parentUUID": "6c8914cf-e412-43a1-9e35-a1ef3bcb00f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 78,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a0ca821f-2c7d-4f3e-adb2-4066c51cb43a",
                                      "parentUUID": "6c8914cf-e412-43a1-9e35-a1ef3bcb00f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1834,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "8211a278-3937-41f5-9fde-e07f3920f2e7",
                                      "parentUUID": "6c8914cf-e412-43a1-9e35-a1ef3bcb00f9",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1813,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "d77e4d81-2fbb-4575-8d3a-84881269a4be",
                                      "parentUUID": "6c8914cf-e412-43a1-9e35-a1ef3bcb00f9",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "438e9c54-f48c-4f78-9782-34047e555fd7",
                                    "55da71f5-b384-43dc-ae72-832126ab3d78",
                                    "802271b8-3f41-4bf3-b5c0-51c1fc8a1270",
                                    "f2188b83-1a39-4dd0-be4d-747e06479240",
                                    "a0ca821f-2c7d-4f3e-adb2-4066c51cb43a"
                                  ],
                                  "failures": [
                                    "8211a278-3937-41f5-9fde-e07f3920f2e7",
                                    "d77e4d81-2fbb-4575-8d3a-84881269a4be"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4042,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                  "title": "测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 976,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "c04f3d59-1302-4140-9582-6bcac9500c12",
                                      "parentUUID": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 3213,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0d5069a5-2362-44a5-8fdb-4e4838da8086",
                                      "parentUUID": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 132,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "222ff983-5af2-4404-a5f0-12fc6829aed6",
                                      "parentUUID": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 119,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "541ef34c-85dd-4ef3-a029-28db9b0f5b6e",
                                      "parentUUID": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 106,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "1b009aac-61b6-4794-a317-ac47b67a8846",
                                      "parentUUID": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "491aa4f0-0bc7-47d0-93b5-ac9064942a33",
                                      "parentUUID": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "daeb74dd-9017-42a7-ada0-044934e1df74",
                                      "parentUUID": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "df27bfc7-ea1f-4556-9e51-34c10fc0d392",
                                      "parentUUID": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "43fecaf0-8d8a-4ef2-a48f-989f2934f8e7",
                                      "parentUUID": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "fb93c0be-8bd6-4b0b-8a9d-8027a1598809",
                                      "parentUUID": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可销毁代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "f871a57e-9b42-43fe-aa6e-5bc8515522d9",
                                      "parentUUID": "559296b8-9e1a-42a9-b2f1-e51b35c84557",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "0d5069a5-2362-44a5-8fdb-4e4838da8086",
                                    "222ff983-5af2-4404-a5f0-12fc6829aed6",
                                    "541ef34c-85dd-4ef3-a029-28db9b0f5b6e",
                                    "1b009aac-61b6-4794-a317-ac47b67a8846",
                                    "491aa4f0-0bc7-47d0-93b5-ac9064942a33",
                                    "daeb74dd-9017-42a7-ada0-044934e1df74",
                                    "43fecaf0-8d8a-4ef2-a48f-989f2934f8e7"
                                  ],
                                  "failures": [
                                    "df27bfc7-ea1f-4556-9e51-34c10fc0d392",
                                    "fb93c0be-8bd6-4b0b-8a9d-8027a1598809",
                                    "f871a57e-9b42-43fe-aa6e-5bc8515522d9"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3610,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "380bd282-a667-4914-9bb2-c34a29434026",
                                  "title": "测试增发-[币种:5eccabe5] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试增发-[币种:5eccabe5] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 126,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "aa5520a5-2ff1-40c9-b3d3-57ddbc623028",
                                      "parentUUID": "380bd282-a667-4914-9bb2-c34a29434026",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试增发-[币种:5eccabe5] [方式:jt_signTransaction] 0370\t增发可增发的代币自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "b5ceea4e-1410-4015-a688-bd99d913dfcc",
                                      "parentUUID": "380bd282-a667-4914-9bb2-c34a29434026",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "b5ceea4e-1410-4015-a688-bd99d913dfcc"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 5,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "f34add51-6b21-4acb-b3c7-8ac70fe90683",
                                  "title": "测试销毁-[币种:5eccabe5] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabe5] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 370,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "0f214096-71d2-4ea8-86fc-aff1b1593d13",
                                      "parentUUID": "f34add51-6b21-4acb-b3c7-8ac70fe90683",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabe5] [方式:jt_signTransaction] 0380\t销毁自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 4255,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "94b28dce-ebc7-4ba6-b028-13d01a1ee655",
                                      "parentUUID": "f34add51-6b21-4acb-b3c7-8ac70fe90683",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabe5] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "50be40f6-6e4a-4484-a4c8-589ebd2c2663",
                                      "parentUUID": "f34add51-6b21-4acb-b3c7-8ac70fe90683",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabe5] [方式:jt_signTransaction] 0380\t销毁所有自定Issuer可销毁代币",
                                      "timedOut": false,
                                      "duration": 91,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "a049d171-7d12-4e3b-aa58-987d8e76cd2d",
                                      "parentUUID": "f34add51-6b21-4acb-b3c7-8ac70fe90683",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "94b28dce-ebc7-4ba6-b028-13d01a1ee655",
                                    "50be40f6-6e4a-4484-a4c8-589ebd2c2663",
                                    "a049d171-7d12-4e3b-aa58-987d8e76cd2d"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4352,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            },
                            {
                              "uuid": "34d947cd-c221-4775-a162-accb35742470",
                              "title": "自定Issuer可增发可销毁代币测试：jt_signTransaction",
                              "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                              "file": "\\test\\start.js",
                              "beforeHooks": [],
                              "afterHooks": [],
                              "tests": [],
                              "suites": [
                                {
                                  "uuid": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                  "title": "测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1037,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "ebc25e46-ab62-4f3d-852f-57433895d386",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0270\t发行自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0270\t发行自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 4215,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "655ac5d8-7478-4ef5-a056-bc3a41b1e5fd",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0290\t发行自定Issuer可增发可销毁代币_无效的type参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0290\t发行自定Issuer可增发可销毁代币_无效的type参数",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f6370411-090e-40b5-ac8b-7c97f47ca210",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0300\t发行自定Issuer可增发可销毁代币_无效的from参数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0300\t发行自定Issuer可增发可销毁代币_无效的from参数",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f6ea950f-ec30-488d-bdff-056d500b843e",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发可销毁代币_无效的name参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可增发可销毁代币_无效的name参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 21,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "5994b0ac-f9b5-4340-918a-07fb23f2dbe6",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0310\t发行自定Issuer可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0310\t发行自定Issuer可增发可销毁代币_无效的name参数:被已有代币使用过的name",
                                      "timedOut": false,
                                      "duration": 12,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:388:19)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:582:29)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "21e9336f-fedf-42ef-8b76-55b1e09acb32",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:很长的字符串",
                                      "timedOut": false,
                                      "duration": 5,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6ad17113-bb32-440c-bcc0-28bbf48edfe3",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0320\t发行自定Issuer可增发可销毁代币_无效的symbol参数:被已有代币使用过的symbol",
                                      "timedOut": false,
                                      "duration": 11,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'failed to submit transaction blob 1200012280030000240000093a68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000bed91e649cee69f64b76868db59763b0e3c3a8d7732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af774473045022100e02f558c1d060ba7772e864ef41945cc600c1433d177dcb2e44da2d04dc045ef02207ffb493df2d7feee1c1d3d1cfc5bf887b1a820901e32916c15d91c078a81ba2f8114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363535041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'",
                                        "estack": "AssertionError: expected 'failed to submit transaction blob 1200012280030000240000093a68400000000000000a6cd6e316a9e9a40e800000000000003564663963646630000000000000bed91e649cee69f64b76868db59763b0e3c3a8d7732102085e508132b1beeab48f6b2ee10d100cd2a2604d79e87afbc5141a9bdafd1af774473045022100e02f558c1d060ba7772e864ef41945cc600c1433d177dcb2e44da2d04dc045ef02207ffb493df2d7feee1c1d3d1cfc5bf887b1a820901e32916c15d91c078a81ba2f8114bed91e649cee69f64b76868db59763b0e3c3a8d7911254657374436f696e31353930343731363535041008: temINVALID_FLAG The transaction has an invalid flag.' to include 'tefNO_PERMISSION_ISSUE No permission issue'\n    at Object.checkSingleResponseOfCommon (test\\framework\\framework.js:409:114)\n    at Object.checkSingleResponseOfCommonOneByOne (test\\framework\\framework.js:380:25)\n    at Object.checkResponseOfCommon (test\\framework\\framework.js:376:25)\n    at Object.checkResponseOfTransfer (test\\framework\\framework.js:440:25)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:582:29)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "00fe8846-6f07-4cc5-8d5f-59b6709d5e39",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:字符串",
                                      "timedOut": false,
                                      "duration": 7,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "049fde8d-b719-4074-b3ac-359a1ba9a755",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:负数",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "0861d2b2-aeae-4c24-bd42-eb5c28c657ba",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0330\t发行自定Issuer可增发可销毁代币_无效的decimals参数:小数",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "13cb54bd-5428-4785-92dd-bda0ce62db78",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:字符串",
                                      "timedOut": false,
                                      "duration": 6,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "cc740c0b-d1a4-49d6-b70e-c7a9ec2e6fc2",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:负数",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "df023131-5cc0-4baf-8ba3-71896d7dde6a",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试创建token-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0340\t发行自定Issuer可增发可销毁代币_无效的total_supply参数:小数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "41ce8b26-0bb3-4359-9631-394a84d9dfeb",
                                      "parentUUID": "6f15167c-7a9d-4ffc-9194-5e390d397b64",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "655ac5d8-7478-4ef5-a056-bc3a41b1e5fd",
                                    "f6370411-090e-40b5-ac8b-7c97f47ca210",
                                    "f6ea950f-ec30-488d-bdff-056d500b843e",
                                    "6ad17113-bb32-440c-bcc0-28bbf48edfe3",
                                    "049fde8d-b719-4074-b3ac-359a1ba9a755",
                                    "0861d2b2-aeae-4c24-bd42-eb5c28c657ba",
                                    "13cb54bd-5428-4785-92dd-bda0ce62db78",
                                    "cc740c0b-d1a4-49d6-b70e-c7a9ec2e6fc2",
                                    "df023131-5cc0-4baf-8ba3-71896d7dde6a",
                                    "41ce8b26-0bb3-4359-9631-394a84d9dfeb"
                                  ],
                                  "failures": [
                                    "5994b0ac-f9b5-4340-918a-07fb23f2dbe6",
                                    "21e9336f-fedf-42ef-8b76-55b1e09acb32",
                                    "00fe8846-6f07-4cc5-8d5f-59b6709d5e39"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4319,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                  "title": "测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 927,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "ba2909fe-3880-4c68-8435-c6c595a9f026",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0010\t发起自定Issuer可增发可销毁代币有效交易_01",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0010\t发起自定Issuer可增发可销毁代币有效交易_01",
                                      "timedOut": false,
                                      "duration": 3215,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7fcf656d-42c2-46ff-b6a9-6079dd07a087",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 没有秘钥",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 没有秘钥",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'success' to equal 'error'",
                                        "estack": "AssertionError: expected 'success' to equal 'error'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- success\n+ error\n"
                                      },
                                      "uuid": "7ca38e82-6d3c-44eb-bd09-9e94196390ed",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥1",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'",
                                        "estack": "AssertionError: expected 'Unknown secret format' to include 'Bad Base58 string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "4f40ae5e-d26d-4708-a235-fc3d05364a51",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0030\t发起自定Issuer可增发可销毁代币无效交易_01: 错误的秘钥2",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ba3b831e-aa38-40b0-b3ea-6d14ce857d03",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0040\t发起自定Issuer可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0040\t发起自定Issuer可增发可销毁代币无效交易_02: 错误的发起钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "508bde98-acb3-414a-a9f0-645533c6b292",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0050\t发起自定Issuer可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0050\t发起自定Issuer可增发可销毁代币无效交易_03: 错误的接收钱包地址（乱码字符串）",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "f94e746e-3e1b-4e0f-9604-1892f15da784",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0060\t发起自定Issuer可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0060\t发起自定Issuer可增发可销毁代币无效交易_04: 交易额超过发起钱包余额",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7d9317a4-a5c6-4c5f-a7bc-167f7224b31b",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0070\t发起自定Issuer可增发可销毁代币无效交易_05: 交易额为负数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0070\t发起自定Issuer可增发可销毁代币无效交易_05: 交易额为负数",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6814235a-b5ef-4cfc-b568-2abccf5790e3",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为空",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为空",
                                      "timedOut": false,
                                      "duration": 2,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "4d6744c6-c128-4407-88c1-ebf4dbe8944c",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0080\t发起自定Issuer可增发可销毁代币无效交易_06: 交易额为字符串",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e6e2972c-f666-4ea5-95f4-df04b43bbc4a",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0090\t发起自定Issuer可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0090\t发起自定Issuer可增发可销毁代币无效交易_07: 交易额为小于0.000001(最小数额)的正小数",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e3551d29-d368-4636-8e83-38983433ccb8",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0100\t发起自定Issuer可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0100\t发起自定Issuer可增发可销毁代币无效交易_08: 交易额为大于0.000001(最小数额)的小数",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "473376b5-a398-448c-b97c-1907fe91fca6",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0110\t发起自定Issuer可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试基本交易-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0110\t发起自定Issuer可增发可销毁代币无效交易_09: 交易额为负小数：-0.1、-1.23等",
                                      "timedOut": false,
                                      "duration": 1,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "c07108d1-d0ce-4132-be7c-5a633f60529f",
                                      "parentUUID": "0fac8cac-5e43-4a58-ba21-100b363ef911",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "7fcf656d-42c2-46ff-b6a9-6079dd07a087",
                                    "ba3b831e-aa38-40b0-b3ea-6d14ce857d03",
                                    "508bde98-acb3-414a-a9f0-645533c6b292",
                                    "f94e746e-3e1b-4e0f-9604-1892f15da784",
                                    "7d9317a4-a5c6-4c5f-a7bc-167f7224b31b",
                                    "6814235a-b5ef-4cfc-b568-2abccf5790e3",
                                    "4d6744c6-c128-4407-88c1-ebf4dbe8944c",
                                    "e6e2972c-f666-4ea5-95f4-df04b43bbc4a",
                                    "e3551d29-d368-4636-8e83-38983433ccb8",
                                    "473376b5-a398-448c-b97c-1907fe91fca6",
                                    "c07108d1-d0ce-4132-be7c-5a633f60529f"
                                  ],
                                  "failures": [
                                    "7ca38e82-6d3c-44eb-bd09-9e94196390ed",
                                    "4f40ae5e-d26d-4708-a235-fc3d05364a51"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 3243,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "9c7399aa-1a46-49ae-8cbd-85883b12fc61",
                                  "title": "测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 11201,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "5731b211-ca9f-4d06-8d42-f34024759911",
                                      "parentUUID": "9c7399aa-1a46-49ae-8cbd-85883b12fc61",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为：\"memos\":[\"大家好\"]",
                                      "timedOut": false,
                                      "duration": 134,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "099e72b8-0e2e-4bea-8ba6-f30b99028f6c",
                                      "parentUUID": "9c7399aa-1a46-49ae-8cbd-85883b12fc61",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为奇数长度数字字串：\"memos\":[\"12345\"]",
                                      "timedOut": false,
                                      "duration": 92,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "7491cd23-15db-411e-bfcd-73a2a362f77d",
                                      "parentUUID": "9c7399aa-1a46-49ae-8cbd-85883b12fc61",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为偶数长度数字字串：\"memos\":[\"123456\"]",
                                      "timedOut": false,
                                      "duration": 90,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "793892e6-987f-490c-a747-31bd13ba9a26",
                                      "parentUUID": "9c7399aa-1a46-49ae-8cbd-85883b12fc61",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0120\t发起带有效memo的交易_01: memo格式为字串：\"memos\":[\"E5A4A7E5AEB6E5A5BDff\"]",
                                      "timedOut": false,
                                      "duration": 95,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "acd81920-81d8-4a11-881a-0eb2fc4daf3f",
                                      "parentUUID": "9c7399aa-1a46-49ae-8cbd-85883b12fc61",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0130\t发起带有效memo的交易_02: memo格式为： \"memos\":[{\"type\":\"ok\",\"format\":\"utf8\",\"data\":\"E5A4A7E5AEB6E5A5BD\"}]",
                                      "timedOut": false,
                                      "duration": 78,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "e7734cf9-297b-4300-a031-519b2ed2e01e",
                                      "parentUUID": "9c7399aa-1a46-49ae-8cbd-85883b12fc61",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0140\t发起带无效memo的交易_01: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1826,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "81621f8c-a333-4fce-9db6-b8caea987e20",
                                      "parentUUID": "9c7399aa-1a46-49ae-8cbd-85883b12fc61",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易memo-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0150\t发起带无效memo的交易_02: memo内容使整个交易内容超过900K",
                                      "timedOut": false,
                                      "duration": 1837,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'error' to equal 'success'",
                                        "estack": "AssertionError: expected 'error' to equal 'success'\n    at Object.checkResponse (test\\framework\\framework.js:837:33)\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:572:19)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": "- error\n+ success\n"
                                      },
                                      "uuid": "9d75b727-a601-4a3b-b3d9-bd35842b878b",
                                      "parentUUID": "9c7399aa-1a46-49ae-8cbd-85883b12fc61",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "099e72b8-0e2e-4bea-8ba6-f30b99028f6c",
                                    "7491cd23-15db-411e-bfcd-73a2a362f77d",
                                    "793892e6-987f-490c-a747-31bd13ba9a26",
                                    "acd81920-81d8-4a11-881a-0eb2fc4daf3f",
                                    "e7734cf9-297b-4300-a031-519b2ed2e01e"
                                  ],
                                  "failures": [
                                    "81621f8c-a333-4fce-9db6-b8caea987e20",
                                    "9d75b727-a601-4a3b-b3d9-bd35842b878b"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4152,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                  "title": "测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 1007,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "8e3597f2-aad7-4c7f-b126-937ff3bfe63b",
                                      "parentUUID": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为默认值12",
                                      "timedOut": false,
                                      "duration": 4284,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "dde488ee-9f2c-4dee-b17c-180b6b7d2624",
                                      "parentUUID": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0160\t发起带有效fee的交易_01: fee为null",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0160\t发起带有效fee的交易_01: fee为null",
                                      "timedOut": false,
                                      "duration": 106,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "32d9ea19-4c50-4eb4-92ba-79a77880e147",
                                      "parentUUID": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0170\t发起带有效fee的交易_02: fee比12小，但是足以发起成功的交易，fee=10",
                                      "timedOut": false,
                                      "duration": 117,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8d1a9dcb-392f-4bc6-8d3b-a46e0e3635d1",
                                      "parentUUID": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0180\t发起带有效fee的交易_03: fee比12大但小于钱包余额",
                                      "timedOut": false,
                                      "duration": 116,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "8106fd78-b854-4673-805f-16792f8eb534",
                                      "parentUUID": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0190\t发起带无效fee的交易_01: fee比12小（比如5），但是不足以发起成功的交易，fee=9",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "d1654c43-6ffc-4d76-b588-a48db8d81cd8",
                                      "parentUUID": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0200\t发起带无效fee的交易_02: fee为0",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0200\t发起带无效fee的交易_02: fee为0",
                                      "timedOut": false,
                                      "duration": 9,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "258eda54-0798-400e-919e-82553d184e69",
                                      "parentUUID": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0210\t发起带无效fee的交易_03: fee为大于0的小数，比如12.5、5.5",
                                      "timedOut": false,
                                      "duration": 3,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"12.5\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "ba423320-0b0f-4526-92a4-7f5163d8cad3",
                                      "parentUUID": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发可销毁代币余额的整数",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0220\t发起带无效fee的交易_04: fee为大于发起钱包自定Issuer可增发可销毁代币余额的整数",
                                      "timedOut": false,
                                      "duration": 8,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "88ce9f14-c304-4198-8a48-7f36003f35d0",
                                      "parentUUID": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0230\t发起带无效fee的交易_05: fee为负数，比如-3.5、-555等",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"-35\": invalid syntax' to include 'tecINSUFF_FEE Insufficient balance to pay fee'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "02fc92d7-2c6e-4992-aedd-037fabd9c3b7",
                                      "parentUUID": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0240\t发起带无效fee的交易_06: fee为数字",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试交易Fee-[币种:自定Issuer可增发可销毁代币] [方式:jt_signTransaction] 0240\t发起带无效fee的交易_06: fee为数字",
                                      "timedOut": false,
                                      "duration": 4,
                                      "state": "failed",
                                      "speed": null,
                                      "pass": false,
                                      "fail": true,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {
                                        "message": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'",
                                        "estack": "AssertionError: expected 'strconv.ParseUint: parsing \"\": invalid syntax' to include 'interface conversion: interface {} is float64, not string'\n    at Object.checkTestCaseOfSignTxAndSendRawTx [as checkFunction] (test\\framework\\framework.js:586:110)\n    at Context.<anonymous> (test\\framework\\framework.js:643:40)",
                                        "diff": null
                                      },
                                      "uuid": "984e91c9-f6d0-4ce8-a20d-2826cc7094b4",
                                      "parentUUID": "9bd7f6c2-7a5e-4963-9282-dbb3158076a2",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "dde488ee-9f2c-4dee-b17c-180b6b7d2624",
                                    "32d9ea19-4c50-4eb4-92ba-79a77880e147",
                                    "8d1a9dcb-392f-4bc6-8d3b-a46e0e3635d1",
                                    "8106fd78-b854-4673-805f-16792f8eb534",
                                    "d1654c43-6ffc-4d76-b588-a48db8d81cd8",
                                    "258eda54-0798-400e-919e-82553d184e69",
                                    "88ce9f14-c304-4198-8a48-7f36003f35d0"
                                  ],
                                  "failures": [
                                    "ba423320-0b0f-4526-92a4-7f5163d8cad3",
                                    "02fc92d7-2c6e-4992-aedd-037fabd9c3b7",
                                    "984e91c9-f6d0-4ce8-a20d-2826cc7094b4"
                                  ],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4655,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "b85a165d-b923-43b0-8145-de4a4d428582",
                                  "title": "测试增发-[币种:5eccabe7] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试增发-[币种:5eccabe7] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 120,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "394f1a5a-3b75-43ce-9d4d-2797d092d5a8",
                                      "parentUUID": "b85a165d-b923-43b0-8145-de4a4d428582",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0370\t增发可增发的代币自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试增发-[币种:5eccabe7] [方式:jt_signTransaction] 0370\t增发可增发的代币自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 4243,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "6a4e5d50-42d8-4ada-b8ee-8158fe4f24cd",
                                      "parentUUID": "b85a165d-b923-43b0-8145-de4a4d428582",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "6a4e5d50-42d8-4ada-b8ee-8158fe4f24cd"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4243,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                },
                                {
                                  "uuid": "7172b353-451c-4cab-af6d-7d51e6924862",
                                  "title": "测试销毁-[币种:5eccabe7] [方式:jt_signTransaction]",
                                  "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                                  "file": "\\test\\start.js",
                                  "beforeHooks": [
                                    {
                                      "title": "\"before all\" hook",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabe7] [方式:jt_signTransaction] \"before all\" hook",
                                      "timedOut": false,
                                      "duration": 365,
                                      "state": null,
                                      "speed": null,
                                      "pass": false,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                                      "err": {},
                                      "uuid": "bf022fe0-52b7-447c-aad8-885b2fc450a6",
                                      "parentUUID": "7172b353-451c-4cab-af6d-7d51e6924862",
                                      "isHook": true,
                                      "skipped": false
                                    }
                                  ],
                                  "afterHooks": [],
                                  "tests": [
                                    {
                                      "title": "0380\t销毁自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabe7] [方式:jt_signTransaction] 0380\t销毁自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 4240,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "991cd7d5-b7ea-41af-a13c-fdd067b21577",
                                      "parentUUID": "7172b353-451c-4cab-af6d-7d51e6924862",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabe7] [方式:jt_signTransaction] 0420\t无效地销毁：销毁数量大于发行数量自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 13,
                                      "state": "passed",
                                      "speed": "fast",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "ccd4df01-1b07-4b17-ba1d-f29330a6e384",
                                      "parentUUID": "7172b353-451c-4cab-af6d-7d51e6924862",
                                      "isHook": false,
                                      "skipped": false
                                    },
                                    {
                                      "title": "0380\t销毁所有自定Issuer可增发可销毁代币",
                                      "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 测试jt_sendTransaction和jt_signTransaction 代币测试：jt_signTransaction 自定Issuer可增发可销毁代币测试：jt_signTransaction 测试销毁-[币种:5eccabe7] [方式:jt_signTransaction] 0380\t销毁所有自定Issuer可增发可销毁代币",
                                      "timedOut": false,
                                      "duration": 89,
                                      "state": "passed",
                                      "speed": "slow",
                                      "pass": true,
                                      "fail": false,
                                      "pending": false,
                                      "context": null,
                                      "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                                      "err": {},
                                      "uuid": "82e01c62-74ea-42d1-9420-3d8034edfb04",
                                      "parentUUID": "7172b353-451c-4cab-af6d-7d51e6924862",
                                      "isHook": false,
                                      "skipped": false
                                    }
                                  ],
                                  "suites": [],
                                  "passes": [
                                    "991cd7d5-b7ea-41af-a13c-fdd067b21577",
                                    "ccd4df01-1b07-4b17-ba1d-f29330a6e384",
                                    "82e01c62-74ea-42d1-9420-3d8034edfb04"
                                  ],
                                  "failures": [],
                                  "pending": [],
                                  "skipped": [],
                                  "duration": 4342,
                                  "root": false,
                                  "rootEmpty": false,
                                  "_timeout": 30000
                                }
                              ],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 30000
                            }
                          ],
                          "passes": [],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 0,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "e45d9f6e-0e7f-489d-b9e0-4b150e353a3c",
                      "title": "交易发送压力测试",
                      "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                      "file": "\\test\\start.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "2c99e527-51cc-4a21-bec5-27c2f013224c",
                          "title": "Sequence测试: jt_sendTransaction基本测试",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction基本测试 \"before all\" hook",
                              "timedOut": false,
                              "duration": 14951,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "78ce4cab-8b14-4d16-8a66-f511568c9165",
                              "parentUUID": "2c99e527-51cc-4a21-bec5-27c2f013224c",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0630\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+1",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction基本测试 0630\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+1",
                              "timedOut": false,
                              "duration": 48,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "7b6780b6-5b5d-4a81-bed6-b11c934ef912",
                              "parentUUID": "2c99e527-51cc-4a21-bec5-27c2f013224c",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0640\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+2;返回交易哈希，但是余额并没有变化；此时再发起一个sequence为n+1的交易，n+2的交易再被真正记录到链上",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction基本测试 0640\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+2;返回交易哈希，但是余额并没有变化；此时再发起一个sequence为n+1的交易，n+2的交易再被真正记录到链上",
                              "timedOut": false,
                              "duration": 147,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "916aee6f-4d69-4db7-a0c1-9b5f5f8ca698",
                              "parentUUID": "2c99e527-51cc-4a21-bec5-27c2f013224c",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "7b6780b6-5b5d-4a81-bed6-b11c934ef912",
                            "916aee6f-4d69-4db7-a0c1-9b5f5f8ca698"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 195,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "6a79460e-9d2c-43d4-a368-9436440e9f2d",
                          "title": "Sequence测试: jt_sendTransaction无效参数测试1",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction无效参数测试1 \"before all\" hook",
                              "timedOut": false,
                              "duration": 14392,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "5f01c1d9-d1cb-48fd-9fe8-556b81c2457f",
                              "parentUUID": "6a79460e-9d2c-43d4-a368-9436440e9f2d",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0650\t无效的sequence参数_01：假设发起钱包的sequence已经到了n，发起交易时，指定sequence为大于0且小于n的整数",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction无效参数测试1 0650\t无效的sequence参数_01：假设发起钱包的sequence已经到了n，发起交易时，指定sequence为大于0且小于n的整数",
                              "timedOut": false,
                              "duration": 4,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "fd9c08e7-3886-4645-9412-74cc03a828f7",
                              "parentUUID": "6a79460e-9d2c-43d4-a368-9436440e9f2d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：小数",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction无效参数测试1 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：小数",
                              "timedOut": false,
                              "duration": 3,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "7a520cb3-4105-4dd3-9634-febb649dbc7f",
                              "parentUUID": "6a79460e-9d2c-43d4-a368-9436440e9f2d",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "fd9c08e7-3886-4645-9412-74cc03a828f7",
                            "7a520cb3-4105-4dd3-9634-febb649dbc7f"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 7,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "895f6353-a932-470a-a703-0fb7edc6a7f2",
                          "title": "Sequence测试: jt_sendTransaction无效参数测试2",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction无效参数测试2 \"before all\" hook",
                              "timedOut": false,
                              "duration": 14294,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "b12c80fa-3928-4f51-b2fc-4daad3250557",
                              "parentUUID": "895f6353-a932-470a-a703-0fb7edc6a7f2",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：负数",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction无效参数测试2 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：负数",
                              "timedOut": false,
                              "duration": 5,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "0d76dbde-4565-40a8-842c-16c63319bfaf",
                              "parentUUID": "895f6353-a932-470a-a703-0fb7edc6a7f2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：字符串",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction无效参数测试2 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：字符串",
                              "timedOut": false,
                              "duration": 8,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "468f7236-38b3-4b51-96e5-009d588ea80c",
                              "parentUUID": "895f6353-a932-470a-a703-0fb7edc6a7f2",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "0d76dbde-4565-40a8-842c-16c63319bfaf",
                            "468f7236-38b3-4b51-96e5-009d588ea80c"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 13,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "d1c3dc47-df8b-485b-83f0-ad1eb8fba886",
                          "title": "Sequence测试: jt_sendTransaction多交易测试1",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction多交易测试1 \"before all\" hook",
                              "timedOut": false,
                              "duration": 1467,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "b5220dde-ee80-456a-b094-bd42104cda46",
                              "parentUUID": "d1c3dc47-df8b-485b-83f0-ad1eb8fba886",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0670\t同时发起多个交易时指定sequence_01:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+2、…、n+m",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction多交易测试1 0670\t同时发起多个交易时指定sequence_01:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+2、…、n+m",
                              "timedOut": false,
                              "duration": 234,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "47275f86-0f61-453f-ac8b-fc2d1e878ce9",
                              "parentUUID": "d1c3dc47-df8b-485b-83f0-ad1eb8fba886",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "47275f86-0f61-453f-ac8b-fc2d1e878ce9"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 234,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "0d586be6-d57b-430f-b28a-8c9266b66626",
                          "title": "Sequence测试: jt_sendTransaction多交易测试2",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction多交易测试2 \"before all\" hook",
                              "timedOut": false,
                              "duration": 9926,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "a82296e6-e0b9-46c6-839a-935787fed8e9",
                              "parentUUID": "0d586be6-d57b-430f-b28a-8c9266b66626",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0680\t同时发起多个交易时指定sequence_02:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+3、n+5、…、n+2m-1",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_sendTransaction多交易测试2 0680\t同时发起多个交易时指定sequence_02:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+3、n+5、…、n+2m-1",
                              "timedOut": false,
                              "duration": 389,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "53d652b2-2b44-47a8-9f05-0ae600c6a7d6",
                              "parentUUID": "0d586be6-d57b-430f-b28a-8c9266b66626",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "53d652b2-2b44-47a8-9f05-0ae600c6a7d6"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 389,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "547e29e2-f592-4c42-95e7-ce35a7a02794",
                          "title": "Sequence测试: jt_signTransaction基本测试",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction基本测试 \"before all\" hook",
                              "timedOut": false,
                              "duration": 14060,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "6c79d694-050d-4db4-810c-e2c5d31a571d",
                              "parentUUID": "547e29e2-f592-4c42-95e7-ce35a7a02794",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0630\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+1",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction基本测试 0630\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+1",
                              "timedOut": false,
                              "duration": 47,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "e8c72476-e152-4361-a946-0cce86ae3715",
                              "parentUUID": "547e29e2-f592-4c42-95e7-ce35a7a02794",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0640\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+2;返回交易哈希，但是余额并没有变化；此时再发起一个sequence为n+1的交易，n+2的交易再被真正记录到链上",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction基本测试 0640\t有效的sequence参数_01: 假设发起钱包的sequence已经到了n，发起交易时，指定sequence为n+2;返回交易哈希，但是余额并没有变化；此时再发起一个sequence为n+1的交易，n+2的交易再被真正记录到链上",
                              "timedOut": false,
                              "duration": 122,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "35c38df8-52d3-4348-b4ac-5cce3e36e390",
                              "parentUUID": "547e29e2-f592-4c42-95e7-ce35a7a02794",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "e8c72476-e152-4361-a946-0cce86ae3715",
                            "35c38df8-52d3-4348-b4ac-5cce3e36e390"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 169,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "520c95a2-7c25-409a-a088-4b3355393e8a",
                          "title": "Sequence测试: jt_signTransaction无效参数测试1",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction无效参数测试1 \"before all\" hook",
                              "timedOut": false,
                              "duration": 14431,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "9d47d2ae-83f3-41b3-9a61-497f28ef360c",
                              "parentUUID": "520c95a2-7c25-409a-a088-4b3355393e8a",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0650\t无效的sequence参数_01：假设发起钱包的sequence已经到了n，发起交易时，指定sequence为大于0且小于n的整数",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction无效参数测试1 0650\t无效的sequence参数_01：假设发起钱包的sequence已经到了n，发起交易时，指定sequence为大于0且小于n的整数",
                              "timedOut": false,
                              "duration": 16,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "4ef08f9d-4823-4e24-a123-d24566e8e37d",
                              "parentUUID": "520c95a2-7c25-409a-a088-4b3355393e8a",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：小数",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction无效参数测试1 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：小数",
                              "timedOut": false,
                              "duration": 14,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "8ea72d0a-0a9f-4835-8136-0a08960f4c8d",
                              "parentUUID": "520c95a2-7c25-409a-a088-4b3355393e8a",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "4ef08f9d-4823-4e24-a123-d24566e8e37d",
                            "8ea72d0a-0a9f-4835-8136-0a08960f4c8d"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 30,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "5b7aa4b0-351e-455c-94c1-5058d53bec98",
                          "title": "Sequence测试: jt_signTransaction无效参数测试2",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction无效参数测试2 \"before all\" hook",
                              "timedOut": false,
                              "duration": 14419,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "0e507a1c-960b-4f05-8384-773002877bac",
                              "parentUUID": "5b7aa4b0-351e-455c-94c1-5058d53bec98",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：负数",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction无效参数测试2 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：负数",
                              "timedOut": false,
                              "duration": 20,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "60c0a3af-9cc6-4853-bd38-d1dcfb1a3f9e",
                              "parentUUID": "5b7aa4b0-351e-455c-94c1-5058d53bec98",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：字符串",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction无效参数测试2 0660\t无效的sequence参数_02：指定sequence为正整数之外的其他值：字符串",
                              "timedOut": false,
                              "duration": 31,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "7eba3728-deaf-45fe-ab57-fbc31373df0f",
                              "parentUUID": "5b7aa4b0-351e-455c-94c1-5058d53bec98",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "60c0a3af-9cc6-4853-bd38-d1dcfb1a3f9e",
                            "7eba3728-deaf-45fe-ab57-fbc31373df0f"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 51,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "92197474-7037-4b91-96fb-8b5cfc217656",
                          "title": "Sequence测试: jt_signTransaction多交易测试1",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction多交易测试1 \"before all\" hook",
                              "timedOut": false,
                              "duration": 5816,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "6a2c0825-1d7e-46ec-bf98-d325ebe3a7bd",
                              "parentUUID": "92197474-7037-4b91-96fb-8b5cfc217656",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0670\t同时发起多个交易时指定sequence_01:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+2、…、n+m",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction多交易测试1 0670\t同时发起多个交易时指定sequence_01:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+2、…、n+m",
                              "timedOut": false,
                              "duration": 195,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "dfe9b2ca-2e29-45ee-aea1-eb5bae35a55a",
                              "parentUUID": "92197474-7037-4b91-96fb-8b5cfc217656",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "dfe9b2ca-2e29-45ee-aea1-eb5bae35a55a"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 195,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "92e26350-a50b-442f-acf6-9e90a73e44fc",
                          "title": "Sequence测试: jt_signTransaction多交易测试2",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction多交易测试2 \"before all\" hook",
                              "timedOut": false,
                              "duration": 10008,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "15ee44bd-ad09-4e56-9ee0-c47650dc55f9",
                              "parentUUID": "92e26350-a50b-442f-acf6-9e90a73e44fc",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0680\t同时发起多个交易时指定sequence_02:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+3、n+5、…、n+2m-1",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 Sequence测试: jt_signTransaction多交易测试2 0680\t同时发起多个交易时指定sequence_02:假设发起钱包的sequence已经到了n，同时发起m个交易，指定每个交易的sequence分别为n+1、n+3、n+5、…、n+2m-1",
                              "timedOut": false,
                              "duration": 307,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "4418f2ee-4122-496e-9491-ea78e4c4e587",
                              "parentUUID": "92e26350-a50b-442f-acf6-9e90a73e44fc",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "4418f2ee-4122-496e-9491-ea78e4c4e587"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 307,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                          "title": "原生币swt压力测试，分多个case执行",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 \"before all\" hook",
                              "timedOut": false,
                              "duration": 1809,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "e7830ded-d0d0-4886-8508-58ca35946f9a",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_1",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_1",
                              "timedOut": false,
                              "duration": 3165,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "caaaa28e-bad0-43b2-a393-54adc4627f6a",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_2",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_2",
                              "timedOut": false,
                              "duration": 64,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "3ac3ba02-de8c-412a-b518-79e4c37db9a0",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_3",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_3",
                              "timedOut": false,
                              "duration": 59,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "0e805754-4c1a-4e14-a3ed-2f11eee38549",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_4",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_4",
                              "timedOut": false,
                              "duration": 44,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "6494eaeb-43df-4628-87a0-3eab82c2e880",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_5",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_5",
                              "timedOut": false,
                              "duration": 47,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "9a669acd-c888-4569-ae8d-866cd5e9db8f",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_6",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_6",
                              "timedOut": false,
                              "duration": 48,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "8b8ddfd3-4448-42a7-ae59-658677cd2809",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_7",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_7",
                              "timedOut": false,
                              "duration": 48,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "e16035d1-3c24-4f65-876d-8d101ce0af61",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_8",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_8",
                              "timedOut": false,
                              "duration": 51,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "e6f9f41a-a8dc-4803-b09f-83c5cfa25777",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_9",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_9",
                              "timedOut": false,
                              "duration": 45,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "5df686bb-a21b-438e-b0e4-eacbe63e351e",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_10",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_10",
                              "timedOut": false,
                              "duration": 52,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "d78b537d-b2a8-4d62-8edc-ecea3ae3c7ae",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_11",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_11",
                              "timedOut": false,
                              "duration": 31,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "746f0031-4f01-4503-a83e-867c976f2bef",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_12",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_12",
                              "timedOut": false,
                              "duration": 32,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "93514520-930e-4133-b5ec-ee3a179dc5bc",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_13",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_13",
                              "timedOut": false,
                              "duration": 31,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "2bb1f440-508f-442e-92da-c6eb576fd2ea",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_14",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_14",
                              "timedOut": false,
                              "duration": 35,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "1c25e10f-fa1e-436f-80e2-8a38f2acc8e9",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_15",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_15",
                              "timedOut": false,
                              "duration": 29,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "b47fc7a9-841a-4f93-aec3-8766a09e5d4f",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_16",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_16",
                              "timedOut": false,
                              "duration": 32,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "b5c0cf67-cb56-4d78-8ed9-ef481427ca91",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_17",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_17",
                              "timedOut": false,
                              "duration": 35,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "e41de55c-9f26-4b1d-8fa8-b0ebee7bd2c6",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_18",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_18",
                              "timedOut": false,
                              "duration": 34,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "38e5919d-262c-41a8-87c6-ec328d7dcf34",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_19",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_19",
                              "timedOut": false,
                              "duration": 32,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "3babe573-9ba1-4e55-b140-ae3e2c6a20d7",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "0010\t发起原生币swt压力测试，分多个case执行有效交易_20",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，分多个case执行 0010\t发起原生币swt压力测试，分多个case执行有效交易_20",
                              "timedOut": false,
                              "duration": 35,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "070f905c-de5c-46cd-969b-a08198458fb3",
                              "parentUUID": "da63b27b-7e10-4ad6-8041-cb4d01cb1580",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "caaaa28e-bad0-43b2-a393-54adc4627f6a",
                            "3ac3ba02-de8c-412a-b518-79e4c37db9a0",
                            "0e805754-4c1a-4e14-a3ed-2f11eee38549",
                            "6494eaeb-43df-4628-87a0-3eab82c2e880",
                            "9a669acd-c888-4569-ae8d-866cd5e9db8f",
                            "8b8ddfd3-4448-42a7-ae59-658677cd2809",
                            "e16035d1-3c24-4f65-876d-8d101ce0af61",
                            "e6f9f41a-a8dc-4803-b09f-83c5cfa25777",
                            "5df686bb-a21b-438e-b0e4-eacbe63e351e",
                            "d78b537d-b2a8-4d62-8edc-ecea3ae3c7ae",
                            "746f0031-4f01-4503-a83e-867c976f2bef",
                            "93514520-930e-4133-b5ec-ee3a179dc5bc",
                            "2bb1f440-508f-442e-92da-c6eb576fd2ea",
                            "1c25e10f-fa1e-436f-80e2-8a38f2acc8e9",
                            "b47fc7a9-841a-4f93-aec3-8766a09e5d4f",
                            "b5c0cf67-cb56-4d78-8ed9-ef481427ca91",
                            "e41de55c-9f26-4b1d-8fa8-b0ebee7bd2c6",
                            "38e5919d-262c-41a8-87c6-ec328d7dcf34",
                            "3babe573-9ba1-4e55-b140-ae3e2c6a20d7",
                            "070f905c-de5c-46cd-969b-a08198458fb3"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 3949,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "b3eab419-ed29-4955-8247-625fca764906",
                          "title": "原生币swt压力测试，jt_sendTransaction，在一个内case执行",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，jt_sendTransaction，在一个内case执行 \"before all\" hook",
                              "timedOut": false,
                              "duration": 4016,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "39ee05a9-bebf-4f21-a143-b33a8b71661b",
                              "parentUUID": "b3eab419-ed29-4955-8247-625fca764906",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "9000\t交易压力测试，交易数量：50",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，jt_sendTransaction，在一个内case执行 9000\t交易压力测试，交易数量：50",
                              "timedOut": false,
                              "duration": 1927,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "3e877e98-54d3-41df-afe6-34e281128b1e",
                              "parentUUID": "b3eab419-ed29-4955-8247-625fca764906",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "3e877e98-54d3-41df-afe6-34e281128b1e"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 1927,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        },
                        {
                          "uuid": "705bfdc4-c3f0-44f1-b93d-cea6bece9b2f",
                          "title": "原生币swt压力测试，jt_signTransaction，在一个内case执行",
                          "fullFile": "E:\\2. work\\井系\\3. 链景\\井通新链\\自动测试\\codes\\jt-autotest-run\\test\\start.js",
                          "file": "\\test\\start.js",
                          "beforeHooks": [
                            {
                              "title": "\"before all\" hook",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，jt_signTransaction，在一个内case执行 \"before all\" hook",
                              "timedOut": false,
                              "duration": 7902,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "await framework.execEachTestCase(testCases, 0)  //NOTICE!!! the execute method must RETURN a promise, then batch mode can work!!!",
                              "err": {},
                              "uuid": "e13c3b35-82e7-4a40-a9e6-c1f72317c66c",
                              "parentUUID": "705bfdc4-c3f0-44f1-b93d-cea6bece9b2f",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "9000\t交易压力测试，交易数量：50",
                              "fullTitle": "Jingtum测试 测试模式: rpc@http://box-admin.elerp.net:10201/v1/jsonrpc 用例测试 交易发送压力测试 原生币swt压力测试，jt_signTransaction，在一个内case执行 9000\t交易压力测试，交易数量：50",
                              "timedOut": false,
                              "duration": 1954,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// await testCase.checkFunction(testCase)\ntry{\n    // logger.debug('===before checkFunction')\n    // logger.debug('hasExecuted: ' + testCase.hasExecuted)\n    framework.printTestCaseInfo(testCase)\n    await testCase.checkFunction(testCase)\n    // logger.debug('===after checkFunction')\n    framework.afterTestFinish(testCase)\n}\ncatch(ex){\n    framework.afterTestFinish(testCase)\n    throw ex\n}",
                              "err": {},
                              "uuid": "4dcd910f-96be-42b9-87ab-5bde9ca580ee",
                              "parentUUID": "705bfdc4-c3f0-44f1-b93d-cea6bece9b2f",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "4dcd910f-96be-42b9-87ab-5bde9ca580ee"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 1954,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}